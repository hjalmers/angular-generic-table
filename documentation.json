{
    "pipes": [
        {
            "name": "CapitalCasePipe",
            "id": "pipe-CapitalCasePipe-96bcb6bce70367e79731d26c84db241c4ce18f66daf640a6451058a35df21a3999d4524db1320b735cb653807fedbf3940ac8eef02d517c60317af70f6e1aee0",
            "file": "projects/core/src/lib/pipes/capital-case.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "s",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "s",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "capitalCase",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { capitalize } from '../utilities/utilities';\n\n@Pipe({\n  name: 'capitalCase',\n  standalone: true,\n})\nexport class CapitalCasePipe implements PipeTransform {\n  transform(s: string): any {\n    return capitalize(s);\n  }\n}\n"
        },
        {
            "name": "DashCasePipe",
            "id": "pipe-DashCasePipe-4b881ec0c37bd1d0b192e1ad42c2ec93254176a9668f8911bda81a7f576253351f74e50ba8ff7b5f1f01ce45403bb209952c139275916103a3d2ee5b47f15cbc",
            "file": "projects/core/src/lib/pipes/dash-case.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "s",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "s",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "dashCase",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { dashed } from '../utilities/utilities';\n\n@Pipe({\n  name: 'dashCase',\n  standalone: true,\n})\nexport class DashCasePipe implements PipeTransform {\n  transform(s: string): any {\n    return dashed(s);\n  }\n}\n"
        },
        {
            "name": "DynamicPipe",
            "id": "pipe-DynamicPipe-9410f04590a5057e37c4936afcce2e30c5c79cb1a458c0cf34a9335ab0ccf3a07cdfa981c9a03c91e296b2b220211aa0f8bc4b5c95aa94343feb759183088c76",
            "file": "projects/core/src/lib/pipes/dynamic.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "requiredPipe",
                            "type": "Type<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pipeArgs",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "requiredPipe",
                            "type": "Type<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pipeArgs",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "dynamicPipe",
            "sourceCode": "import { Injector, Pipe, PipeTransform, Type } from '@angular/core';\n\n@Pipe({\n  name: 'dynamicPipe',\n  standalone: true,\n})\nexport class DynamicPipe implements PipeTransform {\n  constructor(private injector: Injector) {}\n\n  transform(value: any, requiredPipe: Type<any>, pipeArgs: any[]): any {\n    const injector = Injector.create({\n      name: 'DynamicPipe',\n      parent: this.injector,\n      providers: [{ provide: requiredPipe }],\n    });\n    const pipe = injector.get(requiredPipe);\n    return pipe.transform(value, ...(pipeArgs || []));\n  }\n}\n"
        },
        {
            "name": "GenderPipe",
            "id": "pipe-GenderPipe-2ccdf200e7b7f3afa39e0e6fdca8c7ea0f53af37d1eb3722378cbcaba073ec2e8a214f10e4485e4464b0ea63b3d083009815564424e37fbd8206a83200f4ed92",
            "file": "projects/docs/src/app/examples/mobile-layout/mobile-layout.component.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "gender",
                            "type": "\"male\" | \"female\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "gender",
                            "type": "\"male\" | \"female\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "genderPipe",
            "sourceCode": "import {\n  Component,\n  Pipe,\n  PipeTransform,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { Story } from '@storybook/angular/types-6-0';\nimport {\n  TableColumn,\n  TableConfig,\n  TableRow,\n} from '@angular-generic-table/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { MOBILE_LAYOUT_SNIPPETS } from './mobileLayout.snippets';\n\n@Pipe({\n  name: 'genderPipe',\n})\nexport class GenderPipe implements PipeTransform {\n  transform(gender: 'male' | 'female'): string {\n    return gender === 'male' ? '👨' : '👩';\n  }\n}\n\n@Component({\n  selector: 'docs-mobile-layout',\n  template: `\n    <div class=\"d-flex justify-content-end mb-1 align-items-center\">\n      {{ clicked }}\n      <button class=\"btn btn-link d-sm-none \" (click)=\"toggleLayout()\">\n        {{ (mobileLayout$ | async) ? 'Desktop ' : 'Mobile ' }} layout\n      </button>\n    </div>\n    <div [class.overflow-auto]=\"(mobileLayout$ | async) === false\">\n      <angular-generic-table\n        [data]=\"data\"\n        [config]=\"config$\"\n      ></angular-generic-table>\n    </div>\n    <ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n      <button\n        class=\"btn btn-outline-primary btn-sm my-sm-n3 text-nowrap\"\n        (click)=\"clickAction(row, col, index)\"\n      >\n        Click me!\n      </button>\n    </ng-template>\n    <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n  `,\n  styles: [\n    `\n      .table th {\n        white-space: nowrap;\n      }\n    `,\n  ],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MobileLayoutComponent {\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  clicked = '';\n\n  mobileLayout$ = new BehaviorSubject(true);\n  data = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n    },\n  ];\n  config$: Observable<TableConfig> = this.mobileLayout$.pipe(\n    map((mobileLayout) => ({\n      mobileLayout,\n      columns: {\n        firstName: {\n          mobileHeader: true,\n          sortable: true,\n        },\n        lastName: {\n          mobileHeader: true,\n          sortable: true,\n        },\n        gender: {\n          mobileHeader: true,\n          transform: {\n            pipe: GenderPipe,\n          },\n        },\n        favoriteFood: {\n          mobileHeader: true,\n        },\n        action: {\n          mobileHeader: false,\n          header: false,\n          templateRef: this.actions,\n        },\n      },\n    }))\n  );\n\n  SNIPPETS = MOBILE_LAYOUT_SNIPPETS;\n\n  toggleLayout = (): void => {\n    this.mobileLayout$.next(!this.mobileLayout$.getValue());\n  };\n  clickAction(\n    row: TableRow,\n    column: { key: string; value: TableColumn },\n    index: number\n  ): void {\n    console.log('clicked row:', row, 'col:', column);\n    this.clicked = `Clicked row number: ${index}`;\n  }\n}\n\nexport const Mobile: Story<MobileLayoutComponent> = (\n  args: MobileLayoutComponent\n) => ({\n  props: args,\n  component: MobileLayoutComponent,\n});\n"
        },
        {
            "name": "HighlightPipe",
            "id": "pipe-HighlightPipe-c640cfacbaa8ab6377ac6b98273c18898ed01e151a03e64d2dd508fe2a2c875a40c61302433bb02f3da110ed882e4562d989c211d8727ba88ce9576c7bbe2cc4",
            "file": "projects/core/src/lib/pipes/highlight.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "text",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "searchTerm",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchTerm",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "highlight",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'highlight',\n  standalone: true,\n})\nexport class HighlightPipe implements PipeTransform {\n  transform(text: any, searchTerm: string | null): string {\n    if (!searchTerm) {\n      return text;\n    }\n    const haystackAlwaysString = text + '';\n    let highlightedText = haystackAlwaysString; // fallback\n\n    let searchPattern;\n    try {\n      searchPattern = new RegExp(\n        '(' +\n          // @ts-ignore\n          searchTerm\n            .toLowerCase()\n            .match(/\".*?\"|[^ ]+/g) // extract words\n            .map(\n              (needle) => needle.replace(/\"(.*?)\"/, '$1') // strip away '\"'\n            )\n            .join('|') + // combine words\n          ')',\n        'ig'\n      );\n    } catch (error) {\n      return highlightedText;\n    }\n\n    const containsTagPattern = /(<.*?>)(.*)(<\\/.*?>)/gi;\n    const containsTagMatches = containsTagPattern.exec(haystackAlwaysString);\n\n    if (containsTagMatches) {\n      // tag exists in haystack\n      highlightedText =\n        containsTagMatches[1] +\n        containsTagMatches[2].replace(\n          searchPattern,\n          '<span class=\"gt-highlight-search\">$1</span>'\n        ) +\n        containsTagMatches[3];\n    } else {\n      highlightedText = haystackAlwaysString.replace(\n        searchPattern,\n        '<span class=\"gt-highlight-search\">$1</span>'\n      );\n    }\n\n    return highlightedText;\n  }\n}\n"
        },
        {
            "name": "SortClassPipe",
            "id": "pipe-SortClassPipe-863827bcec157b80e5ad58b4ff87c5f6565a17557ffd0599b89ab1b91376e17b2adf6498974035e450cd05d0d86f4b953c02b4de5860733e761f4615c2e3b3e9",
            "file": "projects/core/src/lib/pipes/sort-class.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "sortOrder",
                            "type": "GtSortOrder | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "context",
                            "type": "\"class\" | \"aria\" | \"order\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'class'"
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sortOrder",
                            "type": "GtSortOrder | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "context",
                            "type": "\"class\" | \"aria\" | \"order\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'class'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "sortClass",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { GtSortOrder } from '../models/table-sort.interface';\n\n@Pipe({\n  name: 'sortClass',\n  standalone: true,\n})\nexport class SortClassPipe implements PipeTransform {\n  transform(\n    sortOrder: GtSortOrder | null,\n    key: string,\n    context: 'class' | 'aria' | 'order' = 'class'\n  ): string | null {\n    const sortIndex = sortOrder\n      ? sortOrder.findIndex((s) => s.key === key)\n      : -1;\n    if (context === 'aria') {\n      if (sortIndex === -1 || !sortOrder) {\n        return null;\n      } else {\n        return `${sortOrder[sortIndex].order}ending`;\n      }\n    } else if (context === 'class') {\n      if (sortIndex === -1 || !sortOrder) {\n        return '';\n      } else {\n        return `gt-sort-${sortOrder[sortIndex].order}`;\n      }\n    } else {\n      return (sortOrder && sortOrder?.length === 1) || sortIndex < 0\n        ? null\n        : sortIndex + 1 + '';\n    }\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "BasicData",
            "id": "interface-BasicData-694868655a17d764ba2ea4b3cec45a1da4821c89b5e10705be2cdafe489383b24c58c393e0f3abb055c4a617c285a2b05722a166766c3f680803a92b574cf339",
            "file": "projects/docs/src/app/examples/simple/simple.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Story } from '@storybook/angular/types-6-0';\nimport { SIMPLE_SNIPPETS } from './simple.snippets';\nimport { TableConfig } from '@angular-generic-table/core';\ninterface BasicData {\n  firstName: string;\n  lastName: string;\n  gender: 'male' | 'female';\n  favoriteFood: string;\n}\n@Component({\n  template: `\n    <div class=\"overflow-auto\">\n      <angular-generic-table\n        [data]=\"data\"\n        [config]=\"config\"\n      ></angular-generic-table>\n    </div>\n    <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n  `,\n  styles: [],\n})\nexport class SimpleComponent {\n  data: Array<BasicData> = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n    },\n  ];\n  config: TableConfig<BasicData> = {\n    class: 'table table-striped table-bordered',\n    columns: {\n      firstName: {},\n      lastName: {},\n      gender: {},\n      favoriteFood: {},\n    },\n  };\n\n  SNIPPETS = SIMPLE_SNIPPETS;\n}\n\nexport const Simple: Story<SimpleComponent> = (args: SimpleComponent) => ({\n  props: args,\n  component: SimpleComponent,\n});\n",
            "properties": [
                {
                    "name": "favoriteFood",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"male\" | \"female\"",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CalcFunc",
            "id": "interface-CalcFunc-9d7d31de0e62a8c41a418f3df63c9524673816d262c4cfcdf8a253c65a17aa4944e83c465e6eda12511b1d9fdc68afd78f3813c272611cc45c82ddcecde20d18",
            "file": "projects/core/src/lib/models/table-config.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TableColumn } from './table-column.interface';\nimport { TableRow } from './table-row.interface';\n\nexport interface TableConfig<R = TableRow> {\n  /** Disable sorting of table data, useful when sorting is handled externally e.g. server-side pagination. Table will still use sortOrder to visually show how the data is sorted. <p>**Default:** `false`</p> */\n  disableTableSort?: boolean;\n  /** Allows for a more mobile friendly layout by displaying columns as rows instead. This is accomplished with css by adding `table-mobile` class to table element and adding column headers as data labels to each row. <p>**Default:** `false`</p>*/\n  mobileLayout?: boolean;\n  /** Make row and/or column headers sticky by adding `gt-sticky-row-header` and `gt-sticky-column-header` to table to alter table behaviour using css. Please note that in order for headers to be sticky, table can't be placed inside element with overflow set to auto. <p>**Default:** `{row:false, column:false}`</p>*/\n  stickyHeaders?: {\n    row?: boolean;\n    column?: boolean;\n  };\n  /** Add one or more CSS classes to the table element e.g. `table table-striped table-bordered`. <p>**Default:** `table`</p>*/\n\n  class?: string;\n  rows?: {\n    [Property in keyof R]: TableColumn<R>;\n  };\n  columns?: {\n    [Property in keyof R]: TableColumn<R>;\n  };\n  pagination?: {\n    length?: number;\n  };\n  rowClick?: boolean;\n  rowHover?: boolean;\n  footer?: {\n    headers?: {\n      [key: FooterCalculation | string]: string | boolean;\n    };\n    columns?: {\n      [Property in keyof R]: Partial<TableFooterColumn<R>>;\n    };\n    rowOrder?: Array<keyof R | FooterCalculation>;\n    emptyContent?: string;\n  };\n}\n\ninterface TableFooterColumn<R> {\n  [key: FooterCalculation | string]: boolean | number | string | CalcFunc<R>;\n}\ninterface CalcFunc<R> {\n  (data: Array<R>, key: keyof R): number | string;\n}\ntype FooterCalculation = 'sum' | 'avg' | 'count' | 'max' | 'min';\n",
            "properties": [
                {
                    "id": "call-declaration-9d7d31de0e62a8c41a418f3df63c9524673816d262c4cfcdf8a253c65a17aa4944e83c465e6eda12511b1d9fdc68afd78f3813c272611cc45c82ddcecde20d18",
                    "args": [
                        {
                            "name": "data",
                            "type": "Array<R>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number | string",
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "kind": 173,
            "methods": []
        },
        {
            "name": "Data",
            "id": "interface-Data-04a1d485521dad8971455ab5319b9f61d0a1d60bd1e65141e5361e4e4c86e61215cc9827e2cc5f02aafd2b325c567aafdc84afe04ea907618fd71567987b3421",
            "file": "projects/docs/src/app/examples/nested-data/nested-data.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NESTED_SNIPPETS } from './nested.snippets';\nimport { Story } from '@storybook/angular/types-6-0';\nimport { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { TableConfig } from '@angular-generic-table/core';\ninterface NestedData {\n  name: {\n    first: string;\n    last: string;\n  };\n  data: {\n    details?: {\n      gender: 'male' | 'female';\n      favoriteFood: 'Pasta' | 'Pizza';\n    };\n  };\n}\n\ninterface Data {\n  firstName: string;\n  lastName: string;\n  gender: 'male' | 'female';\n  favoriteFood: 'Pasta' | 'Pizza';\n  missing: string;\n}\n@Component({\n  selector: 'nested-data',\n  template: `\n    <div class=\"row gy-3\">\n      <div class=\"col col-sm-auto\">\n        <button class=\"btn btn-outline-primary mb-3\" (click)=\"loadData()\">\n          Load other data\n        </button>\n      </div>\n      <div class=\"col col-sm-auto\">\n        <button class=\"btn btn-outline-primary mb-3\" (click)=\"resetData()\">\n          Reset\n        </button>\n      </div>\n    </div>\n    <div class=\"overflow-auto\">\n      <angular-generic-table\n        [data]=\"data\"\n        [config]=\"config\"\n      ></angular-generic-table>\n    </div>\n    <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n    <ng-template #gender let-row=\"row\" let-col=\"col\">\n      <div [ngSwitch]=\"row[col.key]\">\n        <ng-container *ngSwitchCase=\"'male'\">♂️</ng-container>\n        <ng-container *ngSwitchCase=\"'female'\">♀️</ng-container>\n      </div>\n    </ng-template>\n  `,\n  styles: [],\n})\nexport class NestedDataComponent implements OnInit {\n  @ViewChild('gender', { static: true }) gender: TemplateRef<any> | undefined;\n\n  config: TableConfig<Data> = {};\n  data: Array<NestedData> = [];\n  ngOnInit(): void {\n    this.resetData();\n    this.config = {\n      columns: {\n        firstName: {\n          sortable: true,\n          mapTo: { path: 'name.first' },\n        },\n        lastName: {\n          sortable: true,\n          mapTo: { path: 'name.last' },\n        },\n        gender: {\n          mapTo: { path: 'data.details.gender' },\n          templateRef: this.gender,\n        },\n        favoriteFood: {\n          sortable: true,\n          mapTo: { path: 'data.details.favoriteFood', missingValue: 'n/a' },\n        },\n        missing: {\n          mapTo: { path: 'data.missingKey.noMatch', missingValue: 'n/a' },\n        },\n      },\n    };\n  }\n\n  resetData() {\n    this.data = [\n      {\n        name: {\n          first: 'Peter',\n          last: 'Parker',\n        },\n        data: {\n          details: {\n            gender: 'male',\n            favoriteFood: 'Pasta',\n          },\n        },\n      },\n      {\n        name: {\n          first: 'Mary Jane',\n          last: 'Watson',\n        },\n        data: {\n          details: {\n            gender: 'female',\n            favoriteFood: 'Pizza',\n          },\n        },\n      },\n    ];\n  }\n\n  loadData(): void {\n    this.data = [\n      {\n        name: {\n          first: 'John',\n          last: 'Doe',\n        },\n        data: {\n          details: {\n            gender: 'male',\n            favoriteFood: 'Pasta',\n          },\n        },\n      },\n      {\n        name: {\n          first: 'Jane',\n          last: 'Doe',\n        },\n        data: {\n          details: {\n            gender: 'female',\n            favoriteFood: 'Pizza',\n          },\n        },\n      },\n      {\n        name: {\n          first: 'Foo',\n          last: 'Bar',\n        },\n        data: {},\n      },\n    ];\n  }\n\n  SNIPPETS = NESTED_SNIPPETS;\n}\n\nexport const Nested: Story<NestedDataComponent> = (\n  args: NestedDataComponent\n) => ({\n  props: args,\n  component: NestedDataComponent,\n});\n",
            "properties": [
                {
                    "name": "favoriteFood",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"Pasta\" | \"Pizza\"",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"male\" | \"female\"",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "missing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GtDelta",
            "id": "interface-GtDelta-d8eaa54ebedc2786bbacacc9d40879c45252ff3cfeba6048488dcc628854c5f69f0ffd5a78d21d33b244eb515886c66a7b92a11a818dd7b7cf160b4dc6fce7a6",
            "file": "projects/core/src/lib/gt-delta/gt-delta.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  TemplateRef,\n} from '@angular/core';\nimport { TableRow } from '../models/table-row.interface';\nimport { NgIf, NgTemplateOutlet, PercentPipe } from '@angular/common';\n\nexport interface GtDelta {\n  relative: number | string;\n  absolute: number;\n}\n@Component({\n  selector: 'gt-delta',\n  template: `<span\n      *ngIf=\"value as delta\"\n      [class]=\"[\n        classes.span,\n        delta.absolute > 0\n          ? classes.positive\n          : delta.absolute < 0\n          ? classes.negative\n          : null\n      ]\"\n      [class.gt-delta-positive]=\"delta.absolute > 0\"\n      [class.gt-delta-negative]=\"delta.absolute < 0\"\n      ><ng-container\n        *ngTemplateOutlet=\"deltaTemplate || defaultTemplate; context: { delta }\"\n      ></ng-container>\n    </span>\n    <ng-template #defaultTemplate let-delta=\"delta\">\n      <span *ngIf=\"delta.relative\">{{\n        delta.relative | percent: '1.0-2'\n      }}</span>\n    </ng-template>`,\n  styles: [\n    `\n      :host {\n        display: inline-block;\n      }\n    `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [PercentPipe, NgIf, NgTemplateOutlet],\n})\nexport class GtDeltaComponent implements OnChanges {\n  get value() {\n    return this._value;\n  }\n\n  set value(value) {\n    this._value = value;\n  }\n  get deltaTemplate(): TemplateRef<any> {\n    return this._deltaTemplate;\n  }\n  constructor() {}\n  @Input() set deltaTemplate(deltaTemplate: TemplateRef<any>) {\n    this._deltaTemplate = deltaTemplate;\n  }\n  Math = Math;\n  Number = Number;\n  @Input() data: Array<TableRow> = [];\n  @Input() index: number = 0;\n  @Input() baseIndex?: number;\n  @Input() classes = {\n    span: 'gt-delta',\n    positive: 'text-success',\n    negative: 'text-danger',\n  };\n  @Input() key: string = 'value';\n  @Input() notApplicableValue: string | null = null;\n  @Input() initialValue: string | number | null = null;\n  private _value?: GtDelta;\n  private _deltaTemplate?: any;\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!changes.data.currentValue) {\n      return;\n    }\n    const data = changes.data?.currentValue;\n    const index = changes.index?.currentValue || this.index;\n    const baseIndex = changes.baseIndex?.currentValue;\n    const key = changes.key?.currentValue || this.key;\n    const initialValue =\n      changes.initialValue?.currentValue || this.initialValue;\n\n    const deltaValue =\n      index === 0\n        ? initialValue\n        : data[index][key] -\n          (baseIndex === undefined\n            ? data[index - 1][key]\n            : data[baseIndex][key]);\n    const baseValue =\n      index === 0\n        ? 1\n        : baseIndex === undefined\n        ? data[index - 1][key]\n        : data[baseIndex][key];\n\n    const relative =\n      index === 0\n        ? initialValue\n        : Math.sign(deltaValue) * Math.abs(deltaValue / baseValue);\n\n    this.value = {\n      relative: Number.isFinite(relative)\n        ? relative\n        : index === 0\n        ? initialValue\n        : changes.notApplicableValue?.currentValue || this.notApplicableValue,\n      absolute: deltaValue,\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "absolute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "relative",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GtPageChangeEvent",
            "id": "interface-GtPageChangeEvent-09ae9ef79f3f3c2930c5af69a9e746354e83f59c6576b164d505a68c5ba41df5c2e353dac6577d7ef7d1862829105aa59ed39bd469d4aa4877a37acc5ab2ff21",
            "file": "projects/core/src/lib/models/table-events.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TableRow } from './table-row.interface';\nimport { GtOrder, GtSortOrder } from './table-sort.interface';\n\nexport interface GtRowClickEvent<R = TableRow> {\n  row: R;\n  index: number;\n  event: MouseEvent;\n}\n\nexport interface GtRowHoverEvent<R = TableRow> {\n  row: R | null;\n  index: number | null;\n  event?: MouseEvent;\n}\n\nexport interface GtSortEvent<R = TableRow> {\n  key: keyof R;\n  order: GtOrder;\n  currentSortOrder: GtSortOrder<R>;\n  event?: MouseEvent;\n  addSortKey: boolean /** Add additional key to sort on multiple properties? True if the user is holding shift while sorting */;\n}\n\nexport interface GtPageChangeEvent {\n  index: number;\n}\n",
            "properties": [
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GtPaginationAriaLabels",
            "id": "interface-GtPaginationAriaLabels-67c9c91404196704dbda45aea0fde9f0db7f106812d0c9c94b8cb4df7d5f11a13f0a26e4f1f14f7a06994ae0f8a8beefe16f58d37930e48f69cd86874d64df77",
            "file": "projects/core/src/lib/models/gt-pagination.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GtPaginationClasses {\n  nav?: string;\n  ul?: string;\n  li?: string;\n  button?: string;\n}\n\nexport interface GtPaginationAriaLabels {\n  nav: string;\n  button: string;\n}\n\nexport interface GtPaginationInfo {\n  pageNext: number | null;\n  pageCurrent: number | null;\n  pagePrevious: number | null;\n  pageSize: number | null;\n  numberOfRecords: number | null;\n  pageTotal?: number | null;\n}\n",
            "properties": [
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "nav",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GtPaginationClasses",
            "id": "interface-GtPaginationClasses-67c9c91404196704dbda45aea0fde9f0db7f106812d0c9c94b8cb4df7d5f11a13f0a26e4f1f14f7a06994ae0f8a8beefe16f58d37930e48f69cd86874d64df77",
            "file": "projects/core/src/lib/models/gt-pagination.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GtPaginationClasses {\n  nav?: string;\n  ul?: string;\n  li?: string;\n  button?: string;\n}\n\nexport interface GtPaginationAriaLabels {\n  nav: string;\n  button: string;\n}\n\nexport interface GtPaginationInfo {\n  pageNext: number | null;\n  pageCurrent: number | null;\n  pagePrevious: number | null;\n  pageSize: number | null;\n  numberOfRecords: number | null;\n  pageTotal?: number | null;\n}\n",
            "properties": [
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "li",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "nav",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "ul",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GtPaginationInfo",
            "id": "interface-GtPaginationInfo-67c9c91404196704dbda45aea0fde9f0db7f106812d0c9c94b8cb4df7d5f11a13f0a26e4f1f14f7a06994ae0f8a8beefe16f58d37930e48f69cd86874d64df77",
            "file": "projects/core/src/lib/models/gt-pagination.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GtPaginationClasses {\n  nav?: string;\n  ul?: string;\n  li?: string;\n  button?: string;\n}\n\nexport interface GtPaginationAriaLabels {\n  nav: string;\n  button: string;\n}\n\nexport interface GtPaginationInfo {\n  pageNext: number | null;\n  pageCurrent: number | null;\n  pagePrevious: number | null;\n  pageSize: number | null;\n  numberOfRecords: number | null;\n  pageTotal?: number | null;\n}\n",
            "properties": [
                {
                    "name": "numberOfRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "pageCurrent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "pageNext",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "pagePrevious",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "pageTotal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GtRowClickEvent",
            "id": "interface-GtRowClickEvent-09ae9ef79f3f3c2930c5af69a9e746354e83f59c6576b164d505a68c5ba41df5c2e353dac6577d7ef7d1862829105aa59ed39bd469d4aa4877a37acc5ab2ff21",
            "file": "projects/core/src/lib/models/table-events.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TableRow } from './table-row.interface';\nimport { GtOrder, GtSortOrder } from './table-sort.interface';\n\nexport interface GtRowClickEvent<R = TableRow> {\n  row: R;\n  index: number;\n  event: MouseEvent;\n}\n\nexport interface GtRowHoverEvent<R = TableRow> {\n  row: R | null;\n  index: number | null;\n  event?: MouseEvent;\n}\n\nexport interface GtSortEvent<R = TableRow> {\n  key: keyof R;\n  order: GtOrder;\n  currentSortOrder: GtSortOrder<R>;\n  event?: MouseEvent;\n  addSortKey: boolean /** Add additional key to sort on multiple properties? True if the user is holding shift while sorting */;\n}\n\nexport interface GtPageChangeEvent {\n  index: number;\n}\n",
            "properties": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MouseEvent",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "R",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GtRowHoverEvent",
            "id": "interface-GtRowHoverEvent-09ae9ef79f3f3c2930c5af69a9e746354e83f59c6576b164d505a68c5ba41df5c2e353dac6577d7ef7d1862829105aa59ed39bd469d4aa4877a37acc5ab2ff21",
            "file": "projects/core/src/lib/models/table-events.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TableRow } from './table-row.interface';\nimport { GtOrder, GtSortOrder } from './table-sort.interface';\n\nexport interface GtRowClickEvent<R = TableRow> {\n  row: R;\n  index: number;\n  event: MouseEvent;\n}\n\nexport interface GtRowHoverEvent<R = TableRow> {\n  row: R | null;\n  index: number | null;\n  event?: MouseEvent;\n}\n\nexport interface GtSortEvent<R = TableRow> {\n  key: keyof R;\n  order: GtOrder;\n  currentSortOrder: GtSortOrder<R>;\n  event?: MouseEvent;\n  addSortKey: boolean /** Add additional key to sort on multiple properties? True if the user is holding shift while sorting */;\n}\n\nexport interface GtPageChangeEvent {\n  index: number;\n}\n",
            "properties": [
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MouseEvent",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "row",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "R | null",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GtSortConfig",
            "id": "interface-GtSortConfig-5ebf8d79dde996f6f1b846feb6f5a9d53bf8e9f71148b865d03bc29797c0d564d6ee23f47f5cbbfcd943834b7b67e01e5653790f1e63dda88407e78dbdeb4895",
            "file": "projects/core/src/lib/models/table-sort.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TableRow } from './table-row.interface';\n\nexport type GtSortOrder<R = TableRow> = Array<GtSortConfig<R>>;\nexport interface GtSortConfig<R = {}> {\n  key: keyof R;\n  order: GtOrder;\n}\n\nexport type GtOrder = 'asc' | 'desc';\n",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GtOrder",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GtSortEvent",
            "id": "interface-GtSortEvent-09ae9ef79f3f3c2930c5af69a9e746354e83f59c6576b164d505a68c5ba41df5c2e353dac6577d7ef7d1862829105aa59ed39bd469d4aa4877a37acc5ab2ff21",
            "file": "projects/core/src/lib/models/table-events.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TableRow } from './table-row.interface';\nimport { GtOrder, GtSortOrder } from './table-sort.interface';\n\nexport interface GtRowClickEvent<R = TableRow> {\n  row: R;\n  index: number;\n  event: MouseEvent;\n}\n\nexport interface GtRowHoverEvent<R = TableRow> {\n  row: R | null;\n  index: number | null;\n  event?: MouseEvent;\n}\n\nexport interface GtSortEvent<R = TableRow> {\n  key: keyof R;\n  order: GtOrder;\n  currentSortOrder: GtSortOrder<R>;\n  event?: MouseEvent;\n  addSortKey: boolean /** Add additional key to sort on multiple properties? True if the user is holding shift while sorting */;\n}\n\nexport interface GtPageChangeEvent {\n  index: number;\n}\n",
            "properties": [
                {
                    "name": "addSortKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "currentSortOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GtSortOrder<R>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MouseEvent",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GtOrder",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LazyLoadingData",
            "id": "interface-LazyLoadingData-cb0f40783d1b367a19972a3b81e3d412ca580af909300bf9ee947fdcb514868d51bd4bbe662c4629e06be3b886763c1e2b2cb9ad5960daf2a9bee4c93c234cff",
            "file": "projects/docs/src/app/examples/server-side-pagination/server-side-pagination.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { DatePipe, formatDate } from '@angular/common';\nimport {\n  GtPageChangeEvent,\n  GtSortEvent,\n  GtSortOrder,\n  PaginationComponent,\n  TableConfig,\n} from '@angular-generic-table/core';\nimport { FormBuilder } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { pluck, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { Story } from '@storybook/angular/types-6-0';\nimport { GtPaginationInfo } from '../../../../../core/src/lib/models/gt-pagination';\nimport { sortOrderToParams } from '../../../../../core/src/lib/utilities/utilities';\nimport { LAZY_LOADING_DOCS } from './server-side-pagination.snippets';\ninterface LazyLoadingData {\n  birthday: string;\n  email: string;\n  favorite_color: string;\n  first_name: string;\n  gender: string;\n  id: number;\n  last_name: string;\n}\n\ninterface LazyLoadingResponse {\n  data: Array<LazyLoadingData>;\n  paging: GtPaginationInfo;\n  sorting: GtSortOrder<LazyLoadingData>;\n  filters: [\n    {\n      [Property in keyof LazyLoadingResponse]: { [key: string]: any };\n    }\n  ];\n  request: any;\n  error: any;\n}\n@Component({\n  selector: 'docs-lazy-loading',\n  templateUrl: './server-side-pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ServerSidePaginationComponent implements OnInit {\n  constructor(private fb: FormBuilder, private http: HttpClient) {}\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  @ViewChild('color', { static: true }) color: TemplateRef<any> | undefined;\n  paginationForm = this.fb.group({\n    search: [''],\n  });\n  requestParams$ = new BehaviorSubject({\n    page: 1,\n    page_size: 10,\n    sort_by: '+id',\n  });\n  search$ = this.paginationForm.controls.search.valueChanges.pipe(\n    shareReplay(1)\n  );\n  loading$ = new BehaviorSubject(true);\n\n  request$ = this.requestParams$.pipe(\n    tap((_) => this.loading$.next(true)), // show loading indicator whenever requests are changed (remove to disable loading indicator)\n    switchMap((params) =>\n      this.http.get<LazyLoadingResponse>(\n        'https://private-a6da3-generictableapi.apiary-mock.com/data',\n        {\n          params,\n        }\n      )\n    ),\n    tap((_) => this.loading$.next(false)), // hide loading indicator\n    shareReplay(1)\n  );\n\n  data$: Observable<Array<LazyLoadingData>> = this.request$.pipe(\n    pluck('data'),\n    shareReplay(1)\n  );\n  paging$: Observable<GtPaginationInfo> = this.request$.pipe(\n    pluck('paging'),\n    shareReplay(1)\n  );\n\n  sorting$ = this.request$.pipe(pluck('sorting'), shareReplay(1));\n\n  onPageChange(event: GtPageChangeEvent): void {\n    const current = { ...this.requestParams$.value };\n    if (current.page != event.index + 1) {\n      this.requestParams$.next({\n        ...current,\n        page: event.index + 1,\n      });\n    }\n  }\n\n  onSortOrderChange(event: GtSortEvent): void {\n    let sort_by = sortOrderToParams([...event.currentSortOrder]);\n    const current = { ...this.requestParams$.value };\n    if (current.sort_by !== sort_by) {\n      this.requestParams$.next({\n        ...current,\n        page: 1, // reset page to 1 when sorting changes\n        sort_by,\n      });\n    }\n  }\n\n  tableConfig$: ReplaySubject<TableConfig<LazyLoadingData>> = new ReplaySubject(\n    1\n  );\n  ngOnInit(): void {\n    this.tableConfig$.next({\n      class: 'table text-nowrap',\n      columns: {\n        id: {\n          sortable: true,\n        },\n        first_name: {},\n        last_name: {\n          sortable: true,\n        },\n        gender: {\n          sortable: true,\n        },\n        birthday: {\n          class: 'text-end justify-content-end',\n          search: (row, column) => formatDate(row[column], 'longDate', 'en'),\n          transform: {\n            pipe: DatePipe,\n            args: ['longDate'],\n          },\n        },\n        favorite_color: {\n          hidden: true,\n        },\n        email: {\n          hidden: true,\n        },\n      },\n      pagination: {\n        length: 10,\n      },\n    });\n  }\n  SNIPPETS = LAZY_LOADING_DOCS;\n}\n\nexport const Pagination: Story<PaginationComponent> = (\n  args: PaginationComponent\n) => ({\n  props: args,\n  component: PaginationComponent,\n});\n",
            "properties": [
                {
                    "name": "birthday",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "favorite_color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "first_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "last_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LazyLoadingResponse",
            "id": "interface-LazyLoadingResponse-cb0f40783d1b367a19972a3b81e3d412ca580af909300bf9ee947fdcb514868d51bd4bbe662c4629e06be3b886763c1e2b2cb9ad5960daf2a9bee4c93c234cff",
            "file": "projects/docs/src/app/examples/server-side-pagination/server-side-pagination.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { DatePipe, formatDate } from '@angular/common';\nimport {\n  GtPageChangeEvent,\n  GtSortEvent,\n  GtSortOrder,\n  PaginationComponent,\n  TableConfig,\n} from '@angular-generic-table/core';\nimport { FormBuilder } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { pluck, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { Story } from '@storybook/angular/types-6-0';\nimport { GtPaginationInfo } from '../../../../../core/src/lib/models/gt-pagination';\nimport { sortOrderToParams } from '../../../../../core/src/lib/utilities/utilities';\nimport { LAZY_LOADING_DOCS } from './server-side-pagination.snippets';\ninterface LazyLoadingData {\n  birthday: string;\n  email: string;\n  favorite_color: string;\n  first_name: string;\n  gender: string;\n  id: number;\n  last_name: string;\n}\n\ninterface LazyLoadingResponse {\n  data: Array<LazyLoadingData>;\n  paging: GtPaginationInfo;\n  sorting: GtSortOrder<LazyLoadingData>;\n  filters: [\n    {\n      [Property in keyof LazyLoadingResponse]: { [key: string]: any };\n    }\n  ];\n  request: any;\n  error: any;\n}\n@Component({\n  selector: 'docs-lazy-loading',\n  templateUrl: './server-side-pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ServerSidePaginationComponent implements OnInit {\n  constructor(private fb: FormBuilder, private http: HttpClient) {}\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  @ViewChild('color', { static: true }) color: TemplateRef<any> | undefined;\n  paginationForm = this.fb.group({\n    search: [''],\n  });\n  requestParams$ = new BehaviorSubject({\n    page: 1,\n    page_size: 10,\n    sort_by: '+id',\n  });\n  search$ = this.paginationForm.controls.search.valueChanges.pipe(\n    shareReplay(1)\n  );\n  loading$ = new BehaviorSubject(true);\n\n  request$ = this.requestParams$.pipe(\n    tap((_) => this.loading$.next(true)), // show loading indicator whenever requests are changed (remove to disable loading indicator)\n    switchMap((params) =>\n      this.http.get<LazyLoadingResponse>(\n        'https://private-a6da3-generictableapi.apiary-mock.com/data',\n        {\n          params,\n        }\n      )\n    ),\n    tap((_) => this.loading$.next(false)), // hide loading indicator\n    shareReplay(1)\n  );\n\n  data$: Observable<Array<LazyLoadingData>> = this.request$.pipe(\n    pluck('data'),\n    shareReplay(1)\n  );\n  paging$: Observable<GtPaginationInfo> = this.request$.pipe(\n    pluck('paging'),\n    shareReplay(1)\n  );\n\n  sorting$ = this.request$.pipe(pluck('sorting'), shareReplay(1));\n\n  onPageChange(event: GtPageChangeEvent): void {\n    const current = { ...this.requestParams$.value };\n    if (current.page != event.index + 1) {\n      this.requestParams$.next({\n        ...current,\n        page: event.index + 1,\n      });\n    }\n  }\n\n  onSortOrderChange(event: GtSortEvent): void {\n    let sort_by = sortOrderToParams([...event.currentSortOrder]);\n    const current = { ...this.requestParams$.value };\n    if (current.sort_by !== sort_by) {\n      this.requestParams$.next({\n        ...current,\n        page: 1, // reset page to 1 when sorting changes\n        sort_by,\n      });\n    }\n  }\n\n  tableConfig$: ReplaySubject<TableConfig<LazyLoadingData>> = new ReplaySubject(\n    1\n  );\n  ngOnInit(): void {\n    this.tableConfig$.next({\n      class: 'table text-nowrap',\n      columns: {\n        id: {\n          sortable: true,\n        },\n        first_name: {},\n        last_name: {\n          sortable: true,\n        },\n        gender: {\n          sortable: true,\n        },\n        birthday: {\n          class: 'text-end justify-content-end',\n          search: (row, column) => formatDate(row[column], 'longDate', 'en'),\n          transform: {\n            pipe: DatePipe,\n            args: ['longDate'],\n          },\n        },\n        favorite_color: {\n          hidden: true,\n        },\n        email: {\n          hidden: true,\n        },\n      },\n      pagination: {\n        length: 10,\n      },\n    });\n  }\n  SNIPPETS = LAZY_LOADING_DOCS;\n}\n\nexport const Pagination: Story<PaginationComponent> = (\n  args: PaginationComponent\n) => ({\n  props: args,\n  component: PaginationComponent,\n});\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<LazyLoadingData>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "filters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "paging",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GtPaginationInfo",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "request",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "sorting",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GtSortOrder<LazyLoadingData>",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "NestedData",
            "id": "interface-NestedData-04a1d485521dad8971455ab5319b9f61d0a1d60bd1e65141e5361e4e4c86e61215cc9827e2cc5f02aafd2b325c567aafdc84afe04ea907618fd71567987b3421",
            "file": "projects/docs/src/app/examples/nested-data/nested-data.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { NESTED_SNIPPETS } from './nested.snippets';\nimport { Story } from '@storybook/angular/types-6-0';\nimport { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { TableConfig } from '@angular-generic-table/core';\ninterface NestedData {\n  name: {\n    first: string;\n    last: string;\n  };\n  data: {\n    details?: {\n      gender: 'male' | 'female';\n      favoriteFood: 'Pasta' | 'Pizza';\n    };\n  };\n}\n\ninterface Data {\n  firstName: string;\n  lastName: string;\n  gender: 'male' | 'female';\n  favoriteFood: 'Pasta' | 'Pizza';\n  missing: string;\n}\n@Component({\n  selector: 'nested-data',\n  template: `\n    <div class=\"row gy-3\">\n      <div class=\"col col-sm-auto\">\n        <button class=\"btn btn-outline-primary mb-3\" (click)=\"loadData()\">\n          Load other data\n        </button>\n      </div>\n      <div class=\"col col-sm-auto\">\n        <button class=\"btn btn-outline-primary mb-3\" (click)=\"resetData()\">\n          Reset\n        </button>\n      </div>\n    </div>\n    <div class=\"overflow-auto\">\n      <angular-generic-table\n        [data]=\"data\"\n        [config]=\"config\"\n      ></angular-generic-table>\n    </div>\n    <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n    <ng-template #gender let-row=\"row\" let-col=\"col\">\n      <div [ngSwitch]=\"row[col.key]\">\n        <ng-container *ngSwitchCase=\"'male'\">♂️</ng-container>\n        <ng-container *ngSwitchCase=\"'female'\">♀️</ng-container>\n      </div>\n    </ng-template>\n  `,\n  styles: [],\n})\nexport class NestedDataComponent implements OnInit {\n  @ViewChild('gender', { static: true }) gender: TemplateRef<any> | undefined;\n\n  config: TableConfig<Data> = {};\n  data: Array<NestedData> = [];\n  ngOnInit(): void {\n    this.resetData();\n    this.config = {\n      columns: {\n        firstName: {\n          sortable: true,\n          mapTo: { path: 'name.first' },\n        },\n        lastName: {\n          sortable: true,\n          mapTo: { path: 'name.last' },\n        },\n        gender: {\n          mapTo: { path: 'data.details.gender' },\n          templateRef: this.gender,\n        },\n        favoriteFood: {\n          sortable: true,\n          mapTo: { path: 'data.details.favoriteFood', missingValue: 'n/a' },\n        },\n        missing: {\n          mapTo: { path: 'data.missingKey.noMatch', missingValue: 'n/a' },\n        },\n      },\n    };\n  }\n\n  resetData() {\n    this.data = [\n      {\n        name: {\n          first: 'Peter',\n          last: 'Parker',\n        },\n        data: {\n          details: {\n            gender: 'male',\n            favoriteFood: 'Pasta',\n          },\n        },\n      },\n      {\n        name: {\n          first: 'Mary Jane',\n          last: 'Watson',\n        },\n        data: {\n          details: {\n            gender: 'female',\n            favoriteFood: 'Pizza',\n          },\n        },\n      },\n    ];\n  }\n\n  loadData(): void {\n    this.data = [\n      {\n        name: {\n          first: 'John',\n          last: 'Doe',\n        },\n        data: {\n          details: {\n            gender: 'male',\n            favoriteFood: 'Pasta',\n          },\n        },\n      },\n      {\n        name: {\n          first: 'Jane',\n          last: 'Doe',\n        },\n        data: {\n          details: {\n            gender: 'female',\n            favoriteFood: 'Pizza',\n          },\n        },\n      },\n      {\n        name: {\n          first: 'Foo',\n          last: 'Bar',\n        },\n        data: {},\n      },\n    ];\n  }\n\n  SNIPPETS = NESTED_SNIPPETS;\n}\n\nexport const Nested: Story<NestedDataComponent> = (\n  args: NestedDataComponent\n) => ({\n  props: args,\n  component: NestedDataComponent,\n});\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RawData",
            "id": "interface-RawData-0a5c0cb27d235dfe9659a36988e8f66a453ff89ad5e286c1c983f66beb2ec0e2a4b9694bf4c3ff2f652e68001624f00f6630abc1e58f843290dac6f691044c0c",
            "file": "projects/docs/src/app/examples/transpose/transpose.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { TableConfig, GtDeltaComponent } from '@angular-generic-table/core';\nimport { UntypedFormBuilder } from '@angular/forms';\nimport { withLatestFrom } from 'rxjs/operators';\nimport { Story } from '@storybook/angular/types-6-0';\nimport { TRANSPOSE_SNIPPETS } from './transpose.snippets';\ninterface RawData {\n  year: string;\n  value: number;\n}\ninterface YearData extends RawData {\n  delta: number;\n  deltaIndex: number;\n  combined: number;\n  deltaAbsolute: number;\n}\n@Component({\n  selector: 'docs-transpose',\n  template: `\n    <form [formGroup]=\"reactiveForm\">\n      <div class=\"row gy-3 gx-3 align-items-end mb-3\">\n        <div class=\"form-group col-6 col-sm-auto\">\n          <label for=\"length_input\">Number of rows</label>\n          <input\n            id=\"length_input\"\n            formControlName=\"length\"\n            type=\"number\"\n            class=\"form-control\"\n          />\n        </div>\n        <div class=\"form-group col-6 col-sm-auto\">\n          <label for=\"search_input\">Search</label>\n          <input\n            id=\"search_input\"\n            formControlName=\"search\"\n            type=\"text\"\n            class=\"form-control\"\n          />\n        </div>\n        <div class=\"col-auto\">\n          <button\n            class=\"btn btn-outline-primary w-100\"\n            (click)=\"simulateLoad()\"\n          >\n            Simulate load\n          </button>\n        </div>\n        <div class=\"col col-sm-auto\">\n          <button class=\"btn btn-outline-danger w-100\" (click)=\"empty()\">\n            Empty\n          </button>\n        </div>\n        <div class=\"col col-sm-auto\">\n          <button class=\"btn btn-outline-primary w-100\" (click)=\"load()\">\n            Reset\n          </button>\n        </div>\n        <div class=\"col col-sm-auto\">\n          <button class=\"btn btn-outline-primary w-100\" (click)=\"transpose()\">\n            Transpose\n          </button>\n        </div>\n      </div>\n      <div class=\"overflow-auto\">\n        <angular-generic-table\n          #table\n          [data]=\"data\"\n          [config]=\"tableConfig$\"\n          [loading]=\"loading$\"\n          [search]=\"search$\"\n        >\n          <div class=\"table-loading gt-skeleton-loader\"></div>\n          <div class=\"table-no-data alert alert-info mt-3\">Table is empty</div>\n        </angular-generic-table>\n      </div>\n      <angular-generic-table-pagination [table]=\"table\">\n      </angular-generic-table-pagination>\n      <ng-template #delta let-index=\"index\" let-data=\"data\">\n        <gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>\n      </ng-template>\n      <ng-template #deltaAbsolute let-index=\"index\" let-data=\"data\">\n        <gt-delta\n          [index]=\"index\"\n          [data]=\"data\"\n          [deltaTemplate]=\"deltaTemplate\"\n        ></gt-delta>\n      </ng-template>\n      <ng-template #deltaIndex let-index=\"index\" let-data=\"data\">\n        <gt-delta [index]=\"index\" [data]=\"data\" [baseIndex]=\"0\"></gt-delta>\n      </ng-template>\n      <ng-template\n        #combined\n        let-index=\"index\"\n        let-data=\"data\"\n        let-row=\"row\"\n        let-col=\"col\"\n      >\n        {{ row.value }}\n        <ng-container *ngIf=\"index > 0\">\n          <gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>\n        </ng-container>\n      </ng-template>\n      <ng-template #deltaTemplate let-delta=\"delta\">\n        <span>{{ delta.absolute }}</span></ng-template\n      >\n      <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n    </form>\n  `,\n  styles: [],\n})\nexport class TransposeComponent implements OnInit {\n  @ViewChild('delta', { static: true }) delta:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  @ViewChild('deltaAbsolute', { static: true }) deltaAbsolute:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  @ViewChild('deltaIndex', { static: true }) deltaIndex:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  @ViewChild('combined', { static: true }) combined:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  loading$ = new BehaviorSubject(false);\n  reactiveForm = this.fb.group({\n    length: [10],\n    search: [''],\n  });\n  search$ = this.reactiveForm.get('search')?.valueChanges as Observable<string>;\n  tableConfig$: BehaviorSubject<TableConfig<YearData>> = new BehaviorSubject<\n    TableConfig<YearData>\n  >({});\n  data: Array<RawData> = [];\n\n  constructor(private fb: UntypedFormBuilder) {}\n\n  ngOnInit(): void {\n    this.transpose();\n    this.load();\n    this.reactiveForm\n      .get('length')\n      ?.valueChanges.pipe(withLatestFrom(this.tableConfig$))\n      .subscribe(([length, config]) => {\n        length = +length;\n        this.tableConfig$.next({\n          ...config,\n          pagination: { ...config.pagination, length },\n        });\n      });\n  }\n\n  simulateLoad(): void {\n    this.loading$.next(true);\n    // set loading state to false after 2 seconds\n    setTimeout(() => this.loading$.next(false), 2000);\n  }\n  empty(): void {\n    this.data = [];\n  }\n  load(): void {\n    this.data = [\n      {\n        year: '2010',\n        value: 15,\n      },\n      {\n        year: '2011',\n        value: 30,\n      },\n      {\n        year: '2012',\n        value: 25,\n      },\n      {\n        year: '2013',\n        value: 0,\n      },\n      {\n        year: '2014',\n        value: 40,\n      },\n      {\n        year: '2015',\n        value: 0,\n      },\n      {\n        year: '2016',\n        value: -5,\n      },\n      {\n        year: '2018',\n        value: 75,\n      },\n      {\n        year: '2019',\n        value: 100,\n      },\n      {\n        year: '2020',\n        value: 250,\n      },\n      {\n        year: '2021',\n        value: 50,\n      },\n      {\n        year: '2022',\n        value: 60,\n      },\n    ];\n  }\n  transpose(): void {\n    if (this.tableConfig$.value.columns) {\n      this.tableConfig$.next({\n        stickyHeaders: {\n          row: true,\n          column: true,\n        },\n        rows: {\n          year: {\n            sortable: true,\n            header: false,\n            class: 'text-end',\n          },\n          value: {\n            class: 'text-end',\n          },\n          delta: {\n            header: 'Delta %',\n            templateRef: this.delta,\n            class: 'text-end',\n          },\n          deltaIndex: {\n            header: 'Since inception %',\n            templateRef: this.deltaIndex,\n            class: 'text-end',\n          },\n          deltaAbsolute: {\n            header: 'Delta',\n            templateRef: this.deltaAbsolute,\n            class: 'text-end',\n          },\n          combined: {\n            header: 'Value with change',\n            templateRef: this.combined,\n            class: 'text-end text-nowrap',\n          },\n        },\n      });\n    } else {\n      this.tableConfig$.next({\n        stickyHeaders: {\n          row: true,\n          column: true,\n        },\n        columns: {\n          year: {\n            sortable: true,\n          },\n          value: {\n            class: 'text-end',\n          },\n          delta: {\n            header: 'Delta %',\n            templateRef: this.delta,\n            class: 'text-end',\n          },\n          deltaIndex: {\n            header: 'Since inception %',\n            templateRef: this.deltaIndex,\n            class: 'text-end',\n          },\n          deltaAbsolute: {\n            header: 'Delta',\n            templateRef: this.deltaAbsolute,\n            class: 'text-end',\n          },\n          combined: {\n            header: 'Value with change',\n            templateRef: this.combined,\n            class: 'text-end text-nowrap',\n          },\n        },\n        pagination: { length: this.reactiveForm.get('length')?.value },\n      });\n    }\n  }\n  SNIPPETS = TRANSPOSE_SNIPPETS;\n}\n\nexport const Transpose: Story<TransposeComponent> = (\n  args: TransposeComponent\n) => ({\n  props: args,\n  component: TransposeComponent,\n});\n",
            "properties": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SortingData",
            "id": "interface-SortingData-4ef62adeec6897b8e534c6091a292d9ae7fd533c6079340b6b9edf96420c885a8d8a92be14944773a784a876cca1d3299a6e8762760799e0958f49349cb5bd9a",
            "file": "projects/docs/src/app/examples/sorting/sorting.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Story } from '@storybook/angular/types-6-0';\nimport { SIMPLE_SNIPPETS } from './sorting.snippets';\nimport {\n  GtSortEvent,\n  GtSortOrder,\n  TableConfig,\n} from '@angular-generic-table/core';\nimport { DatePipe } from '@angular/common';\n\ninterface SortingData {\n  firstName: string;\n  lastName: string;\n  gender: 'male' | 'female';\n  favoriteFood: string;\n  birthdate: number;\n}\n@Component({\n  template: `\n    <div class=\"overflow-auto\">\n      <angular-generic-table\n        #table\n        [data]=\"data\"\n        [config]=\"config\"\n        [(sortOrder)]=\"sortOrder\"\n        (columnSort)=\"logSortChange($event)\"\n      ></angular-generic-table>\n    </div>\n    <div class=\"row mb-3 gy-3\">\n      <div class=\"col-12 col-sm-auto\">\n        <button\n          class=\"btn btn-primary w-100\"\n          (click)=\"table.sortByKey('firstName', $event)\"\n        >\n          Sort on first name\n        </button>\n      </div>\n      <div class=\"col-12 col-sm-auto\">\n        <button class=\"btn btn-primary w-100\" (click)=\"resetSort()\">\n          Reset sorting\n        </button>\n      </div>\n    </div>\n    <strong>Current sort order</strong>\n    <p>\n      <code>\n        {{ sortOrder | json }}\n      </code>\n    </p>\n    <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n  `,\n  styles: [],\n})\nexport class SortingComponent {\n  initialSortOrder: GtSortOrder<SortingData> = [\n    { key: 'birthdate', order: 'asc' },\n    { key: 'gender', order: 'asc' },\n    { key: 'firstName', order: 'desc' },\n  ];\n  sortOrder: GtSortOrder<SortingData> = this.initialSortOrder;\n  data: Array<SortingData> = [\n    {\n      firstName: 'John',\n      lastName: 'Doe',\n      gender: 'male',\n      favoriteFood: 'pizza',\n      birthdate: 946684800000,\n    },\n    {\n      firstName: 'Jane',\n      lastName: 'Smith',\n      gender: 'female',\n      favoriteFood: 'sushi',\n      birthdate: 803404800000,\n    },\n    {\n      firstName: 'Bob',\n      lastName: 'Johnson',\n      gender: 'male',\n      favoriteFood: 'burgers',\n      birthdate: 649345600000,\n    },\n    {\n      firstName: 'Emily',\n      lastName: 'Williams',\n      gender: 'female',\n      favoriteFood: 'chicken',\n      birthdate: 946684800000,\n    },\n    {\n      firstName: 'Michael',\n      lastName: 'Jones',\n      gender: 'male',\n      favoriteFood: 'steak',\n      birthdate: 803404800000,\n    },\n    {\n      firstName: 'Matthew',\n      lastName: 'Brown',\n      gender: 'male',\n      favoriteFood: 'seafood',\n      birthdate: 649345600000,\n    },\n    {\n      firstName: 'Jessica',\n      lastName: 'Miller',\n      gender: 'female',\n      favoriteFood: 'salad',\n      birthdate: 946684800000,\n    },\n    {\n      firstName: 'Jacob',\n      lastName: 'Moore',\n      gender: 'male',\n      favoriteFood: 'pasta',\n      birthdate: 803404800000,\n    },\n    {\n      firstName: 'Nicholas',\n      lastName: 'Taylor',\n      gender: 'male',\n      favoriteFood: 'soup',\n      birthdate: 649345600000,\n    },\n    {\n      firstName: 'Ashley',\n      lastName: 'Anderson',\n      gender: 'female',\n      favoriteFood: 'tacos',\n      birthdate: 946684800000,\n    },\n    {\n      firstName: 'Brandon',\n      lastName: 'Thomas',\n      gender: 'male',\n      favoriteFood: 'nachos',\n      birthdate: 803404800000,\n    },\n  ];\n  config: TableConfig<SortingData> = {\n    columns: {\n      firstName: {\n        sortable: true,\n      },\n      lastName: {\n        sortable: true,\n      },\n      gender: {\n        sortable: true,\n      },\n      favoriteFood: {\n        sortable: true,\n      },\n      birthdate: {\n        sortable: true,\n        transform: {\n          pipe: DatePipe,\n        },\n      },\n    },\n  };\n\n  logSortChange(sortEvent: GtSortEvent<SortingData>) {\n    console.log(sortEvent);\n  }\n\n  resetSort() {\n    this.sortOrder = this.initialSortOrder;\n  }\n\n  SNIPPETS = SIMPLE_SNIPPETS;\n}\n\nexport const Sorting: Story<SortingComponent> = (args: SortingComponent) => ({\n  props: args,\n  component: SortingComponent,\n});\n",
            "properties": [
                {
                    "name": "birthdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "favoriteFood",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"male\" | \"female\"",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TableColumn",
            "id": "interface-TableColumn-953ad06f9a505d8a3bc23bf8b041124803f2f420df138001d72f681df6ad23eb54e307a24cf377dfcd0319f22d8c55b2b25dbeb468be7f9b181977039888b69b",
            "file": "projects/core/src/lib/models/table-column.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\nimport { TableRow } from './table-row.interface';\nexport interface TableColumn<R = TableRow> {\n  header?: string | false;\n  mobileHeader?: string | boolean;\n  hidden?: boolean;\n  sortable?: boolean;\n  order?: number;\n  search?: boolean | SearchFunction<R>;\n  templateRef?: TemplateRef<any>;\n  transform?: {\n    pipe: any;\n    args?: Array<any>;\n  };\n  class?: string;\n  mapTo?: {\n    path: string;\n    missingValue?: string | number;\n  };\n}\n\nexport type SearchFunction<R = TableRow> = (\n  row: R,\n  column: keyof R,\n  value: typeof row[keyof R]\n) => string;\n",
            "properties": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "mapTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "mobileHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "search",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | SearchFunction<R>",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "sortable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "transform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TableConfig",
            "id": "interface-TableConfig-9d7d31de0e62a8c41a418f3df63c9524673816d262c4cfcdf8a253c65a17aa4944e83c465e6eda12511b1d9fdc68afd78f3813c272611cc45c82ddcecde20d18",
            "file": "projects/core/src/lib/models/table-config.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TableColumn } from './table-column.interface';\nimport { TableRow } from './table-row.interface';\n\nexport interface TableConfig<R = TableRow> {\n  /** Disable sorting of table data, useful when sorting is handled externally e.g. server-side pagination. Table will still use sortOrder to visually show how the data is sorted. <p>**Default:** `false`</p> */\n  disableTableSort?: boolean;\n  /** Allows for a more mobile friendly layout by displaying columns as rows instead. This is accomplished with css by adding `table-mobile` class to table element and adding column headers as data labels to each row. <p>**Default:** `false`</p>*/\n  mobileLayout?: boolean;\n  /** Make row and/or column headers sticky by adding `gt-sticky-row-header` and `gt-sticky-column-header` to table to alter table behaviour using css. Please note that in order for headers to be sticky, table can't be placed inside element with overflow set to auto. <p>**Default:** `{row:false, column:false}`</p>*/\n  stickyHeaders?: {\n    row?: boolean;\n    column?: boolean;\n  };\n  /** Add one or more CSS classes to the table element e.g. `table table-striped table-bordered`. <p>**Default:** `table`</p>*/\n\n  class?: string;\n  rows?: {\n    [Property in keyof R]: TableColumn<R>;\n  };\n  columns?: {\n    [Property in keyof R]: TableColumn<R>;\n  };\n  pagination?: {\n    length?: number;\n  };\n  rowClick?: boolean;\n  rowHover?: boolean;\n  footer?: {\n    headers?: {\n      [key: FooterCalculation | string]: string | boolean;\n    };\n    columns?: {\n      [Property in keyof R]: Partial<TableFooterColumn<R>>;\n    };\n    rowOrder?: Array<keyof R | FooterCalculation>;\n    emptyContent?: string;\n  };\n}\n\ninterface TableFooterColumn<R> {\n  [key: FooterCalculation | string]: boolean | number | string | CalcFunc<R>;\n}\ninterface CalcFunc<R> {\n  (data: Array<R>, key: keyof R): number | string;\n}\ntype FooterCalculation = 'sum' | 'avg' | 'count' | 'max' | 'min';\n",
            "properties": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Add one or more CSS classes to the table element e.g. <code>table table-striped table-bordered</code>. <p><strong>Default:</strong> <code>table</code></p></p>\n",
                    "line": 16,
                    "rawdescription": "\nAdd one or more CSS classes to the table element e.g. `table table-striped table-bordered`. <p>**Default:** `table`</p>"
                },
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "disableTableSort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Disable sorting of table data, useful when sorting is handled externally e.g. server-side pagination. Table will still use sortOrder to visually show how the data is sorted. <p><strong>Default:</strong> <code>false</code></p></p>\n",
                    "line": 6,
                    "rawdescription": "\nDisable sorting of table data, useful when sorting is handled externally e.g. server-side pagination. Table will still use sortOrder to visually show how the data is sorted. <p>**Default:** `false`</p>"
                },
                {
                    "name": "footer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "mobileLayout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Allows for a more mobile friendly layout by displaying columns as rows instead. This is accomplished with css by adding <code>table-mobile</code> class to table element and adding column headers as data labels to each row. <p><strong>Default:</strong> <code>false</code></p></p>\n",
                    "line": 8,
                    "rawdescription": "\nAllows for a more mobile friendly layout by displaying columns as rows instead. This is accomplished with css by adding `table-mobile` class to table element and adding column headers as data labels to each row. <p>**Default:** `false`</p>"
                },
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "rowClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "rowHover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "stickyHeaders",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "<p>Make row and/or column headers sticky by adding <code>gt-sticky-row-header</code> and <code>gt-sticky-column-header</code> to table to alter table behaviour using css. Please note that in order for headers to be sticky, table can&#39;t be placed inside element with overflow set to auto. <p><strong>Default:</strong> <code>{row:false, column:false}</code></p></p>\n",
                    "line": 10,
                    "rawdescription": "\nMake row and/or column headers sticky by adding `gt-sticky-row-header` and `gt-sticky-column-header` to table to alter table behaviour using css. Please note that in order for headers to be sticky, table can't be placed inside element with overflow set to auto. <p>**Default:** `{row:false, column:false}`</p>"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TableFooterColumn",
            "id": "interface-TableFooterColumn-9d7d31de0e62a8c41a418f3df63c9524673816d262c4cfcdf8a253c65a17aa4944e83c465e6eda12511b1d9fdc68afd78f3813c272611cc45c82ddcecde20d18",
            "file": "projects/core/src/lib/models/table-config.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TableColumn } from './table-column.interface';\nimport { TableRow } from './table-row.interface';\n\nexport interface TableConfig<R = TableRow> {\n  /** Disable sorting of table data, useful when sorting is handled externally e.g. server-side pagination. Table will still use sortOrder to visually show how the data is sorted. <p>**Default:** `false`</p> */\n  disableTableSort?: boolean;\n  /** Allows for a more mobile friendly layout by displaying columns as rows instead. This is accomplished with css by adding `table-mobile` class to table element and adding column headers as data labels to each row. <p>**Default:** `false`</p>*/\n  mobileLayout?: boolean;\n  /** Make row and/or column headers sticky by adding `gt-sticky-row-header` and `gt-sticky-column-header` to table to alter table behaviour using css. Please note that in order for headers to be sticky, table can't be placed inside element with overflow set to auto. <p>**Default:** `{row:false, column:false}`</p>*/\n  stickyHeaders?: {\n    row?: boolean;\n    column?: boolean;\n  };\n  /** Add one or more CSS classes to the table element e.g. `table table-striped table-bordered`. <p>**Default:** `table`</p>*/\n\n  class?: string;\n  rows?: {\n    [Property in keyof R]: TableColumn<R>;\n  };\n  columns?: {\n    [Property in keyof R]: TableColumn<R>;\n  };\n  pagination?: {\n    length?: number;\n  };\n  rowClick?: boolean;\n  rowHover?: boolean;\n  footer?: {\n    headers?: {\n      [key: FooterCalculation | string]: string | boolean;\n    };\n    columns?: {\n      [Property in keyof R]: Partial<TableFooterColumn<R>>;\n    };\n    rowOrder?: Array<keyof R | FooterCalculation>;\n    emptyContent?: string;\n  };\n}\n\ninterface TableFooterColumn<R> {\n  [key: FooterCalculation | string]: boolean | number | string | CalcFunc<R>;\n}\ninterface CalcFunc<R> {\n  (data: Array<R>, key: keyof R): number | string;\n}\ntype FooterCalculation = 'sum' | 'avg' | 'count' | 'max' | 'min';\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-9d7d31de0e62a8c41a418f3df63c9524673816d262c4cfcdf8a253c65a17aa4944e83c465e6eda12511b1d9fdc68afd78f3813c272611cc45c82ddcecde20d18",
                    "args": [
                        {
                            "name": "key",
                            "type": "FooterCalculation | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean | number | string | CalcFunc",
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 175,
            "methods": []
        },
        {
            "name": "TableInfo",
            "id": "interface-TableInfo-f30509a3174982288af341e6c44bc9babd4acb7eec9e2785f830176b8084b20b22b8b19f02c028608d05a8dd887d2e4fa60ad129181dc3cab9f387813246af98",
            "file": "projects/core/src/lib/models/table-info.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TableInfo {\n  numberOfRecords: number;\n  pageSize: number;\n  pageTotal: number;\n  lazyLoaded?: boolean;\n}\n",
            "properties": [
                {
                    "name": "lazyLoaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "numberOfRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "pageTotal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TableMeta",
            "id": "interface-TableMeta-4eb01c0282b0d791a921b064593674d0a5cd30a4bde5800964a3d874c1b57b29d65b965af3dcc9d628c5f33e25672e33cbfbf8d7d5a59794a3de8db4b7b5c650",
            "file": "projects/core/src/lib/models/table-meta.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TableRow } from './table-row.interface';\nimport { TableConfig } from './table-config.interface';\nimport { TableInfo } from './table-info.interface';\n\nexport interface TableMeta<R = TableRow> {\n  data: Array<Array<R>>;\n  config: TableConfig<R>;\n  info: TableInfo;\n}\n",
            "properties": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableConfig<R>",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Array<R>>",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "info",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableInfo",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TableRow",
            "id": "interface-TableRow-07d21ec216ac57aa3afd8511561789b13f17014fba23877c3fda056b25bda6bde814bdcd393d3473308be3b792d18b564e884730fc400a69e39f2ff6da42d0ff",
            "file": "projects/core/src/lib/models/table-row.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TableRow {\n  [key: string]: number | string | boolean | any;\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-07d21ec216ac57aa3afd8511561789b13f17014fba23877c3fda056b25bda6bde814bdcd393d3473308be3b792d18b564e884730fc400a69e39f2ff6da42d0ff",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number | string | boolean | any",
                    "line": 1,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 175,
            "methods": []
        },
        {
            "name": "YearData",
            "id": "interface-YearData-0a5c0cb27d235dfe9659a36988e8f66a453ff89ad5e286c1c983f66beb2ec0e2a4b9694bf4c3ff2f652e68001624f00f6630abc1e58f843290dac6f691044c0c",
            "file": "projects/docs/src/app/examples/transpose/transpose.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { TableConfig, GtDeltaComponent } from '@angular-generic-table/core';\nimport { UntypedFormBuilder } from '@angular/forms';\nimport { withLatestFrom } from 'rxjs/operators';\nimport { Story } from '@storybook/angular/types-6-0';\nimport { TRANSPOSE_SNIPPETS } from './transpose.snippets';\ninterface RawData {\n  year: string;\n  value: number;\n}\ninterface YearData extends RawData {\n  delta: number;\n  deltaIndex: number;\n  combined: number;\n  deltaAbsolute: number;\n}\n@Component({\n  selector: 'docs-transpose',\n  template: `\n    <form [formGroup]=\"reactiveForm\">\n      <div class=\"row gy-3 gx-3 align-items-end mb-3\">\n        <div class=\"form-group col-6 col-sm-auto\">\n          <label for=\"length_input\">Number of rows</label>\n          <input\n            id=\"length_input\"\n            formControlName=\"length\"\n            type=\"number\"\n            class=\"form-control\"\n          />\n        </div>\n        <div class=\"form-group col-6 col-sm-auto\">\n          <label for=\"search_input\">Search</label>\n          <input\n            id=\"search_input\"\n            formControlName=\"search\"\n            type=\"text\"\n            class=\"form-control\"\n          />\n        </div>\n        <div class=\"col-auto\">\n          <button\n            class=\"btn btn-outline-primary w-100\"\n            (click)=\"simulateLoad()\"\n          >\n            Simulate load\n          </button>\n        </div>\n        <div class=\"col col-sm-auto\">\n          <button class=\"btn btn-outline-danger w-100\" (click)=\"empty()\">\n            Empty\n          </button>\n        </div>\n        <div class=\"col col-sm-auto\">\n          <button class=\"btn btn-outline-primary w-100\" (click)=\"load()\">\n            Reset\n          </button>\n        </div>\n        <div class=\"col col-sm-auto\">\n          <button class=\"btn btn-outline-primary w-100\" (click)=\"transpose()\">\n            Transpose\n          </button>\n        </div>\n      </div>\n      <div class=\"overflow-auto\">\n        <angular-generic-table\n          #table\n          [data]=\"data\"\n          [config]=\"tableConfig$\"\n          [loading]=\"loading$\"\n          [search]=\"search$\"\n        >\n          <div class=\"table-loading gt-skeleton-loader\"></div>\n          <div class=\"table-no-data alert alert-info mt-3\">Table is empty</div>\n        </angular-generic-table>\n      </div>\n      <angular-generic-table-pagination [table]=\"table\">\n      </angular-generic-table-pagination>\n      <ng-template #delta let-index=\"index\" let-data=\"data\">\n        <gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>\n      </ng-template>\n      <ng-template #deltaAbsolute let-index=\"index\" let-data=\"data\">\n        <gt-delta\n          [index]=\"index\"\n          [data]=\"data\"\n          [deltaTemplate]=\"deltaTemplate\"\n        ></gt-delta>\n      </ng-template>\n      <ng-template #deltaIndex let-index=\"index\" let-data=\"data\">\n        <gt-delta [index]=\"index\" [data]=\"data\" [baseIndex]=\"0\"></gt-delta>\n      </ng-template>\n      <ng-template\n        #combined\n        let-index=\"index\"\n        let-data=\"data\"\n        let-row=\"row\"\n        let-col=\"col\"\n      >\n        {{ row.value }}\n        <ng-container *ngIf=\"index > 0\">\n          <gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>\n        </ng-container>\n      </ng-template>\n      <ng-template #deltaTemplate let-delta=\"delta\">\n        <span>{{ delta.absolute }}</span></ng-template\n      >\n      <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n    </form>\n  `,\n  styles: [],\n})\nexport class TransposeComponent implements OnInit {\n  @ViewChild('delta', { static: true }) delta:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  @ViewChild('deltaAbsolute', { static: true }) deltaAbsolute:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  @ViewChild('deltaIndex', { static: true }) deltaIndex:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  @ViewChild('combined', { static: true }) combined:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  loading$ = new BehaviorSubject(false);\n  reactiveForm = this.fb.group({\n    length: [10],\n    search: [''],\n  });\n  search$ = this.reactiveForm.get('search')?.valueChanges as Observable<string>;\n  tableConfig$: BehaviorSubject<TableConfig<YearData>> = new BehaviorSubject<\n    TableConfig<YearData>\n  >({});\n  data: Array<RawData> = [];\n\n  constructor(private fb: UntypedFormBuilder) {}\n\n  ngOnInit(): void {\n    this.transpose();\n    this.load();\n    this.reactiveForm\n      .get('length')\n      ?.valueChanges.pipe(withLatestFrom(this.tableConfig$))\n      .subscribe(([length, config]) => {\n        length = +length;\n        this.tableConfig$.next({\n          ...config,\n          pagination: { ...config.pagination, length },\n        });\n      });\n  }\n\n  simulateLoad(): void {\n    this.loading$.next(true);\n    // set loading state to false after 2 seconds\n    setTimeout(() => this.loading$.next(false), 2000);\n  }\n  empty(): void {\n    this.data = [];\n  }\n  load(): void {\n    this.data = [\n      {\n        year: '2010',\n        value: 15,\n      },\n      {\n        year: '2011',\n        value: 30,\n      },\n      {\n        year: '2012',\n        value: 25,\n      },\n      {\n        year: '2013',\n        value: 0,\n      },\n      {\n        year: '2014',\n        value: 40,\n      },\n      {\n        year: '2015',\n        value: 0,\n      },\n      {\n        year: '2016',\n        value: -5,\n      },\n      {\n        year: '2018',\n        value: 75,\n      },\n      {\n        year: '2019',\n        value: 100,\n      },\n      {\n        year: '2020',\n        value: 250,\n      },\n      {\n        year: '2021',\n        value: 50,\n      },\n      {\n        year: '2022',\n        value: 60,\n      },\n    ];\n  }\n  transpose(): void {\n    if (this.tableConfig$.value.columns) {\n      this.tableConfig$.next({\n        stickyHeaders: {\n          row: true,\n          column: true,\n        },\n        rows: {\n          year: {\n            sortable: true,\n            header: false,\n            class: 'text-end',\n          },\n          value: {\n            class: 'text-end',\n          },\n          delta: {\n            header: 'Delta %',\n            templateRef: this.delta,\n            class: 'text-end',\n          },\n          deltaIndex: {\n            header: 'Since inception %',\n            templateRef: this.deltaIndex,\n            class: 'text-end',\n          },\n          deltaAbsolute: {\n            header: 'Delta',\n            templateRef: this.deltaAbsolute,\n            class: 'text-end',\n          },\n          combined: {\n            header: 'Value with change',\n            templateRef: this.combined,\n            class: 'text-end text-nowrap',\n          },\n        },\n      });\n    } else {\n      this.tableConfig$.next({\n        stickyHeaders: {\n          row: true,\n          column: true,\n        },\n        columns: {\n          year: {\n            sortable: true,\n          },\n          value: {\n            class: 'text-end',\n          },\n          delta: {\n            header: 'Delta %',\n            templateRef: this.delta,\n            class: 'text-end',\n          },\n          deltaIndex: {\n            header: 'Since inception %',\n            templateRef: this.deltaIndex,\n            class: 'text-end',\n          },\n          deltaAbsolute: {\n            header: 'Delta',\n            templateRef: this.deltaAbsolute,\n            class: 'text-end',\n          },\n          combined: {\n            header: 'Value with change',\n            templateRef: this.combined,\n            class: 'text-end text-nowrap',\n          },\n        },\n        pagination: { length: this.reactiveForm.get('length')?.value },\n      });\n    }\n  }\n  SNIPPETS = TRANSPOSE_SNIPPETS;\n}\n\nexport const Transpose: Story<TransposeComponent> = (\n  args: TransposeComponent\n) => ({\n  props: args,\n  component: TransposeComponent,\n});\n",
            "properties": [
                {
                    "name": "combined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "delta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "deltaAbsolute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "deltaIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "RawData"
        }
    ],
    "injectables": [
        {
            "name": "CoreService",
            "id": "injectable-CoreService-aa6c97a9fa8aaeb04ef59acbab00bca3734e79841c357f3bf212f24c045414c295ec1cd3b16188e237ce977a4ffec26961195586d7de5f10277a1cb0f8bf2896",
            "file": "projects/core/src/lib/core.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CoreService {\n  constructor() {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AdvancedComponent",
            "id": "component-AdvancedComponent-aa3269c27116d9775410b813026ef7f46afe20737bff31b59f1148e8e8ef63f474a692e0e2ad763ef3955321c6793e379b240d9c293e2ab2242fb840c4421dd8",
            "file": "projects/docs/src/app/examples/advanced/advanced.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-advanced",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./advanced.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_currentPage$",
                    "defaultValue": "new BehaviorSubject(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'actions', {static: true}"
                        }
                    ]
                },
                {
                    "name": "clicked",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'color', {static: true}"
                        }
                    ]
                },
                {
                    "name": "colors",
                    "defaultValue": "['#33d60b', '#dcafff', '#3fc9ff', '#ff1600', '#5238b1', '#fff']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "data$",
                    "defaultValue": "new BehaviorSubject([\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteColor: '#26BFAF',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteColor: '#0f0',\n      favoriteFood: 'Pizza',\n    },\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<any>",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "femaleFirstNames",
                    "defaultValue": "['Mary Jane', 'Kim', 'Sarah', 'Michelle', 'Ann']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "foods",
                    "defaultValue": "[\n    'Pizza',\n    'Pasta',\n    'Hamburger',\n    'Pancakes',\n    'Tacos',\n    'Lasagna',\n    'Meatloaf',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "lastNames",
                    "defaultValue": "[\n    'Andersson',\n    'Smith',\n    'Parker',\n    'Kent',\n    'Rogers',\n    'Lane',\n    'Jackson',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "loading$",
                    "defaultValue": "new BehaviorSubject(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "maleFirstNames",
                    "defaultValue": "['Peter', 'Clark', 'Ruben', 'John', 'Jack', 'Roscoe']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "next",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 126
                },
                {
                    "name": "paginationForm",
                    "defaultValue": "this.fb.group({\n    length: [10],\n    search: [''],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "prev",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "search$",
                    "defaultValue": "this.paginationForm.get('search')\n    ?.valueChanges as Observable<string>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "SNIPPETS",
                    "defaultValue": "ADVANCED_DOCS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "tableConfig$",
                    "defaultValue": "new ReplaySubject(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplaySubject<TableConfig>",
                    "optional": false,
                    "description": "",
                    "line": 78
                }
            ],
            "methodsClass": [
                {
                    "name": "addData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clickAction",
                    "args": [
                        {
                            "name": "row",
                            "type": "TableRow",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "column",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TableRow",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "column",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "randomRecord",
                    "args": [],
                    "optional": false,
                    "returnType": "TableRow",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "simulateLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { UntypedFormBuilder } from '@angular/forms';\nimport {\n  TableConfig,\n  TableRow,\n  TableColumn,\n} from '@angular-generic-table/core';\nimport { withLatestFrom } from 'rxjs/operators';\nimport { Story } from '@storybook/angular/types-6-0';\nimport { ADVANCED_DOCS } from './advanced.snippets';\n\n@Component({\n  selector: 'docs-advanced',\n  templateUrl: './advanced.component.html',\n  styles: [],\n})\nexport class AdvancedComponent implements OnInit {\n  get currentPage$(): Observable<number> {\n    return this._currentPage$.asObservable();\n  }\n\n  set currentPage(value: number) {\n    this._currentPage$.next(value);\n  }\n  constructor(private fb: UntypedFormBuilder) {}\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  @ViewChild('color', { static: true }) color: TemplateRef<any> | undefined;\n  paginationForm = this.fb.group({\n    length: [10],\n    search: [''],\n  });\n  search$ = this.paginationForm.get('search')\n    ?.valueChanges as Observable<string>;\n  loading$ = new BehaviorSubject(true);\n  data$: BehaviorSubject<any> = new BehaviorSubject([\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteColor: '#26BFAF',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteColor: '#0f0',\n      favoriteFood: 'Pizza',\n    },\n  ]);\n\n  private _currentPage$ = new BehaviorSubject(0);\n\n  clicked: string = '';\n  maleFirstNames = ['Peter', 'Clark', 'Ruben', 'John', 'Jack', 'Roscoe'];\n  femaleFirstNames = ['Mary Jane', 'Kim', 'Sarah', 'Michelle', 'Ann'];\n  lastNames = [\n    'Andersson',\n    'Smith',\n    'Parker',\n    'Kent',\n    'Rogers',\n    'Lane',\n    'Jackson',\n  ];\n  foods = [\n    'Pizza',\n    'Pasta',\n    'Hamburger',\n    'Pancakes',\n    'Tacos',\n    'Lasagna',\n    'Meatloaf',\n  ];\n  colors = ['#33d60b', '#dcafff', '#3fc9ff', '#ff1600', '#5238b1', '#fff'];\n\n  tableConfig$: ReplaySubject<TableConfig> = new ReplaySubject(1);\n  SNIPPETS = ADVANCED_DOCS;\n\n  addData(): void {\n    this.data$.next([...this.data$.getValue(), this.randomRecord()]);\n  }\n\n  removeData(): void {\n    this.data$.next([]);\n  }\n\n  simulateLoad(): void {\n    this.loading$.next(true);\n    // set loading state to false after 2 seconds\n    setTimeout(() => this.loading$.next(false), 2000);\n  }\n\n  clickAction(\n    row: TableRow,\n    column: { key: string; value: TableColumn },\n    index: number\n  ): void {\n    console.log('clicked row:', row, 'col:', column);\n    this.clicked = `clicked row number: ${index}`;\n  }\n\n  randomRecord(): TableRow {\n    const random = Math.floor(Math.random() * 2);\n    const newRecord = {\n      firstName: random\n        ? this.maleFirstNames[\n            Math.floor(Math.random() * this.maleFirstNames.length)\n          ]\n        : this.femaleFirstNames[\n            Math.floor(Math.random() * this.femaleFirstNames.length)\n          ],\n      lastName:\n        this.lastNames[Math.floor(Math.random() * this.lastNames.length)],\n      gender: random ? 'male' : 'female',\n      favoriteColor:\n        this.colors[Math.floor(Math.random() * this.colors.length)],\n      favoriteFood: this.foods[Math.floor(Math.random() * this.foods.length)],\n    };\n    console.log('added new random record:', newRecord);\n\n    return newRecord;\n  }\n\n  next = () => {\n    this.currentPage = this._currentPage$.value + 1;\n  };\n  prev = () => {\n    this.currentPage = this._currentPage$.value - 1;\n  };\n\n  ngOnInit(): void {\n    this.simulateLoad();\n    this.paginationForm\n      .get('length')\n      ?.valueChanges.pipe(withLatestFrom(this.tableConfig$))\n      .subscribe(([length, config]) => {\n        length = +length;\n        this.tableConfig$.next({\n          ...config,\n          pagination: { ...config.pagination, length },\n        });\n      });\n    this.tableConfig$.next({\n      class: 'table text-nowrap mb-0',\n      mobileLayout: true,\n      columns: {\n        firstName: {\n          header: 'First name',\n          mobileHeader: true,\n          sortable: true,\n          order: 0,\n        },\n        lastName: {\n          header: 'Last name',\n          mobileHeader: true,\n          hidden: false,\n          sortable: true,\n        },\n        gender: {\n          mobileHeader: 'Sex',\n          sortable: true,\n          order: 1,\n        },\n        favoriteColor: {\n          header: 'Favorite color',\n          mobileHeader: true,\n          templateRef: this.color,\n          sortable: false,\n          order: 2,\n          search: false,\n          class: 'custom-class',\n        },\n        favoriteFood: {\n          mobileHeader: true,\n          header: 'Favorite food',\n          hidden: false,\n          sortable: true,\n          order: 0,\n        },\n        action: {\n          mobileHeader: false,\n          header: false,\n          templateRef: this.actions,\n          order: 6,\n          class: 'py-1 text-end',\n        },\n      },\n      pagination: {\n        length: this.paginationForm.get('length')?.value || 0,\n      },\n      footer: {\n        columns: {\n          gender: {\n            count: (data, key) => {\n              let men = 0;\n              let women = 0;\n              for (let i = 0; i < data.length; i++) {\n                if (data[i][key] === 'female') {\n                  women++;\n                } else if (data[i][key] === 'male') {\n                  men++;\n                }\n              }\n              return `♂ ${men} ♀ ${women}`;\n            },\n          },\n          favoriteColor: {},\n          action: { count: (data, key) => `Total: ${data.length}` },\n        },\n      },\n    });\n  }\n}\n\nexport const Advanced: Story<AdvancedComponent> = (\n  args: AdvancedComponent\n) => ({\n  props: args,\n  component: AdvancedComponent,\n});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "UntypedFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "UntypedFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "currentPage$": {
                    "name": "currentPage$",
                    "getSignature": {
                        "name": "currentPage$",
                        "type": "",
                        "returnType": "Observable<number>",
                        "line": 19
                    }
                },
                "currentPage": {
                    "name": "currentPage",
                    "setSignature": {
                        "name": "currentPage",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 23,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"row mb-3 gy-3 gx-2\">\n  <div class=\"col-12 col-sm-auto\">\n    <button class=\"btn btn-primary w-100\" (click)=\"addData()\">\n      Add random data\n    </button>\n  </div>\n  <div class=\"col-12 col-sm-auto\">\n    <button class=\"btn btn-danger w-100\" (click)=\"removeData()\">\n      Remove data\n    </button>\n  </div>\n  <div class=\"col-12 col-sm-auto\">\n    <button class=\"btn btn-secondary w-100\" (click)=\"simulateLoad()\">\n      Load\n    </button>\n  </div>\n</div>\n<form [formGroup]=\"paginationForm\">\n  <div class=\"row gy-3\">\n    <div class=\"form-group col-6 col-sm-auto\">\n      <label for=\"length_input\">Length</label>\n      <input\n        id=\"length_input\"\n        formControlName=\"length\"\n        type=\"number\"\n        class=\"form-control\"\n      />\n    </div>\n    <div class=\"form-group col-6 col-sm-auto\">\n      <label for=\"search_input\">Search</label>\n      <input\n        id=\"search_input\"\n        formControlName=\"search\"\n        type=\"text\"\n        class=\"form-control\"\n      />\n    </div>\n  </div>\n</form>\n<div class=\"overflow-scroll mt-3 pb-3\">\n  <angular-generic-table\n    [data]=\"data$\"\n    [config]=\"tableConfig$\"\n    [paginationIndex]=\"(currentPage$ | async)!\"\n    [search]=\"search$\"\n    [loading]=\"loading$\"\n    #table\n  >\n    <div class=\"table-loading gt-skeleton-loader\"></div>\n    <div class=\"table-no-data alert alert-info mt-3\">Table is empty</div>\n  </angular-generic-table>\n</div>\n<div\n  class=\"row justify-content-center align-items-center gy-3\"\n  *ngIf=\"{\n    current: (currentPage$ | async) || 0,\n    total: (table.table$ | async)?.info?.pageTotal || 1\n  } as pagination\"\n>\n  <div class=\"col-6 col-sm-auto\">\n    <button\n      class=\"btn btn-primary w-100\"\n      (click)=\"prev()\"\n      [disabled]=\"pagination.current === 0\"\n    >\n      Prev\n    </button>\n  </div>\n  <div class=\"col-6 col-sm-auto\">\n    <button\n      class=\"btn btn-primary w-100\"\n      (click)=\"next()\"\n      [disabled]=\"pagination.total - 1 === pagination.current\"\n    >\n      Next\n    </button>\n  </div>\n  <div class=\"col-auto\">Current page: {{ pagination.current + 1 }}</div>\n  <div class=\"col-auto\">Total pages: {{ pagination.total }}</div>\n  <div class=\"col-auto\">Records: {{ (data$ | async).length }}</div>\n  <div class=\"col-auto\">\n    {{ clicked }}\n  </div>\n</div>\n<ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n  <button\n    *ngIf=\"index !== undefined\"\n    class=\"btn btn-outline-primary btn-sm\"\n    (click)=\"clickAction(row, col, index)\"\n  >\n    Click me!\n  </button>\n</ng-template>\n<ng-template #color let-row=\"row\" let-col=\"col\">\n  <div\n    [style.background]=\"row[col.key]\"\n    style=\"width: 1.5rem; height: 1.5rem; border-radius: 50%\"\n  ></div>\n</ng-template>\n<docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-10170bf38e7dc2a28616cbfea1fc809395e11fb867221ff3cc76f91c523536e289f58bad5c2d985eea4d0e94f9cfc9c26585652e9dabc71c53493779779285bb",
            "file": "projects/docs/src/app/app.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_currentPage$",
                    "defaultValue": "new BehaviorSubject(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'actions', {static: true}"
                        }
                    ]
                },
                {
                    "name": "clicked",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'color', {static: true}"
                        }
                    ]
                },
                {
                    "name": "colors",
                    "defaultValue": "['#33d60b', '#dcafff', '#3fc9ff', '#ff1600', '#5238b1', '#fff']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "data$",
                    "defaultValue": "new BehaviorSubject([\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteColor: '#26BFAF',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteColor: '#0f0',\n      favoriteFood: 'Pizza',\n    },\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<any>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "femaleFirstNames",
                    "defaultValue": "['Mary Jane', 'Kim', 'Sarah', 'Michelle', 'Ann']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "foods",
                    "defaultValue": "['Pizza', 'Pasta', 'Hamburger', 'Pancakes', 'Tacos', 'Lasagna', 'Meatloaf']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "lastNames",
                    "defaultValue": "['Andersson', 'Smith', 'Parker', 'Kent', 'Rogers', 'Lane', 'Jackson']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "loading$",
                    "defaultValue": "new BehaviorSubject(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "maleFirstNames",
                    "defaultValue": "['Peter', 'Clark', 'Ruben', 'John', 'Jack', 'Roscoe']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "next",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "paginationForm",
                    "defaultValue": "this.fb.group({\n    length: [10],\n    search: [''],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "prev",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "search$",
                    "defaultValue": "this.paginationForm.get('search')!.valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "tableConfig$",
                    "defaultValue": "new ReplaySubject(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplaySubject<TableConfig>",
                    "optional": false,
                    "description": "",
                    "line": 57
                }
            ],
            "methodsClass": [
                {
                    "name": "addData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clickAction",
                    "args": [
                        {
                            "name": "row",
                            "type": "TableRow",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "column",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TableRow",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "column",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "randomRecord",
                    "args": [],
                    "optional": false,
                    "returnType": "TableRow",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "simulateLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { UntypedFormBuilder } from '@angular/forms';\nimport { TableConfig, TableRow, TableColumn } from '@angular-generic-table/core';\nimport { withLatestFrom } from 'rxjs/operators';\nimport { Story } from '@storybook/angular/types-6-0';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppComponent implements OnInit {\n  get currentPage$(): Observable<number> {\n    return this._currentPage$.asObservable();\n  }\n\n  set currentPage(value: number) {\n    this._currentPage$.next(value);\n  }\n  constructor(private fb: UntypedFormBuilder) {}\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  @ViewChild('color', { static: true }) color: TemplateRef<any> | undefined;\n  paginationForm = this.fb.group({\n    length: [10],\n    search: [''],\n  });\n  search$ = this.paginationForm.get('search')!.valueChanges;\n  loading$ = new BehaviorSubject(true);\n  data$: BehaviorSubject<any> = new BehaviorSubject([\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteColor: '#26BFAF',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteColor: '#0f0',\n      favoriteFood: 'Pizza',\n    },\n  ]);\n\n  private _currentPage$ = new BehaviorSubject(0);\n\n  clicked: string = '';\n  maleFirstNames = ['Peter', 'Clark', 'Ruben', 'John', 'Jack', 'Roscoe'];\n  femaleFirstNames = ['Mary Jane', 'Kim', 'Sarah', 'Michelle', 'Ann'];\n  lastNames = ['Andersson', 'Smith', 'Parker', 'Kent', 'Rogers', 'Lane', 'Jackson'];\n  foods = ['Pizza', 'Pasta', 'Hamburger', 'Pancakes', 'Tacos', 'Lasagna', 'Meatloaf'];\n  colors = ['#33d60b', '#dcafff', '#3fc9ff', '#ff1600', '#5238b1', '#fff'];\n\n  tableConfig$: ReplaySubject<TableConfig> = new ReplaySubject(1);\n\n  addData(): void {\n    this.data$.next([...this.data$.getValue(), this.randomRecord()]);\n  }\n\n  removeData(): void {\n    this.data$.next([]);\n  }\n\n  simulateLoad(): void {\n    this.loading$.next(true);\n    // set loading state to false after 2 seconds\n    setTimeout(() => this.loading$.next(false), 2000);\n  }\n\n  clickAction(row: TableRow, column: { key: string; value: TableColumn }, index: number): void {\n    console.log('clicked row:', row, 'col:', column);\n    this.clicked = `clicked row number: ${index}`;\n  }\n\n  randomRecord(): TableRow {\n    const random = Math.floor(Math.random() * 2);\n    const newRecord = {\n      firstName: random\n        ? this.maleFirstNames[Math.floor(Math.random() * this.maleFirstNames.length)]\n        : this.femaleFirstNames[Math.floor(Math.random() * this.femaleFirstNames.length)],\n      lastName: this.lastNames[Math.floor(Math.random() * this.lastNames.length)],\n      gender: random ? 'male' : 'female',\n      favoriteColor: this.colors[Math.floor(Math.random() * this.colors.length)],\n      favoriteFood: this.foods[Math.floor(Math.random() * this.foods.length)],\n    };\n    console.log('added new random record:', newRecord);\n\n    return newRecord;\n  }\n\n  next = () => {\n    this.currentPage = this._currentPage$.value + 1;\n  };\n  prev = () => {\n    this.currentPage = this._currentPage$.value - 1;\n  };\n\n  ngOnInit(): void {\n    this.simulateLoad();\n    this.paginationForm\n      .get('length')\n      ?.valueChanges.pipe(withLatestFrom(this.tableConfig$))\n      .subscribe(([length, config]) => {\n        length = +length;\n        this.tableConfig$.next({\n          ...config,\n          pagination: { ...config.pagination, length },\n        });\n      });\n    this.tableConfig$.next({\n      class: 'table table-mobile text-nowrap mb-0',\n      columns: {\n        firstName: {\n          header: 'First name',\n          mobileHeader: true,\n          sortable: true,\n          order: 0,\n        },\n        lastName: {\n          header: 'Last name',\n          mobileHeader: true,\n          hidden: false,\n          sortable: true,\n        },\n        gender: {\n          header: 'Gender',\n          mobileHeader: 'Sex',\n          sortable: true,\n          order: 1,\n        },\n        favoriteColor: {\n          header: 'Favorite color',\n          mobileHeader: true,\n          templateRef: this.color,\n          sortable: false,\n          order: 2,\n          search: false,\n          class: 'custom-class',\n        },\n        favoriteFood: {\n          mobileHeader: true,\n          header: 'Favorite food',\n          hidden: false,\n          sortable: true,\n          order: 0,\n        },\n        action: {\n          mobileHeader: false,\n          header: 'Action',\n          templateRef: this.actions,\n          order: 6,\n        },\n      },\n      pagination: {\n        length: this.paginationForm.get('length')?.value || 0,\n      },\n    });\n  }\n}\n\nexport const Advanced: Story<AppComponent> = (args: AppComponent) => ({\n  props: args,\n  component: AppComponent,\n});\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "UntypedFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "UntypedFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "currentPage$": {
                    "name": "currentPage$",
                    "getSignature": {
                        "name": "currentPage$",
                        "type": "",
                        "returnType": "Observable<number>",
                        "line": 15
                    }
                },
                "currentPage": {
                    "name": "currentPage",
                    "setSignature": {
                        "name": "currentPage",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 19,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<!--<div class=\"card mt-3\">\n  <h4 class=\"card-header\">Table</h4>\n  <div class=\"card-body\">\n    <div class=\"row mb-3\">\n      <div class=\"col col-sm-auto\">\n        <button class=\"btn btn-primary w-100\" (click)=\"addData()\">Add random data</button>\n      </div>\n      <div class=\"col col-sm-auto\">\n        <button class=\"btn btn-danger w-100\" (click)=\"removeData()\">Remove data</button>\n      </div>\n      <div class=\"col col-sm-auto\">\n        <button class=\"btn btn-secondary w-100\" (click)=\"simulateLoad()\">Load</button>\n      </div>\n    </div>\n    <form [formGroup]=\"paginationForm\">\n      <div class=\"row\">\n        <div class=\"form-group col-12 col-sm-auto\">\n          <label for=\"length_input\">Length</label>\n          <input id=\"length_input\" formControlName=\"length\" type=\"number\" class=\"form-control\">\n        </div>\n        <div class=\"form-group col-12 col-sm-auto\">\n          <label for=\"search_input\">Search</label>\n          <input id=\"search_input\" formControlName=\"search\" type=\"text\" class=\"form-control\">\n        </div>\n      </div>\n    </form>\n    <div class=\"mx-n3 mx-sm-0\">\n    <angular-generic-table [data]=\"data$\" [config]=\"tableConfig$\" [page]=\"currentPage$\" [search]=\"search$\" [loading]=\"loading$\">\n      <div class=\"table-loading gt-skeleton-loader\"></div>\n      <div class=\"table-no-data alert alert-info mt-3\">\n        Table is empty\n      </div>\n    </angular-generic-table>\n    </div>\n    <div class=\"row justify-content-between justify-content-sm-center align-items-center mt-3\">\n      <div class=\"col-auto\">\n        <button class=\"btn btn-primary\" (click)=\"prev()\">Prev</button>\n      </div>\n      <div class=\"col-auto\">\n        <button class=\"btn btn-primary\" (click)=\"next()\">Next</button>\n      </div>\n      <div class=\"col-auto\">Current page: {{currentPage$ | async}}</div>\n      <div class=\"col-auto\">\n        Records: {{(data$ | async).length}}\n      </div>\n      <div class=\"col-auto\">\n        {{clicked}}\n      </div>\n    </div>\n  </div>\n</div>\n<ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n  <button class=\"btn btn-outline-primary btn-sm my-sm-n3\" (click)=\"clickAction(row, col, index)\">Click me!</button>\n</ng-template>\n<ng-template #color let-row=\"row\" let-col=\"col\">\n  <div [style.background]=\"row[col.key]\" style=\"width: 1.5rem; height: 1.5rem; border-radius: 50%\"></div>\n</ng-template>\n-->\n<div class=\"card mt-3 mx-sm-3\">\n  <h4 class=\"card-header\">Example</h4>\n  <div class=\"card-body\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n"
        },
        {
            "name": "CoreComponent",
            "id": "component-CoreComponent-133594ca43b9430b5e9b887c0c48710604c4288035fd14f53551666d0baf6d0d9c1a25053fa595151a9452976a0e8a6d4c2fa4d2282824dbdb49208b57553d32",
            "file": "projects/core/src/lib/core.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "angular-generic-table",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./core.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 114,
                    "type": "Observable | TableConfig",
                    "decorators": []
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 119,
                    "type": "Observable | Array",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 88,
                    "type": "Observable | boolean",
                    "decorators": []
                },
                {
                    "name": "paginationIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pagingInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 96,
                    "type": "GtPaginationInfo | null",
                    "decorators": []
                },
                {
                    "name": "search",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 109,
                    "type": "Observable | string | null",
                    "decorators": []
                },
                {
                    "name": "sortOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 123,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "columnSort",
                    "defaultValue": "new EventEmitter<GtSortEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 139,
                    "type": "EventEmitter"
                },
                {
                    "name": "pageChange",
                    "defaultValue": "new EventEmitter<GtPageChangeEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\npage change event - emitted when current page/index changes for pagination",
                    "description": "<p>page change event - emitted when current page/index changes for pagination</p>\n",
                    "line": 141,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowClick",
                    "defaultValue": "new EventEmitter<GtRowClickEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 130,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowHover",
                    "defaultValue": "new EventEmitter<GtRowHoverEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 138,
                    "type": "EventEmitter"
                },
                {
                    "name": "sortOrderChange",
                    "defaultValue": "new EventEmitter<GtSortOrder<TableRow>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 131,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_currentPaginationIndex$",
                    "defaultValue": "new BehaviorSubject(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 344,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_data$",
                    "defaultValue": "new ReplaySubject(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplaySubject<Array | Observable>",
                    "optional": false,
                    "description": "",
                    "line": 217,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_loading$",
                    "defaultValue": "new ReplaySubject(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplaySubject<Observable | boolean>",
                    "optional": false,
                    "description": "",
                    "line": 183,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_pagingInfo$",
                    "defaultValue": "new BehaviorSubject<GtPaginationInfo>({\n    pageCurrent: null,\n    pageNext: null,\n    pagePrevious: null,\n    pageSize: null,\n    numberOfRecords: null,\n    //recordsAfterFilter: null,\n    //recordsAfterSearch: null,\n    //recordsAll: null,\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 196,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_rowHover$",
                    "defaultValue": "new ReplaySubject<GtRowHoverEvent>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 137,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_searchBy$",
                    "defaultValue": "new ReplaySubject(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplaySubject<Observable | string | null>",
                    "optional": false,
                    "description": "",
                    "line": 187,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_sortOrder$",
                    "defaultValue": "new BehaviorSubject<GtSortOrder>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<GtSortOrder>",
                    "optional": false,
                    "description": "",
                    "line": 185,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_tableConfig$",
                    "defaultValue": "new BehaviorSubject({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<TableConfig | Observable>",
                    "optional": false,
                    "description": "",
                    "line": 208,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_tableInfo$",
                    "defaultValue": "new BehaviorSubject<TableInfo | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 342,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "calculations$",
                    "defaultValue": "combineLatest([this.data$, this.tableConfig$]).pipe(\n    map(([data, config]) => calculate(data, config)),\n    shareReplay(1)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 273
                },
                {
                    "name": "colspan$",
                    "defaultValue": "this.tableConfig$.pipe(\n    switchMap((config) =>\n      config.columns\n        ? of(\n            Object.values(config.columns || config.rows || {}).filter(\n              (value) => value.hidden !== true\n            ).length\n          )\n        : this.data$.pipe(map((data) => data.length + 1))\n    ),\n    shareReplay(1)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 366
                },
                {
                    "name": "columnOrder",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 466
                },
                {
                    "name": "currentPaginationIndex$",
                    "defaultValue": "combineLatest([\n    this._currentPaginationIndex$,\n    this.table$,\n  ]).pipe(\n    map(([page, table]: any) => {\n      // determine last page\n      const lastPage =\n        Math.ceil(\n          table.info.records /\n            (table.info.recordLength ??\n              (table.config?.pagination?.length || table.info.records))\n        ) - 1;\n      // determine min/max position\n      return +page < 0 ? 0 : +page > lastPage ? lastPage : +page;\n    }),\n    distinctUntilChanged(),\n    tap((index) => this.pageChange.emit({ index })),\n    shareReplay(1)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 346
                },
                {
                    "name": "data$",
                    "defaultValue": "this._data$.pipe(\n    map((value) => (isObservable(value) ? value : of(value))),\n    switchMap((obs) => combineLatest([obs])),\n    withLatestFrom(this.tableConfig$),\n    map(([[data], config]) => {\n      // if columns or rows contains config for mapTo...\n      if (\n        (config.columns &&\n          !!Object.values(config.columns).find((column) => !!column.mapTo)) ||\n        (config.rows &&\n          !!Object.values(config.rows).find((column) => !!column.mapTo))\n      ) {\n        // ...map data to new keys on row...\n        const newData: TableRow[] = [];\n        for (let i = 0; i < data.length; i++) {\n          const row = data[i];\n          const newKeys = Object.entries(config.columns || config.rows || [])\n            .filter(([key, value]) => !!value.mapTo) // add keys for columns with mapTo config...\n            .reduce(\n              (previousValue, [key, value]) => ({\n                ...previousValue,\n                [key]: this.nestedValue(\n                  row,\n                  value.mapTo!.path,\n                  value.mapTo?.missingValue\n                ),\n              }),\n              {}\n            );\n          newData[i] = { ...row, ...newKeys };\n        }\n        data = newData;\n      }\n      return { data, config };\n    }),\n    switchMap((obs) =>\n      combineLatest([of(obs), this.sortOrder$, this.searchBy$])\n    ),\n    map(([table, sortBy, searchBy]) => {\n      // create a new array reference and sort new array (prevent mutating existing state)\n      table.data = [...table.data];\n      return !sortBy?.length || table.config?.disableTableSort\n        ? searchBy && !this.tableInfo?.lazyLoaded\n          ? search(searchBy, false, table.data, table.config)\n          : table.data\n        : searchBy && !this.tableInfo?.lazyLoaded\n        ? search(searchBy, false, table.data, table.config)?.sort(\n            sortOnMultipleKeys(sortBy)\n          )\n        : table.data?.sort(sortOnMultipleKeys(sortBy));\n    }),\n    shareReplay(1)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Array<TableRow>>",
                    "optional": false,
                    "description": "",
                    "line": 219
                },
                {
                    "name": "footerColspan$",
                    "defaultValue": "this.tableConfig$.pipe(\n    map((config) => {\n      let colspan = 0;\n      Object.values(config?.footer?.columns || {}).forEach((calculations) => {\n        if (\n          Object.values(calculations).filter((value) => value !== false)\n            .length >= 0\n        ) {\n          colspan += 1;\n        }\n      }, {});\n      return colspan;\n    }),\n    shareReplay(1)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 379
                },
                {
                    "name": "rowHover$",
                    "defaultValue": "this._rowHover$.asObservable().pipe(\n    debounceTime(50),\n    distinctUntilChanged((p, q) => p.index === q.index),\n    tap((event) => this.rowHover.emit(event)),\n    shareReplay(1)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 142
                },
                {
                    "name": "searchBy$",
                    "defaultValue": "this._searchBy$.pipe(\n    startWith(''),\n    map((value) => (isObservable(value) ? value : of(value))),\n    switchMap((obs) => obs),\n    shareReplay(1)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | null>",
                    "optional": false,
                    "description": "",
                    "line": 189
                },
                {
                    "name": "table$",
                    "defaultValue": "combineLatest([\n    this.data$,\n    this.tableConfig$,\n    this._pagingInfo$.pipe(tap((res) => console.log(res))),\n  ]).pipe(\n    map(([sorted, config, pagingInfo]) => {\n      if (\n        pagingInfo.pageCurrent !== null &&\n        pagingInfo.numberOfRecords !== null &&\n        pagingInfo.pageSize !== null\n      ) {\n        return {\n          data: [sorted],\n          config,\n          info: <TableInfo>{\n            lazyLoaded: true,\n            numberOfRecords: pagingInfo.numberOfRecords,\n            pageSize: pagingInfo.pageSize,\n            pageTotal:\n              pagingInfo.pageTotal ??\n              Math.ceil(pagingInfo.numberOfRecords / pagingInfo.pageSize),\n          },\n        };\n      }\n      // if pagination is disabled...\n      if (!config.pagination || config.pagination.length === 0) {\n        // ...return unaltered array\n        return {\n          data: [sorted],\n          config,\n          info: <TableInfo>{ numberOfRecords: sorted.length, pageTotal: 1 },\n        };\n      }\n      // return record set\n      return {\n        data: chunk(sorted, +(config.pagination.length || 0)),\n        config,\n        info: <TableInfo>{\n          numberOfRecords: sorted.length,\n          pageTotal: Math.ceil(\n            sorted.length / +(config.pagination.length || 0)\n          ),\n        },\n      };\n    }),\n    tap((meta) => this._tableInfo$.next(meta.info)),\n    shareReplay(1)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TableMeta>",
                    "optional": false,
                    "description": "",
                    "line": 278
                },
                {
                    "name": "tableConfig$",
                    "defaultValue": "this._tableConfig$.pipe(\n    map((value) => (isObservable(value) ? value : of(value))),\n    switchMap((obs) => obs),\n    shareReplay(1)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 211
                }
            ],
            "methodsClass": [
                {
                    "name": "_hoverRow",
                    "args": [
                        {
                            "name": "row",
                            "type": "TableRow | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TableRow | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_rowClick",
                    "args": [
                        {
                            "name": "row",
                            "type": "TableRow",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TableRow",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hoverRow",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hoverRow",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hoverRow",
                    "args": [
                        {
                            "name": "none",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "none",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hoverRow",
                    "args": [
                        {
                            "name": "arg",
                            "type": "string | number | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "arg",
                            "type": "string | number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nestedValue",
                    "args": [
                        {
                            "name": "object",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mapTo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "missingValue",
                            "type": "string | number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 473,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "object",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mapTo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "missingValue",
                            "type": "string | number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortByKey",
                    "args": [
                        {
                            "name": "key",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "$event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 399,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nsortByKey - Sort by key in table row\n",
                    "description": "<p>sortByKey - Sort by key in table row</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 11485,
                                "end": 11488,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "key"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 11479,
                                "end": 11484,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>key to sort by</li>\n</ul>\n"
                        },
                        {
                            "name": {
                                "pos": 11534,
                                "end": 11540,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "$event"
                            },
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 11512,
                                "end": 11517,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>Mouse event triggering sort, if shift key is pressed sort key will be added to already present sort keys</li>\n</ul>\n",
                            "typeExpression": {
                                "pos": 11518,
                                "end": 11532,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 307,
                                "type": {
                                    "pos": 11519,
                                    "end": 11530,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 177,
                                    "typeName": {
                                        "pos": 11519,
                                        "end": 11530,
                                        "flags": 4194304,
                                        "modifierFlagsCache": 0,
                                        "transformFlags": 0,
                                        "kind": 79,
                                        "escapedText": "MouseEvent"
                                    }
                                }
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  isObservable,\n  Observable,\n  of,\n  ReplaySubject,\n} from 'rxjs';\nimport { TableConfig } from './models/table-config.interface';\nimport {\n  AsyncPipe,\n  KeyValue,\n  KeyValuePipe,\n  NgClass,\n  NgForOf,\n  NgIf,\n  NgTemplateOutlet,\n  SlicePipe,\n} from '@angular/common';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  map,\n  shareReplay,\n  startWith,\n  switchMap,\n  take,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { TableColumn } from './models/table-column.interface';\nimport {\n  calculate,\n  chunk,\n  search,\n  sortOnMultipleKeys,\n} from './utilities/utilities';\nimport { TableRow } from './models/table-row.interface';\nimport { GtOrder, GtSortOrder } from './models/table-sort.interface';\nimport { TableMeta } from './models/table-meta.interface';\nimport {\n  GtPageChangeEvent,\n  GtRowClickEvent,\n  GtRowHoverEvent,\n  GtSortEvent,\n} from './models/table-events.interface';\nimport { CapitalCasePipe } from './pipes/capital-case.pipe';\nimport { SortClassPipe } from './pipes/sort-class.pipe';\nimport { DashCasePipe } from './pipes/dash-case.pipe';\nimport { DynamicPipe } from './pipes/dynamic.pipe';\nimport { HighlightPipe } from './pipes/highlight.pipe';\nimport { GtPaginationInfo } from './models/gt-pagination';\nimport { TableInfo } from './models/table-info.interface';\n\n@Component({\n  selector: 'angular-generic-table',\n  templateUrl: './core.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [\n    CapitalCasePipe,\n    KeyValuePipe,\n    SortClassPipe,\n    DashCasePipe,\n    AsyncPipe,\n    NgTemplateOutlet,\n    SlicePipe,\n    DynamicPipe,\n    HighlightPipe,\n    NgClass,\n    NgIf,\n    NgForOf,\n  ],\n})\nexport class CoreComponent {\n  get sortOrder$(): Observable<GtSortOrder> {\n    return this._sortOrder$.asObservable();\n  }\n\n  @Input() set loading(isLoading: Observable<boolean> | boolean) {\n    this._loading$.next(isLoading);\n  }\n  @Input()\n  set paginationIndex(pageIndex: number) {\n    this._currentPaginationIndex$.next(pageIndex);\n  }\n\n  @Input() set pagingInfo(value: GtPaginationInfo | null) {\n    if (value) {\n      this._pagingInfo$.next(value);\n      if (\n        value.pageCurrent !== this._currentPaginationIndex$.getValue() + 1 &&\n        value.pageCurrent !== null\n      ) {\n        this.paginationIndex = value.pageCurrent - 1;\n      }\n    }\n  }\n\n  @Input()\n  set search(string: Observable<string | null> | string | null) {\n    this._searchBy$.next(string);\n  }\n\n  @Input()\n  set config(config: Observable<TableConfig<any>> | TableConfig<any>) {\n    this._tableConfig$.next(config);\n  }\n\n  @Input()\n  set data(data: Observable<Array<TableRow>> | Array<TableRow>) {\n    this._data$.next(data);\n  }\n\n  @Input() set sortOrder(sortConfig: any) {\n    if (JSON.stringify(sortConfig) !== JSON.stringify(this._sortOrder$.value)) {\n      this.sortOrderChange.emit(sortConfig);\n      this._sortOrder$.next(sortConfig);\n    }\n  }\n\n  @Output() rowClick = new EventEmitter<GtRowClickEvent>();\n  @Output() sortOrderChange = new EventEmitter<GtSortOrder<TableRow>>();\n\n  _rowClick(row: TableRow, index: number, event: MouseEvent): void {\n    this.rowClick.emit({ row, index, event });\n  }\n\n  private _rowHover$ = new ReplaySubject<GtRowHoverEvent>(1);\n  @Output() rowHover = new EventEmitter<GtRowHoverEvent>();\n  @Output() columnSort = new EventEmitter<GtSortEvent>();\n  /** page change event - emitted when current page/index changes for pagination */\n  @Output() pageChange = new EventEmitter<GtPageChangeEvent>();\n  rowHover$ = this._rowHover$.asObservable().pipe(\n    debounceTime(50),\n    distinctUntilChanged((p, q) => p.index === q.index),\n    tap((event) => this.rowHover.emit(event)),\n    shareReplay(1)\n  );\n\n  hoverRow(id: string): void;\n  hoverRow(index: number): void;\n  hoverRow(none: null): void;\n  hoverRow(arg: string | number | null): void {\n    if (typeof arg === 'number') {\n      this.data$\n        .pipe(\n          map((data) => data[arg]),\n          take(1)\n        )\n        .subscribe((row) => this._hoverRow(row, arg));\n    } else if (typeof arg === 'string') {\n      // TODO: implement hover by id\n    } else {\n      this._hoverRow(null, null);\n    }\n  }\n  _hoverRow(\n    row: TableRow | null,\n    index: number | null,\n    event?: MouseEvent\n  ): void {\n    this._rowHover$.next({ row, index, event });\n  }\n\n  get loading$(): Observable<boolean> {\n    return this._loading$.pipe(\n      startWith(false),\n      map((value) => (isObservable(value) ? value : of(value))),\n      switchMap((obs) => obs),\n      shareReplay(1)\n    );\n  }\n\n  private _loading$: ReplaySubject<Observable<boolean> | boolean> =\n    new ReplaySubject(1);\n  private _sortOrder$: BehaviorSubject<GtSortOrder> =\n    new BehaviorSubject<GtSortOrder>([]);\n  private _searchBy$: ReplaySubject<Observable<string | null> | string | null> =\n    new ReplaySubject(1);\n  searchBy$: Observable<string | null> = this._searchBy$.pipe(\n    startWith(''),\n    map((value) => (isObservable(value) ? value : of(value))),\n    switchMap((obs) => obs),\n    shareReplay(1)\n  );\n\n  private _pagingInfo$ = new BehaviorSubject<GtPaginationInfo>({\n    pageCurrent: null,\n    pageNext: null,\n    pagePrevious: null,\n    pageSize: null,\n    numberOfRecords: null,\n    //recordsAfterFilter: null,\n    //recordsAfterSearch: null,\n    //recordsAll: null,\n  });\n\n  // tslint:disable-next-line:variable-name\n  private _tableConfig$: BehaviorSubject<\n    TableConfig<any> | Observable<TableConfig<any>>\n  > = new BehaviorSubject({});\n  tableConfig$ = this._tableConfig$.pipe(\n    map((value) => (isObservable(value) ? value : of(value))),\n    switchMap((obs) => obs),\n    shareReplay(1)\n  );\n\n  private _data$: ReplaySubject<Array<TableRow> | Observable<Array<TableRow>>> =\n    new ReplaySubject(1);\n  data$: Observable<Array<TableRow>> = this._data$.pipe(\n    map((value) => (isObservable(value) ? value : of(value))),\n    switchMap((obs) => combineLatest([obs])),\n    withLatestFrom(this.tableConfig$),\n    map(([[data], config]) => {\n      // if columns or rows contains config for mapTo...\n      if (\n        (config.columns &&\n          !!Object.values(config.columns).find((column) => !!column.mapTo)) ||\n        (config.rows &&\n          !!Object.values(config.rows).find((column) => !!column.mapTo))\n      ) {\n        // ...map data to new keys on row...\n        const newData: TableRow[] = [];\n        for (let i = 0; i < data.length; i++) {\n          const row = data[i];\n          const newKeys = Object.entries(config.columns || config.rows || [])\n            .filter(([key, value]) => !!value.mapTo) // add keys for columns with mapTo config...\n            .reduce(\n              (previousValue, [key, value]) => ({\n                ...previousValue,\n                [key]: this.nestedValue(\n                  row,\n                  value.mapTo!.path,\n                  value.mapTo?.missingValue\n                ),\n              }),\n              {}\n            );\n          newData[i] = { ...row, ...newKeys };\n        }\n        data = newData;\n      }\n      return { data, config };\n    }),\n    switchMap((obs) =>\n      combineLatest([of(obs), this.sortOrder$, this.searchBy$])\n    ),\n    map(([table, sortBy, searchBy]) => {\n      // create a new array reference and sort new array (prevent mutating existing state)\n      table.data = [...table.data];\n      return !sortBy?.length || table.config?.disableTableSort\n        ? searchBy && !this.tableInfo?.lazyLoaded\n          ? search(searchBy, false, table.data, table.config)\n          : table.data\n        : searchBy && !this.tableInfo?.lazyLoaded\n        ? search(searchBy, false, table.data, table.config)?.sort(\n            sortOnMultipleKeys(sortBy)\n          )\n        : table.data?.sort(sortOnMultipleKeys(sortBy));\n    }),\n    shareReplay(1)\n  );\n\n  calculations$ = combineLatest([this.data$, this.tableConfig$]).pipe(\n    map(([data, config]) => calculate(data, config)),\n    shareReplay(1)\n  );\n\n  table$: Observable<TableMeta> = combineLatest([\n    this.data$,\n    this.tableConfig$,\n    this._pagingInfo$.pipe(tap((res) => console.log(res))),\n  ]).pipe(\n    map(([sorted, config, pagingInfo]) => {\n      if (\n        pagingInfo.pageCurrent !== null &&\n        pagingInfo.numberOfRecords !== null &&\n        pagingInfo.pageSize !== null\n      ) {\n        return {\n          data: [sorted],\n          config,\n          info: <TableInfo>{\n            lazyLoaded: true,\n            numberOfRecords: pagingInfo.numberOfRecords,\n            pageSize: pagingInfo.pageSize,\n            pageTotal:\n              pagingInfo.pageTotal ??\n              Math.ceil(pagingInfo.numberOfRecords / pagingInfo.pageSize),\n          },\n        };\n      }\n      // if pagination is disabled...\n      if (!config.pagination || config.pagination.length === 0) {\n        // ...return unaltered array\n        return {\n          data: [sorted],\n          config,\n          info: <TableInfo>{ numberOfRecords: sorted.length, pageTotal: 1 },\n        };\n      }\n      // return record set\n      return {\n        data: chunk(sorted, +(config.pagination.length || 0)),\n        config,\n        info: <TableInfo>{\n          numberOfRecords: sorted.length,\n          pageTotal: Math.ceil(\n            sorted.length / +(config.pagination.length || 0)\n          ),\n        },\n      };\n    }),\n    tap((meta) => this._tableInfo$.next(meta.info)),\n    shareReplay(1)\n  );\n\n  /** tableInfo$ - returns observable for table info\n   * @return Observable<TableInfo> */\n  get tableInfo$(): Observable<TableInfo | undefined> {\n    return this._tableInfo$.asObservable().pipe(\n      filter((info) => !!info),\n      shareReplay(1)\n    );\n  }\n\n  /** tableInfo - returns the current table info\n   * @return TableInfo */\n  get tableInfo(): TableInfo | undefined {\n    return this._tableInfo$.getValue();\n  }\n\n  private _tableInfo$ = new BehaviorSubject<TableInfo | undefined>(undefined);\n\n  private _currentPaginationIndex$: BehaviorSubject<number> =\n    new BehaviorSubject(0);\n  currentPaginationIndex$ = combineLatest([\n    this._currentPaginationIndex$,\n    this.table$,\n  ]).pipe(\n    map(([page, table]: any) => {\n      // determine last page\n      const lastPage =\n        Math.ceil(\n          table.info.records /\n            (table.info.recordLength ??\n              (table.config?.pagination?.length || table.info.records))\n        ) - 1;\n      // determine min/max position\n      return +page < 0 ? 0 : +page > lastPage ? lastPage : +page;\n    }),\n    distinctUntilChanged(),\n    tap((index) => this.pageChange.emit({ index })),\n    shareReplay(1)\n  );\n\n  colspan$ = this.tableConfig$.pipe(\n    switchMap((config) =>\n      config.columns\n        ? of(\n            Object.values(config.columns || config.rows || {}).filter(\n              (value) => value.hidden !== true\n            ).length\n          )\n        : this.data$.pipe(map((data) => data.length + 1))\n    ),\n    shareReplay(1)\n  );\n\n  footerColspan$ = this.tableConfig$.pipe(\n    map((config) => {\n      let colspan = 0;\n      Object.values(config?.footer?.columns || {}).forEach((calculations) => {\n        if (\n          Object.values(calculations).filter((value) => value !== false)\n            .length >= 0\n        ) {\n          colspan += 1;\n        }\n      }, {});\n      return colspan;\n    }),\n    shareReplay(1)\n  );\n\n  /** sortByKey - Sort by key in table row\n   * @param key - key to sort by\n   * @param { MouseEvent } [$event] - Mouse event triggering sort, if shift key is pressed sort key will be added to already present sort keys\n   */\n  sortByKey(key: keyof TableRow, $event?: MouseEvent): void {\n    const shiftKey = $event?.shiftKey === true;\n    const currentOrder = this._sortOrder$.value;\n    let sortOrder: GtOrder = 'asc';\n    let newOrder: GtSortOrder = [];\n    // if shift key is pressed while sorting...\n    if (shiftKey) {\n      // ...check if key is already sorted\n      const existingSortPosition = currentOrder.findIndex(\n        (value) => value.key === key\n      );\n      if (existingSortPosition === -1) {\n        // ...if key is not sorted, add it to the end of the sort order\n        newOrder = [...currentOrder, { key, order: 'asc' }];\n      } else {\n        // ...if key is already sorted, toggle sort order\n        sortOrder = currentOrder[existingSortPosition].order;\n        const newSortOrder = sortOrder === 'asc' ? 'desc' : 'asc';\n        newOrder = [...currentOrder];\n        newOrder[existingSortPosition] = {\n          ...newOrder[existingSortPosition],\n          order: newSortOrder,\n        };\n      }\n    } else {\n      // ...else if shift key is not pressed...\n      if (currentOrder.length > 0) {\n        // ...check if key is already sorted\n        const existingSortPosition = currentOrder.findIndex(\n          (value) => value.key === key\n        );\n        // ...if key is already sorted, toggle sort order\n        if (existingSortPosition === -1) {\n          newOrder = [{ key, order: 'asc' }];\n        } else {\n          sortOrder = currentOrder[existingSortPosition].order;\n          const newSortOrder = sortOrder === 'asc' ? 'desc' : 'asc';\n          newOrder = [{ key, order: newSortOrder }];\n        }\n      } else {\n        // ...if key is not sorted set sort order for key to ascending\n        newOrder = [{ key, order: sortOrder }];\n      }\n    }\n    // create sort event\n    const sortEvent: GtSortEvent = {\n      key,\n      order: sortOrder,\n      currentSortOrder: newOrder,\n      addSortKey: shiftKey,\n    };\n\n    // if event is passed to sort function...\n    if ($event) {\n      // ...emit it as well\n      sortEvent.event = $event;\n    }\n    // emit sort event\n    this.columnSort.emit(sortEvent);\n\n    // if table is not lazy loaded (sorting is then handled server-side)...\n    if (!this.tableInfo?.lazyLoaded) {\n      // ...update sort order\n      this.sortOrder = newOrder;\n    }\n  }\n\n  columnOrder = (\n    a: KeyValue<string, TableColumn>,\n    b: KeyValue<string, TableColumn>\n  ): number => {\n    return (a.value.order || 0) - (b.value.order || 0);\n  };\n\n  nestedValue(\n    object: any,\n    mapTo: string,\n    missingValue: string | number | null = null\n  ): unknown {\n    const levels = mapTo.split('.');\n    return levels.reduce(\n      (previousValue, currentValue, index) =>\n        previousValue[currentValue] ||\n        (index === levels.length - 1 ? missingValue : {}),\n      object\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "sortOrder$": {
                    "name": "sortOrder$",
                    "getSignature": {
                        "name": "sortOrder$",
                        "type": "",
                        "returnType": "Observable<GtSortOrder>",
                        "line": 84
                    }
                },
                "loading": {
                    "name": "loading",
                    "setSignature": {
                        "name": "loading",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "isLoading",
                                "type": "Observable<boolean> | boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 88,
                        "jsdoctags": [
                            {
                                "name": "isLoading",
                                "type": "Observable<boolean> | boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "paginationIndex": {
                    "name": "paginationIndex",
                    "setSignature": {
                        "name": "paginationIndex",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "pageIndex",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 92,
                        "jsdoctags": [
                            {
                                "name": "pageIndex",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "pagingInfo": {
                    "name": "pagingInfo",
                    "setSignature": {
                        "name": "pagingInfo",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "GtPaginationInfo | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 96,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "GtPaginationInfo | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "search": {
                    "name": "search",
                    "setSignature": {
                        "name": "search",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "string",
                                "type": "Observable<string | null> | string | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 109,
                        "jsdoctags": [
                            {
                                "name": "string",
                                "type": "Observable<string | null> | string | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "config": {
                    "name": "config",
                    "setSignature": {
                        "name": "config",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "config",
                                "type": "Observable<TableConfig<any>> | TableConfig<any>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 114,
                        "jsdoctags": [
                            {
                                "name": "config",
                                "type": "Observable<TableConfig<any>> | TableConfig<any>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "data": {
                    "name": "data",
                    "setSignature": {
                        "name": "data",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "data",
                                "type": "Observable<Array<TableRow>> | Array<TableRow>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 119,
                        "jsdoctags": [
                            {
                                "name": "data",
                                "type": "Observable<Array<TableRow>> | Array<TableRow>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "sortOrder": {
                    "name": "sortOrder",
                    "setSignature": {
                        "name": "sortOrder",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "sortConfig",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 123,
                        "jsdoctags": [
                            {
                                "name": "sortConfig",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "loading$": {
                    "name": "loading$",
                    "getSignature": {
                        "name": "loading$",
                        "type": "",
                        "returnType": "Observable<boolean>",
                        "line": 174
                    }
                },
                "tableInfo$": {
                    "name": "tableInfo$",
                    "getSignature": {
                        "name": "tableInfo$",
                        "type": "",
                        "returnType": "Observable<TableInfo | undefined>",
                        "line": 329,
                        "rawdescription": "\ntableInfo$ - returns observable for table info",
                        "description": "<p>tableInfo$ - returns observable for table info</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 9576,
                                "end": 9606,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 339,
                                "tagName": {
                                    "pos": 9577,
                                    "end": 9583,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "originalKeywordKind": 105,
                                    "escapedText": "return"
                                },
                                "comment": "<p>Observable<TableInfo></p>\n"
                            }
                        ]
                    }
                },
                "tableInfo": {
                    "name": "tableInfo",
                    "getSignature": {
                        "name": "tableInfo",
                        "type": "",
                        "returnType": "TableInfo | undefined",
                        "line": 338,
                        "rawdescription": "\ntableInfo - returns the current table info",
                        "description": "<p>tableInfo - returns the current table info</p>\n",
                        "jsdoctags": [
                            {
                                "pos": 9833,
                                "end": 9851,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 339,
                                "tagName": {
                                    "pos": 9834,
                                    "end": 9840,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "originalKeywordKind": 105,
                                    "escapedText": "return"
                                },
                                "comment": "<p>TableInfo</p>\n"
                            }
                        ]
                    }
                }
            },
            "templateData": "<table\n  [ngClass]=\"(tableConfig$ | async)?.class || 'table'\"\n  [class.table-mobile]=\"(tableConfig$ | async)?.mobileLayout\"\n  [class.table-horizontal]=\"(tableConfig$ | async)?.rows\"\n  [class.table-loading]=\"loading$ | async\"\n  [class.gt-sticky-row-header]=\"\n    (tableConfig$ | async)?.stickyHeaders?.row && (tableConfig$ | async)?.rows\n  \"\n  [class.gt-sticky-column-header]=\"\n    (tableConfig$ | async)?.stickyHeaders?.column\n  \"\n  [attr.aria-busy]=\"(loading$ | async) === true ? true : null\"\n>\n  <thead>\n    <tr\n      *ngIf=\"{\n        config: (tableConfig$ | async)!,\n        isLoading: loading$ | async\n      } as table\"\n    >\n      <ng-container\n        *ngFor=\"let column of table.config?.columns | keyvalue: columnOrder\"\n      >\n        <th\n          *ngIf=\"!column.value?.hidden\"\n          ngClass=\"{{ (column.key | dashCase) + '-column' }} {{\n            column.value.class\n          }}\"\n          [class.disabled]=\"table.isLoading\"\n          [attr.aria-sort]=\"sortOrder$ | async | sortClass: column.key:'aria'\"\n          [class.gt-sortable]=\"true\"\n          scope=\"col\"\n        >\n          <button\n            *ngIf=\"column.value?.sortable\"\n            [attr.data-sort-order]=\"\n              sortOrder$ | async | sortClass: column.key:'order'\n            \"\n            class=\"gt-sort\"\n            (click)=\"\n              table.isLoading ||\n                !column.value.sortable ||\n                sortByKey(column.key, $event)\n            \"\n          >\n            <span *ngIf=\"column.value?.header !== false\">{{\n              column.value.header || column.key | capitalCase\n            }}</span>\n          </button>\n          <span\n            *ngIf=\"!column.value?.sortable && column.value?.header !== false\"\n            >{{ column.value.header || column.key | capitalCase }}</span\n          >\n        </th>\n      </ng-container>\n      <ng-container\n        *ngIf=\"\n          ((table?.config?.rows | keyvalue: columnOrder) || [])[0] as headerRow\n        \"\n      >\n        <th\n          class=\"row-header\"\n          [attr.aria-sort]=\"\n            sortOrder$ | async | sortClass: headerRow.key:'aria'\n          \"\n          ngClass=\"{{ headerRow.value.sortable ? 'sort ' : '' }} {{\n            sortOrder$ | async | sortClass: headerRow.key\n          }} {{ (headerRow.key | dashCase) + '-column' }}\"\n          (click)=\"\n            table.isLoading ||\n              !headerRow.value.sortable ||\n              sortByKey(headerRow.key, $event)\n          \"\n          scope=\"col\"\n        >\n          <ng-container *ngIf=\"headerRow?.value?.header !== false\">{{\n            headerRow?.value?.header || headerRow.key | capitalCase\n          }}</ng-container>\n        </th>\n        <th\n          *ngFor=\"let column of ((table$ | async)?.data || [])[0]\"\n          ngClass=\"{{ headerRow.value.class }}\"\n        >\n          <ng-container\n            [ngTemplateOutlet]=\"\n              (table.config.rows || {})[headerRow.key].templateRef\n                ? templateRef\n                : (table.config.rows || {})[headerRow.key].transform\n                ? transformData\n                : rawData\n            \"\n            [ngTemplateOutletContext]=\"{\n              row: column,\n              column: headerRow,\n              transform: (table.config.rows || {})[headerRow.key].transform,\n              templateRef: (table.config.rows || {})[headerRow.key].templateRef,\n              index: 0\n            }\"\n          >\n          </ng-container>\n        </th>\n      </ng-container>\n    </tr>\n  </thead>\n  <tbody *ngIf=\"loading$ | async; else tableContent\">\n    <tr>\n      <td class=\"p-0\" [colSpan]=\"colspan$ | async\">\n        <ng-content select=\".table-loading\"></ng-content>\n      </td>\n    </tr>\n  </tbody>\n  <tfoot *ngIf=\"(table$ | async)! as table\">\n    <ng-container *ngIf=\"table.data.length > 0 && !(loading$ | async)\">\n      <ng-container *ngIf=\"(calculations$ | async)! as calculations\">\n        <tr\n          *ngFor=\"let calculation of calculations.calculations; let i = index\"\n        >\n          <ng-container\n            *ngIf=\"{\n              showHeader: (colspan$ | async) !== (footerColspan$ | async)\n            } as footerRow\"\n          >\n            <th\n              *ngIf=\"footerRow.showHeader\"\n              [colSpan]=\"\n                ((colspan$ | async) || 0) - ((footerColspan$ | async) || 0)\n              \"\n              scope=\"row\"\n            >\n              <ng-container\n                *ngIf=\"table.config?.footer?.headers?.[calculation] as showHeader\"\n                >{{showHeader === true ? (calculation | capitalCase): table.config.footer?.headers?.[calculation]}}\n              </ng-container>\n            </th>\n            <ng-container\n              *ngFor=\"\n                let column of table.config?.columns | keyvalue: columnOrder\n              \"\n            >\n              <td\n                *ngIf=\"\n                  !column.value?.hidden && calculations.calculated[column.key]\n                \"\n                ngClass=\"{{ (column.key | dashCase) + '-column' }} {{\n                  column.value.class\n                }}\"\n                [attr.data-header]=\"\n                  !footerRow.showHeader && table.config.footer?.headers?.[calculation]\n                    ? table.config.footer?.headers?.[calculation] === true ? (calculation | capitalCase) : table.config.footer?.headers?.[calculation]\n                    : null\n                \"\n                [attr.data-label]=\"\n                  table.config.mobileLayout && column.value.mobileHeader\n                    ? column.value.mobileHeader !== true\n                      ? column.value.mobileHeader\n                      : (column.value.header || column.key | capitalCase)\n                    : null\n                \"\n                [class.gt-no-content]=\"\n                  !calculations.calculated[column.key][calculation]\n                \"\n              >\n                <ng-container\n                  [ngTemplateOutlet]=\"\n                    (table.config.columns || {})[column.key].templateRef\n                      ? templateRef\n                      : (table.config.columns || {})[column.key].transform\n                      ? transformFooter\n                      : rawFooter\n                  \"\n                  [ngTemplateOutletContext]=\"{\n                    value: calculations.calculated[column.key][calculation],\n                    row: calculations.calculated[column.key],\n                    column: calculation,\n                    templateRef: (table.config.columns || {})[column.key]\n                      .templateRef,\n                    transform: (table.config.columns || {})[column.key]\n                      .transform\n                  }\"\n                ></ng-container>\n              </td>\n            </ng-container>\n          </ng-container>\n        </tr>\n      </ng-container>\n    </ng-container>\n  </tfoot>\n</table>\n<ng-template #tableContent>\n  <ng-container *ngIf=\"(table$ | async)! as table\">\n    <tbody *ngIf=\"(table!.data![0] || table!.data!).length > 0; else noData\">\n      <ng-container *ngIf=\"table.config.columns\">\n        <tr\n          *ngFor=\"\n            let row of table!.data![\n              table.info.lazyLoaded ? 0 : (currentPaginationIndex$ | async) || 0\n            ];\n            let i = index\n          \"\n          [attr.id]=\"'tableRow_' + i\"\n          (click)=\"table?.config?.rowClick && _rowClick(row, i, $event)\"\n          (mouseover)=\"table?.config?.rowHover && _hoverRow(row, i, $event)\"\n          (mouseout)=\"table?.config?.rowHover && _hoverRow(null, null, $event)\"\n          [class.gt-hover]=\"(rowHover$ | async)?.index === i\"\n        >\n          <ng-container\n            *ngFor=\"let column of table.config?.columns | keyvalue: columnOrder\"\n          >\n            <td\n              *ngIf=\"!column.value?.hidden\"\n              ngClass=\"{{ (column.key | dashCase) + '-column' }} {{\n                column.value.class\n              }}\"\n              [attr.data-label]=\"\n                table.config.mobileLayout && column.value.mobileHeader\n                  ? column.value.mobileHeader !== true\n                    ? column.value.mobileHeader\n                    : (column.value.header || column.key | capitalCase)\n                  : null\n              \"\n            >\n              <ng-container\n                [ngTemplateOutlet]=\"\n                  (searchBy$ | async) &&\n                  !(table.config.columns || {})[column.key].templateRef\n                    ? highlighted\n                    : (table.config.columns || {})[column.key].templateRef\n                    ? templateRef\n                    : (table.config.columns || {})[column.key].transform\n                    ? transformData\n                    : rawData\n                \"\n                [ngTemplateOutletContext]=\"{\n                  row: row,\n                  column: column,\n                  search: (searchBy$ | async),\n                  transform: (table.config.columns || {})[column.key].transform,\n                  templateRef: (table.config.columns || {})[column.key]\n                    .templateRef,\n                  index: i,\n                  data: table.data[\n                    table.info.lazyLoaded\n                      ? 0\n                      : (currentPaginationIndex$ | async) || 0\n                  ]\n                }\"\n              ></ng-container>\n            </td>\n          </ng-container>\n        </tr>\n      </ng-container>\n      <ng-container *ngIf=\"table.config.rows\">\n        <ng-container\n          *ngFor=\"\n            let row of table?.config?.rows | keyvalue: columnOrder | slice: 1;\n            let i = index\n          \"\n        >\n          <tr\n            *ngIf=\"!row.value?.hidden\"\n            [attr.id]=\"'tableRow_' + i\"\n            ngClass=\"{{ (row.key | dashCase) + '-row' }}\"\n            (click)=\"table?.config?.rowClick && _rowClick(row, i, $event)\"\n            (mouseover)=\"table?.config?.rowHover && _hoverRow(row, i, $event)\"\n            (mouseout)=\"\n              table?.config?.rowHover && _hoverRow(null, null, $event)\n            \"\n            [class.gt-hover]=\"(rowHover$ | async)?.index === i\"\n          >\n            <th class=\"row-header\" scope=\"row\">\n              {{ row.value.header || row.key | capitalCase }}\n            </th>\n            <td\n              *ngFor=\"let column of (table?.data || [])[0]; let y = index\"\n              ngClass=\"{{ row.value.class }}\"\n            >\n              <ng-container\n                [ngTemplateOutlet]=\"\n                  (table.config.rows || {})[row.key].templateRef\n                    ? templateRef\n                    : (table.config.rows || {})[row.key].transform\n                    ? transformData\n                    : rawData\n                \"\n                [ngTemplateOutletContext]=\"{\n                  row: column,\n                  column: row,\n                  transform: (table.config.rows || {})[row.key].transform,\n                  templateRef: (table.config.rows || {})[row.key].templateRef,\n                  index: table.config.rows ? y : i,\n                  data: table.data[\n                    table.info.lazyLoaded\n                      ? 0\n                      : (currentPaginationIndex$ | async) || 0\n                  ]\n                }\"\n              >\n              </ng-container>\n            </td>\n          </tr>\n        </ng-container>\n      </ng-container>\n    </tbody>\n  </ng-container>\n</ng-template>\n<ng-template #noData>\n  <tbody>\n    <tr>\n      <td class=\"p-0\" [colSpan]=\"colspan$ | async\">\n        <ng-content select=\".table-no-data\"></ng-content>\n      </td>\n    </tr>\n  </tbody>\n</ng-template>\n<ng-template\n  #highlighted\n  let-row=\"row\"\n  let-column=\"column\"\n  let-search=\"search\"\n  let-transform=\"transform\"\n>\n  <div\n    *ngIf=\"!transform\"\n    [innerHTML]=\"row[column.key] | highlight: search\"\n  ></div>\n  <div\n    *ngIf=\"transform\"\n    [innerHTML]=\"\n      row[column.key]\n        | dynamicPipe: transform.pipe:transform?.args\n        | highlight: search\n    \"\n  ></div>\n</ng-template>\n<ng-template #rawData let-row=\"row\" let-column=\"column\">\n  {{ row[column.key] }}\n</ng-template>\n<ng-template\n  #transformData\n  let-row=\"row\"\n  let-column=\"column\"\n  let-transform=\"transform\"\n  let-data=\"data\"\n>\n  {{ row[column.key] | dynamicPipe: transform.pipe:transform?.args }}\n</ng-template>\n<ng-template #transformFooter let-value=\"value\" let-transform=\"transform\">\n  {{\n    (value | dynamicPipe: transform.pipe:transform?.args) ||\n      (tableConfig$ | async)?.footer?.emptyContent\n  }}\n</ng-template>\n<ng-template #rawFooter let-value=\"value\">\n  {{ value || (tableConfig$ | async)?.footer?.emptyContent }}\n</ng-template>\n<ng-template\n  #templateRef\n  let-row=\"row\"\n  let-column=\"column\"\n  let-index=\"index\"\n  let-templateRef=\"templateRef\"\n  let-data=\"data\"\n>\n  <ng-container\n    [ngTemplateOutlet]=\"templateRef\"\n    [ngTemplateOutletContext]=\"{\n      row: row,\n      col: column,\n      index: index,\n      data: data\n    }\"\n  ></ng-container>\n</ng-template>\n"
        },
        {
            "name": "CustomTemplatesComponent",
            "id": "component-CustomTemplatesComponent-6cecf532b8a2e4c2eaf23ea4201513aedce4fd037994d2ffc381a761e281dfc1b925f4a7d1c7439b0d14f4d6ea855e4ddb4d7152151bee330f72ba15f3c570b3",
            "file": "projects/docs/src/app/examples/custom-templates/custom-templates.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-custom-templates",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"overflow-auto\">\n  <angular-generic-table\n    [data]=\"data\"\n    [config]=\"config$\"\n  ></angular-generic-table>\n</div>\n<ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n  <button\n    class=\"btn btn-outline-primary btn-sm my-sm-n3 text-nowrap\"\n    (click)=\"clickAction(row, col, index)\"\n  >\n    Click me!\n  </button>\n</ng-template>\n<ng-template #color let-row=\"row\" let-col=\"col\">\n  <div\n    [style.background]=\"row[col.key]\"\n    style=\"width: 1.5rem; height: 1.5rem; border-radius: 50%\"\n  ></div>\n</ng-template>\n{{ clicked }}\n<docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'actions', {static: true}"
                        }
                    ]
                },
                {
                    "name": "clicked",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'color', {static: true}"
                        }
                    ]
                },
                {
                    "name": "config$",
                    "defaultValue": "new ReplaySubject(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplaySubject<TableConfig>",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "data",
                    "defaultValue": "[\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteColor: '#26BFAF',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteColor: '#0f0',\n      favoriteFood: 'Pizza',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "SNIPPETS",
                    "defaultValue": "CUSTOM_TEMPLATES_DOCS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "methodsClass": [
                {
                    "name": "clickAction",
                    "args": [
                        {
                            "name": "row",
                            "type": "TableRow",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "column",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TableRow",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "column",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { Story } from '@storybook/angular/types-6-0';\nimport {\n  TableConfig,\n  TableRow,\n  TableColumn,\n} from '@angular-generic-table/core';\nimport { ReplaySubject } from 'rxjs';\nimport { CUSTOM_TEMPLATES_DOCS } from './custom-templates.snippets';\n\n@Component({\n  selector: 'docs-custom-templates',\n  template: `\n    <div class=\"overflow-auto\">\n      <angular-generic-table\n        [data]=\"data\"\n        [config]=\"config$\"\n      ></angular-generic-table>\n    </div>\n    <ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n      <button\n        class=\"btn btn-outline-primary btn-sm my-sm-n3 text-nowrap\"\n        (click)=\"clickAction(row, col, index)\"\n      >\n        Click me!\n      </button>\n    </ng-template>\n    <ng-template #color let-row=\"row\" let-col=\"col\">\n      <div\n        [style.background]=\"row[col.key]\"\n        style=\"width: 1.5rem; height: 1.5rem; border-radius: 50%\"\n      ></div>\n    </ng-template>\n    {{ clicked }}\n    <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n  `,\n})\nexport class CustomTemplatesComponent implements OnInit {\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  @ViewChild('color', { static: true }) color: TemplateRef<any> | undefined;\n  clicked = '';\n\n  data = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteColor: '#26BFAF',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteColor: '#0f0',\n      favoriteFood: 'Pizza',\n    },\n  ];\n  config$: ReplaySubject<TableConfig> = new ReplaySubject(1);\n\n  SNIPPETS = CUSTOM_TEMPLATES_DOCS;\n  ngOnInit(): void {\n    this.config$.next({\n      columns: {\n        firstName: {},\n        lastName: {},\n        gender: {},\n        favoriteColor: {\n          templateRef: this.color,\n        },\n        favoriteFood: {},\n        action: {\n          templateRef: this.actions,\n        },\n      },\n    });\n  }\n  clickAction(\n    row: TableRow,\n    column: { key: string; value: TableColumn },\n    index: number\n  ): void {\n    console.log('clicked row:', row, 'col:', column);\n    this.clicked = `clicked row number: ${index}`;\n  }\n}\n\nexport const CustomTemplates: Story<CustomTemplatesComponent> = (\n  args: CustomTemplatesComponent\n) => ({\n  props: args,\n  component: CustomTemplatesComponent,\n});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-279416f7fd88af719e98be071e896b679843031ad1befb1ea2fa6c30b81737e612c86b23d592062a444ee77c2b9919b5b94409e96ab92e90ac09b0d6ef4e1e92",
            "file": "projects/docs/src/app/examples/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-footer",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"overflow-auto\">\n  <angular-generic-table [data]=\"data\" [config]=\"config\">\n  </angular-generic-table>\n</div>\n<docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n<ng-template #heightTmplRef let-row=\"row\" let-col=\"col\">\n  <ng-container *ngIf=\"row[col.key || col] as height\"\n    >{{ height }} m\n  </ng-container>\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableConfig",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "data",
                    "defaultValue": "[\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n      age: 27,\n      weight: 85.457,\n      height: 1.85,\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n      age: 25,\n      weight: 60.123,\n      height: 1.65,\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "heightTmplRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'heightTmplRef', {static: true}"
                        }
                    ]
                },
                {
                    "name": "SNIPPETS",
                    "defaultValue": "SIMPLE_SNIPPETS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 155
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { Story } from '@storybook/angular/types-6-0';\nimport { SIMPLE_SNIPPETS } from './simple.snippets';\nimport { TableConfig, TableRow } from '@angular-generic-table/core';\nimport { DecimalPipe } from '@angular/common';\n\n@Component({\n  selector: 'docs-footer',\n  template: `\n    <div class=\"overflow-auto\">\n      <angular-generic-table [data]=\"data\" [config]=\"config\">\n      </angular-generic-table>\n    </div>\n    <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n    <ng-template #heightTmplRef let-row=\"row\" let-col=\"col\">\n      <ng-container *ngIf=\"row[col.key || col] as height\"\n        >{{ height }} m\n      </ng-container>\n    </ng-template>\n  `,\n})\nexport class FooterComponent implements OnInit {\n  @ViewChild('heightTmplRef', { static: true }) heightTmplRef:\n    | TemplateRef<any>\n    | undefined;\n  data = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n      age: 27,\n      weight: 85.457,\n      height: 1.85,\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n      age: 25,\n      weight: 60.123,\n      height: 1.65,\n    },\n  ];\n  config: TableConfig = {};\n\n  ngOnInit() {\n    this.config = {\n      mobileLayout: true,\n      columns: {\n        firstName: {\n          mobileHeader: true,\n        },\n        lastName: {\n          mobileHeader: true,\n        },\n        gender: {\n          mobileHeader: true,\n        },\n        favoriteFood: {\n          mobileHeader: true,\n          class: 'text-end flex-end',\n        },\n        age: {\n          mobileHeader: true,\n          class: 'text-end',\n        },\n        weight: {\n          mobileHeader: true,\n          class: 'text-end',\n          transform: {\n            pipe: DecimalPipe,\n            args: ['1.0-2'],\n          },\n        },\n        height: {\n          mobileHeader: true,\n          class: 'text-end',\n          templateRef: this.heightTmplRef,\n        },\n      },\n      footer: {\n        headers: {\n          sum: 'Total',\n          numberOfWomen: 'Number of women',\n          numberOfMen: 'Number of men',\n          min: true,\n          max: true,\n          avg: true,\n          count: true,\n          static: true,\n          first: true,\n        },\n        rowOrder: [\n          'first',\n          'numberOfWomen',\n          'numberOfMen',\n          'min',\n          'max',\n          'sum',\n          'avg',\n          'count',\n        ],\n        columns: {\n          firstName: {},\n          lastName: {\n            static: 'n/a',\n          },\n          gender: {\n            numberOfWomen: (data: Array<TableRow>, key) => {\n              let count = 0;\n              for (let i = 0; i < data.length; i++) {\n                if (data[i][key] === 'female') {\n                  count++;\n                }\n              }\n              return count;\n            },\n            numberOfMen: (data: Array<TableRow>, key) => {\n              let count = 0;\n              for (let i = 0; i < data.length; i++) {\n                if (data[i][key] === 'male') {\n                  count++;\n                }\n              }\n              return count;\n            },\n          },\n          favoriteFood: {\n            first: (data: Array<TableRow>, key) => data[0][key],\n          },\n          age: {\n            sum: true,\n            avg: true,\n            count: true,\n            max: true,\n            min: true,\n          },\n          weight: {\n            sum: true,\n            avg: true,\n            min: true,\n          },\n          height: {\n            avg: true,\n            min: true,\n            max: true,\n          },\n        },\n      },\n    };\n  }\n\n  SNIPPETS = SIMPLE_SNIPPETS;\n}\n\nexport const Footer: Story<FooterComponent> = (args: FooterComponent) => ({\n  props: args,\n  component: FooterComponent,\n});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "GtDeltaComponent",
            "id": "component-GtDeltaComponent-d8eaa54ebedc2786bbacacc9d40879c45252ff3cfeba6048488dcc628854c5f69f0ffd5a78d21d33b244eb515886c66a7b92a11a818dd7b7cf160b4dc6fce7a6",
            "file": "projects/core/src/lib/gt-delta/gt-delta.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "gt-delta",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: inline-block;\n      }\n    "
            ],
            "template": "<span      *ngIf=\"value as delta\"\n      [class]=\"[\n        classes.span,\n        delta.absolute > 0\n          ? classes.positive\n          : delta.absolute < 0\n          ? classes.negative\n          : null\n      ]\"\n      [class.gt-delta-positive]=\"delta.absolute > 0\"\n      [class.gt-delta-negative]=\"delta.absolute < 0\"\n      ><ng-container\n        *ngTemplateOutlet=\"deltaTemplate || defaultTemplate; context: { delta }\"\n      ></ng-container>\n    </span>\n    <ng-template #defaultTemplate let-delta=\"delta\">\n      <span *ngIf=\"delta.relative\">{{\n        delta.relative | percent: '1.0-2'\n      }}</span>\n    </ng-template>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "baseIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "classes",
                    "defaultValue": "{\n    span: 'gt-delta',\n    positive: 'text-success',\n    negative: 'text-danger',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "{ span: string; positive: string; negative: string; }",
                    "decorators": []
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "Array<TableRow>",
                    "decorators": []
                },
                {
                    "name": "deltaTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "index",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "initialValue",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "string | number | null",
                    "decorators": []
                },
                {
                    "name": "key",
                    "defaultValue": "'value'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "notApplicableValue",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "string | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_deltaTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GtDelta",
                    "optional": true,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "Math",
                    "defaultValue": "Math",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "Number",
                    "defaultValue": "Number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  TemplateRef,\n} from '@angular/core';\nimport { TableRow } from '../models/table-row.interface';\nimport { NgIf, NgTemplateOutlet, PercentPipe } from '@angular/common';\n\nexport interface GtDelta {\n  relative: number | string;\n  absolute: number;\n}\n@Component({\n  selector: 'gt-delta',\n  template: `<span\n      *ngIf=\"value as delta\"\n      [class]=\"[\n        classes.span,\n        delta.absolute > 0\n          ? classes.positive\n          : delta.absolute < 0\n          ? classes.negative\n          : null\n      ]\"\n      [class.gt-delta-positive]=\"delta.absolute > 0\"\n      [class.gt-delta-negative]=\"delta.absolute < 0\"\n      ><ng-container\n        *ngTemplateOutlet=\"deltaTemplate || defaultTemplate; context: { delta }\"\n      ></ng-container>\n    </span>\n    <ng-template #defaultTemplate let-delta=\"delta\">\n      <span *ngIf=\"delta.relative\">{{\n        delta.relative | percent: '1.0-2'\n      }}</span>\n    </ng-template>`,\n  styles: [\n    `\n      :host {\n        display: inline-block;\n      }\n    `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [PercentPipe, NgIf, NgTemplateOutlet],\n})\nexport class GtDeltaComponent implements OnChanges {\n  get value() {\n    return this._value;\n  }\n\n  set value(value) {\n    this._value = value;\n  }\n  get deltaTemplate(): TemplateRef<any> {\n    return this._deltaTemplate;\n  }\n  constructor() {}\n  @Input() set deltaTemplate(deltaTemplate: TemplateRef<any>) {\n    this._deltaTemplate = deltaTemplate;\n  }\n  Math = Math;\n  Number = Number;\n  @Input() data: Array<TableRow> = [];\n  @Input() index: number = 0;\n  @Input() baseIndex?: number;\n  @Input() classes = {\n    span: 'gt-delta',\n    positive: 'text-success',\n    negative: 'text-danger',\n  };\n  @Input() key: string = 'value';\n  @Input() notApplicableValue: string | null = null;\n  @Input() initialValue: string | number | null = null;\n  private _value?: GtDelta;\n  private _deltaTemplate?: any;\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!changes.data.currentValue) {\n      return;\n    }\n    const data = changes.data?.currentValue;\n    const index = changes.index?.currentValue || this.index;\n    const baseIndex = changes.baseIndex?.currentValue;\n    const key = changes.key?.currentValue || this.key;\n    const initialValue =\n      changes.initialValue?.currentValue || this.initialValue;\n\n    const deltaValue =\n      index === 0\n        ? initialValue\n        : data[index][key] -\n          (baseIndex === undefined\n            ? data[index - 1][key]\n            : data[baseIndex][key]);\n    const baseValue =\n      index === 0\n        ? 1\n        : baseIndex === undefined\n        ? data[index - 1][key]\n        : data[baseIndex][key];\n\n    const relative =\n      index === 0\n        ? initialValue\n        : Math.sign(deltaValue) * Math.abs(deltaValue / baseValue);\n\n    this.value = {\n      relative: Number.isFinite(relative)\n        ? relative\n        : index === 0\n        ? initialValue\n        : changes.notApplicableValue?.currentValue || this.notApplicableValue,\n      absolute: deltaValue,\n    };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: inline-block;\n      }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 60
            },
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 55,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 51
                    }
                },
                "deltaTemplate": {
                    "name": "deltaTemplate",
                    "setSignature": {
                        "name": "deltaTemplate",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "deltaTemplate",
                                "type": "TemplateRef<any>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 62,
                        "jsdoctags": [
                            {
                                "name": "deltaTemplate",
                                "type": "TemplateRef<any>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "deltaTemplate",
                        "type": "",
                        "returnType": "TemplateRef<any>",
                        "line": 58
                    }
                }
            }
        },
        {
            "name": "HorizontalTableComponent",
            "id": "component-HorizontalTableComponent-60f5c580588de332c24651656ba6a0778ea28e728a0ea8ebf1a6e6d0cbae3fb3c52a03d8cf305be7481aa6c12c9cb657e6ccf4a10b2593d1f84ed922b434823c",
            "file": "projects/docs/src/app/examples/horizontal-table/horizontal-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-horizontal-table",
            "styleUrls": [],
            "styles": [],
            "template": "<button class=\"btn btn-outline-primary\" (click)=\"simulateLoad()\">\n  Simulate load\n</button>\n<button class=\"btn btn-outline-danger mx-3\" (click)=\"empty()\">Empty</button>\n<button class=\"btn btn-outline-primary\" (click)=\"load()\">Reset</button>\n<div class=\"overflow-auto\">\n  <angular-generic-table\n    [data]=\"data\"\n    [config]=\"config\"\n    [loading]=\"loading$\"\n  >\n    <div class=\"table-loading gt-skeleton-loader\"></div>\n    <div class=\"table-no-data alert alert-info mt-3\">Table is empty</div>\n  </angular-generic-table>\n</div>\n<ng-template #feelings let-row=\"row\" let-col=\"col\">\n  <div [ngSwitch]=\"row[col.key]\">\n    <ng-container *ngSwitchCase=\"'thrilled'\">😀</ng-container>\n    <ng-container *ngSwitchCase=\"'positive'\">🙂</ng-container>\n    <ng-container *ngSwitchCase=\"'neutral'\">😐</ng-container>\n    <ng-container *ngSwitchCase=\"'negative'\">😭</ng-container>\n  </div>\n</ng-template>\n<ng-template #delta let-data=\"data\" let-index=\"index\">\n  <gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>\n</ng-template>\n<ng-template #deltaIndex let-data=\"data\" let-index=\"index\">\n  <gt-delta [index]=\"index\" [baseIndex]=\"0\" [data]=\"data\"></gt-delta>\n</ng-template>\n<docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableConfig",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "delta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<GtDeltaComponent> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'delta', {static: true}"
                        }
                    ]
                },
                {
                    "name": "deltaIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<GtDeltaComponent> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'deltaIndex', {static: true}"
                        }
                    ]
                },
                {
                    "name": "feelings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'feelings', {static: true}"
                        }
                    ]
                },
                {
                    "name": "loading$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "SNIPPETS",
                    "defaultValue": "HORIZONTAL_TABLE_SNIPPETS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 127
                }
            ],
            "methodsClass": [
                {
                    "name": "empty",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "load",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "simulateLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { Story } from '@storybook/angular/types-6-0';\nimport { HORIZONTAL_TABLE_SNIPPETS } from './horizontal-table.snippets';\nimport { GtDeltaComponent, TableConfig } from '@angular-generic-table/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Component({\n  selector: 'docs-horizontal-table',\n  template: `\n    <button class=\"btn btn-outline-primary\" (click)=\"simulateLoad()\">\n      Simulate load\n    </button>\n    <button class=\"btn btn-outline-danger mx-3\" (click)=\"empty()\">Empty</button>\n    <button class=\"btn btn-outline-primary\" (click)=\"load()\">Reset</button>\n    <div class=\"overflow-auto\">\n      <angular-generic-table\n        [data]=\"data\"\n        [config]=\"config\"\n        [loading]=\"loading$\"\n      >\n        <div class=\"table-loading gt-skeleton-loader\"></div>\n        <div class=\"table-no-data alert alert-info mt-3\">Table is empty</div>\n      </angular-generic-table>\n    </div>\n    <ng-template #feelings let-row=\"row\" let-col=\"col\">\n      <div [ngSwitch]=\"row[col.key]\">\n        <ng-container *ngSwitchCase=\"'thrilled'\">😀</ng-container>\n        <ng-container *ngSwitchCase=\"'positive'\">🙂</ng-container>\n        <ng-container *ngSwitchCase=\"'neutral'\">😐</ng-container>\n        <ng-container *ngSwitchCase=\"'negative'\">😭</ng-container>\n      </div>\n    </ng-template>\n    <ng-template #delta let-data=\"data\" let-index=\"index\">\n      <gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>\n    </ng-template>\n    <ng-template #deltaIndex let-data=\"data\" let-index=\"index\">\n      <gt-delta [index]=\"index\" [baseIndex]=\"0\" [data]=\"data\"></gt-delta>\n    </ng-template>\n    <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n  `,\n  styles: [],\n})\nexport class HorizontalTableComponent implements OnInit {\n  @ViewChild('feelings', { static: true }) feelings:\n    | TemplateRef<any>\n    | undefined;\n  @ViewChild('delta', { static: true }) delta:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  @ViewChild('deltaIndex', { static: true }) deltaIndex:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  loading$ = new BehaviorSubject(false);\n  config: TableConfig = {};\n  data: any = [];\n\n  ngOnInit(): void {\n    this.config = {\n      stickyHeaders: {\n        row: true,\n      },\n      mobileLayout: true,\n      rows: {\n        year: {\n          class: 'text-end',\n          header: false,\n        },\n        value: {\n          class: 'text-end',\n        },\n        delta: {\n          header: 'Delta %',\n          templateRef: this.delta,\n          class: 'text-end',\n        },\n        deltaIndex: {\n          header: 'Since inception %',\n          templateRef: this.deltaIndex,\n          class: 'text-end',\n        },\n        feeling: {\n          templateRef: this.feelings,\n          class: 'text-end',\n        },\n      },\n    };\n    this.load();\n  }\n  simulateLoad(): void {\n    this.loading$.next(true);\n    // set loading state to false after 2 seconds\n    setTimeout(() => this.loading$.next(false), 2000);\n  }\n  empty(): void {\n    this.data = [];\n  }\n  load(): void {\n    this.data = [\n      {\n        year: '2017',\n        value: 50,\n        feeling: 'neutral',\n      },\n      {\n        year: '2018',\n        value: 75,\n        feeling: 'positive',\n      },\n      {\n        year: '2019',\n        value: 100,\n        feeling: 'thrilled',\n      },\n      {\n        year: '2020',\n        value: 250,\n        feeling: 'thrilled',\n      },\n      {\n        year: '2021',\n        value: 50,\n        feeling: 'negative',\n      },\n    ];\n  }\n\n  SNIPPETS = HORIZONTAL_TABLE_SNIPPETS;\n}\n\nexport const Horizontal: Story<HorizontalTableComponent> = (\n  args: HorizontalTableComponent\n) => ({\n  props: args,\n  component: HorizontalTableComponent,\n});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "MobileLayoutComponent",
            "id": "component-MobileLayoutComponent-2ccdf200e7b7f3afa39e0e6fdca8c7ea0f53af37d1eb3722378cbcaba073ec2e8a214f10e4485e4464b0ea63b3d083009815564424e37fbd8206a83200f4ed92",
            "file": "projects/docs/src/app/examples/mobile-layout/mobile-layout.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-mobile-layout",
            "styleUrls": [],
            "styles": [
                "\n      .table th {\n        white-space: nowrap;\n      }\n    "
            ],
            "template": "<div class=\"d-flex justify-content-end mb-1 align-items-center\">\n  {{ clicked }}\n  <button class=\"btn btn-link d-sm-none \" (click)=\"toggleLayout()\">\n    {{ (mobileLayout$ | async) ? 'Desktop ' : 'Mobile ' }} layout\n  </button>\n</div>\n<div [class.overflow-auto]=\"(mobileLayout$ | async) === false\">\n  <angular-generic-table\n    [data]=\"data\"\n    [config]=\"config$\"\n  ></angular-generic-table>\n</div>\n<ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n  <button\n    class=\"btn btn-outline-primary btn-sm my-sm-n3 text-nowrap\"\n    (click)=\"clickAction(row, col, index)\"\n  >\n    Click me!\n  </button>\n</ng-template>\n<docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'actions', {static: true}"
                        }
                    ]
                },
                {
                    "name": "clicked",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "config$",
                    "defaultValue": "this.mobileLayout$.pipe(\n    map((mobileLayout) => ({\n      mobileLayout,\n      columns: {\n        firstName: {\n          mobileHeader: true,\n          sortable: true,\n        },\n        lastName: {\n          mobileHeader: true,\n          sortable: true,\n        },\n        gender: {\n          mobileHeader: true,\n          transform: {\n            pipe: GenderPipe,\n          },\n        },\n        favoriteFood: {\n          mobileHeader: true,\n        },\n        action: {\n          mobileHeader: false,\n          header: false,\n          templateRef: this.actions,\n        },\n      },\n    }))\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TableConfig>",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "data",
                    "defaultValue": "[\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "mobileLayout$",
                    "defaultValue": "new BehaviorSubject(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "SNIPPETS",
                    "defaultValue": "MOBILE_LAYOUT_SNIPPETS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "toggleLayout",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 113
                }
            ],
            "methodsClass": [
                {
                    "name": "clickAction",
                    "args": [
                        {
                            "name": "row",
                            "type": "TableRow",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "column",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TableRow",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "column",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Pipe,\n  PipeTransform,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { Story } from '@storybook/angular/types-6-0';\nimport {\n  TableColumn,\n  TableConfig,\n  TableRow,\n} from '@angular-generic-table/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { MOBILE_LAYOUT_SNIPPETS } from './mobileLayout.snippets';\n\n@Pipe({\n  name: 'genderPipe',\n})\nexport class GenderPipe implements PipeTransform {\n  transform(gender: 'male' | 'female'): string {\n    return gender === 'male' ? '👨' : '👩';\n  }\n}\n\n@Component({\n  selector: 'docs-mobile-layout',\n  template: `\n    <div class=\"d-flex justify-content-end mb-1 align-items-center\">\n      {{ clicked }}\n      <button class=\"btn btn-link d-sm-none \" (click)=\"toggleLayout()\">\n        {{ (mobileLayout$ | async) ? 'Desktop ' : 'Mobile ' }} layout\n      </button>\n    </div>\n    <div [class.overflow-auto]=\"(mobileLayout$ | async) === false\">\n      <angular-generic-table\n        [data]=\"data\"\n        [config]=\"config$\"\n      ></angular-generic-table>\n    </div>\n    <ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n      <button\n        class=\"btn btn-outline-primary btn-sm my-sm-n3 text-nowrap\"\n        (click)=\"clickAction(row, col, index)\"\n      >\n        Click me!\n      </button>\n    </ng-template>\n    <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n  `,\n  styles: [\n    `\n      .table th {\n        white-space: nowrap;\n      }\n    `,\n  ],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MobileLayoutComponent {\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  clicked = '';\n\n  mobileLayout$ = new BehaviorSubject(true);\n  data = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n    },\n  ];\n  config$: Observable<TableConfig> = this.mobileLayout$.pipe(\n    map((mobileLayout) => ({\n      mobileLayout,\n      columns: {\n        firstName: {\n          mobileHeader: true,\n          sortable: true,\n        },\n        lastName: {\n          mobileHeader: true,\n          sortable: true,\n        },\n        gender: {\n          mobileHeader: true,\n          transform: {\n            pipe: GenderPipe,\n          },\n        },\n        favoriteFood: {\n          mobileHeader: true,\n        },\n        action: {\n          mobileHeader: false,\n          header: false,\n          templateRef: this.actions,\n        },\n      },\n    }))\n  );\n\n  SNIPPETS = MOBILE_LAYOUT_SNIPPETS;\n\n  toggleLayout = (): void => {\n    this.mobileLayout$.next(!this.mobileLayout$.getValue());\n  };\n  clickAction(\n    row: TableRow,\n    column: { key: string; value: TableColumn },\n    index: number\n  ): void {\n    console.log('clicked row:', row, 'col:', column);\n    this.clicked = `Clicked row number: ${index}`;\n  }\n}\n\nexport const Mobile: Story<MobileLayoutComponent> = (\n  args: MobileLayoutComponent\n) => ({\n  props: args,\n  component: MobileLayoutComponent,\n});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .table th {\n        white-space: nowrap;\n      }\n    \n"
        },
        {
            "name": "NestedDataComponent",
            "id": "component-NestedDataComponent-04a1d485521dad8971455ab5319b9f61d0a1d60bd1e65141e5361e4e4c86e61215cc9827e2cc5f02aafd2b325c567aafdc84afe04ea907618fd71567987b3421",
            "file": "projects/docs/src/app/examples/nested-data/nested-data.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "nested-data",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"row gy-3\">\n  <div class=\"col col-sm-auto\">\n    <button class=\"btn btn-outline-primary mb-3\" (click)=\"loadData()\">\n      Load other data\n    </button>\n  </div>\n  <div class=\"col col-sm-auto\">\n    <button class=\"btn btn-outline-primary mb-3\" (click)=\"resetData()\">\n      Reset\n    </button>\n  </div>\n</div>\n<div class=\"overflow-auto\">\n  <angular-generic-table\n    [data]=\"data\"\n    [config]=\"config\"\n  ></angular-generic-table>\n</div>\n<docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n<ng-template #gender let-row=\"row\" let-col=\"col\">\n  <div [ngSwitch]=\"row[col.key]\">\n    <ng-container *ngSwitchCase=\"'male'\">♂️</ng-container>\n    <ng-container *ngSwitchCase=\"'female'\">♀️</ng-container>\n  </div>\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableConfig<Data>",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<NestedData>",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'gender', {static: true}"
                        }
                    ]
                },
                {
                    "name": "SNIPPETS",
                    "defaultValue": "NESTED_SNIPPETS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 153
                }
            ],
            "methodsClass": [
                {
                    "name": "loadData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NESTED_SNIPPETS } from './nested.snippets';\nimport { Story } from '@storybook/angular/types-6-0';\nimport { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { TableConfig } from '@angular-generic-table/core';\ninterface NestedData {\n  name: {\n    first: string;\n    last: string;\n  };\n  data: {\n    details?: {\n      gender: 'male' | 'female';\n      favoriteFood: 'Pasta' | 'Pizza';\n    };\n  };\n}\n\ninterface Data {\n  firstName: string;\n  lastName: string;\n  gender: 'male' | 'female';\n  favoriteFood: 'Pasta' | 'Pizza';\n  missing: string;\n}\n@Component({\n  selector: 'nested-data',\n  template: `\n    <div class=\"row gy-3\">\n      <div class=\"col col-sm-auto\">\n        <button class=\"btn btn-outline-primary mb-3\" (click)=\"loadData()\">\n          Load other data\n        </button>\n      </div>\n      <div class=\"col col-sm-auto\">\n        <button class=\"btn btn-outline-primary mb-3\" (click)=\"resetData()\">\n          Reset\n        </button>\n      </div>\n    </div>\n    <div class=\"overflow-auto\">\n      <angular-generic-table\n        [data]=\"data\"\n        [config]=\"config\"\n      ></angular-generic-table>\n    </div>\n    <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n    <ng-template #gender let-row=\"row\" let-col=\"col\">\n      <div [ngSwitch]=\"row[col.key]\">\n        <ng-container *ngSwitchCase=\"'male'\">♂️</ng-container>\n        <ng-container *ngSwitchCase=\"'female'\">♀️</ng-container>\n      </div>\n    </ng-template>\n  `,\n  styles: [],\n})\nexport class NestedDataComponent implements OnInit {\n  @ViewChild('gender', { static: true }) gender: TemplateRef<any> | undefined;\n\n  config: TableConfig<Data> = {};\n  data: Array<NestedData> = [];\n  ngOnInit(): void {\n    this.resetData();\n    this.config = {\n      columns: {\n        firstName: {\n          sortable: true,\n          mapTo: { path: 'name.first' },\n        },\n        lastName: {\n          sortable: true,\n          mapTo: { path: 'name.last' },\n        },\n        gender: {\n          mapTo: { path: 'data.details.gender' },\n          templateRef: this.gender,\n        },\n        favoriteFood: {\n          sortable: true,\n          mapTo: { path: 'data.details.favoriteFood', missingValue: 'n/a' },\n        },\n        missing: {\n          mapTo: { path: 'data.missingKey.noMatch', missingValue: 'n/a' },\n        },\n      },\n    };\n  }\n\n  resetData() {\n    this.data = [\n      {\n        name: {\n          first: 'Peter',\n          last: 'Parker',\n        },\n        data: {\n          details: {\n            gender: 'male',\n            favoriteFood: 'Pasta',\n          },\n        },\n      },\n      {\n        name: {\n          first: 'Mary Jane',\n          last: 'Watson',\n        },\n        data: {\n          details: {\n            gender: 'female',\n            favoriteFood: 'Pizza',\n          },\n        },\n      },\n    ];\n  }\n\n  loadData(): void {\n    this.data = [\n      {\n        name: {\n          first: 'John',\n          last: 'Doe',\n        },\n        data: {\n          details: {\n            gender: 'male',\n            favoriteFood: 'Pasta',\n          },\n        },\n      },\n      {\n        name: {\n          first: 'Jane',\n          last: 'Doe',\n        },\n        data: {\n          details: {\n            gender: 'female',\n            favoriteFood: 'Pizza',\n          },\n        },\n      },\n      {\n        name: {\n          first: 'Foo',\n          last: 'Bar',\n        },\n        data: {},\n      },\n    ];\n  }\n\n  SNIPPETS = NESTED_SNIPPETS;\n}\n\nexport const Nested: Story<NestedDataComponent> = (\n  args: NestedDataComponent\n) => ({\n  props: args,\n  component: NestedDataComponent,\n});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PaginationComponent",
            "id": "component-PaginationComponent-5262b8292406289e9e0333027c11b22bd6a7d428ad89362bd9198308602f3bab85d6da2d365101ea9d84a9e8552d8a644e52de81d7c8094829accf4ce2914443",
            "file": "projects/core/src/lib/pagination/pagination.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "angular-generic-table-pagination",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./pagination.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "GtPaginationAriaLabels",
                    "decorators": []
                },
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "GtPaginationClasses",
                    "decorators": []
                },
                {
                    "name": "paginationLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pagingInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "GtPaginationInfo",
                    "decorators": []
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "CoreComponent",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_ariaLabels",
                    "defaultValue": "{\n    nav: 'Table pagination',\n    button: 'Go to page ',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GtPaginationAriaLabels",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_classes",
                    "defaultValue": "{\n    ul: 'pagination',\n    li: 'page-item',\n    button: 'page-link',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GtPaginationClasses",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_paginationLength",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_pagingInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GtPaginationInfo | undefined",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CoreComponent | undefined",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_table$",
                    "defaultValue": "new ReplaySubject(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplaySubject<CoreComponent>",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "paginationListItems$",
                    "defaultValue": "this._table$.pipe(\n    switchMap((core) =>\n      combineLatest([\n        core?.table$.pipe(pluck('info')),\n        core?.currentPaginationIndex$,\n      ])\n    ),\n    map(([info, currentPage]) =>\n      this._generateList(info.pageTotal, currentPage)\n    ),\n    shareReplay(1)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>paginationListItems$ - observable for page numbers to show based on number of pages and current position</p>\n",
                    "line": 79,
                    "rawdescription": "\npaginationListItems$ - observable for page numbers to show based on number of pages and current position"
                }
            ],
            "methodsClass": [
                {
                    "name": "_generateList",
                    "args": [
                        {
                            "name": "numberOfPages",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<number>",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\ngenerate list - generate an array with page numbers to show based on number of pages and current position\n",
                    "description": "<p>generate list - generate an array with page numbers to show based on number of pages and current position</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2716,
                                "end": 2729,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "numberOfPages"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2710,
                                "end": 2715,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>number of pages to show</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2766,
                                "end": 2781,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "currentPosition"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2760,
                                "end": 2765,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>current position (page index) being shown in table</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2839,
                                "end": 2846,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Array<number> array of page numbers to show</p>\n"
                        }
                    ]
                },
                {
                    "name": "goToPage",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\ngo to page\n",
                    "description": "<p>go to page</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4157,
                                "end": 4162,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4151,
                                "end": 4156,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>page index to go to</li>\n</ul>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { combineLatest, Observable, ReplaySubject } from 'rxjs';\nimport { map, pluck, shareReplay, switchMap } from 'rxjs/operators';\nimport { CoreComponent } from '../core.component';\nimport {\n  GtPaginationAriaLabels,\n  GtPaginationClasses,\n  GtPaginationInfo,\n} from '../models/gt-pagination';\nimport { AsyncPipe, CommonModule, NgForOf, NgIf } from '@angular/common';\n\n@Component({\n  selector: 'angular-generic-table-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  standalone: true,\n  imports: [AsyncPipe, NgIf, NgForOf, CommonModule],\n})\nexport class PaginationComponent {\n  get pagingInfo(): GtPaginationInfo {\n    return (\n      this._pagingInfo || {\n        pageNext: null,\n        pageCurrent: null,\n        pagePrevious: null,\n        pageSize: null,\n        numberOfRecords: null,\n        pageTotal: null,\n      }\n    );\n  }\n  @Input() set pagingInfo(value: GtPaginationInfo) {\n    this._pagingInfo = value;\n  }\n  get paginationLength(): number {\n    return this._paginationLength;\n  }\n\n  @Input() set paginationLength(value: number) {\n    this._paginationLength = +value;\n  }\n  get classes(): GtPaginationClasses {\n    return this._classes;\n  }\n\n  @Input() set classes(value: GtPaginationClasses) {\n    this._classes = value;\n  }\n  get ariaLabels(): GtPaginationAriaLabels {\n    return this._ariaLabels;\n  }\n\n  @Input() set ariaLabels(value: GtPaginationAriaLabels) {\n    this._ariaLabels = value;\n  }\n  get table(): CoreComponent {\n    return <CoreComponent>this._table;\n  }\n  @Input() set table(value: CoreComponent) {\n    this._table = value;\n    this._table$.next(value);\n  }\n\n  private _pagingInfo: GtPaginationInfo | undefined;\n  private _table$: ReplaySubject<CoreComponent> = new ReplaySubject(1);\n  private _table: CoreComponent | undefined;\n  private _ariaLabels: GtPaginationAriaLabels = {\n    nav: 'Table pagination',\n    button: 'Go to page ',\n  };\n  private _classes: GtPaginationClasses = {\n    ul: 'pagination',\n    li: 'page-item',\n    button: 'page-link',\n  };\n  private _paginationLength: number = 5;\n\n  /** paginationListItems$ - observable for page numbers to show based on number of pages and current position  */\n  paginationListItems$ = this._table$.pipe(\n    switchMap((core) =>\n      combineLatest([\n        core?.table$.pipe(pluck('info')),\n        core?.currentPaginationIndex$,\n      ])\n    ),\n    map(([info, currentPage]) =>\n      this._generateList(info.pageTotal, currentPage)\n    ),\n    shareReplay(1)\n  );\n\n  /** generate list - generate an array with page numbers to show based on number of pages and current position\n   * @param numberOfPages number of pages to show\n   * @param currentPosition current position (page index) being shown in table\n   * @returns Array<number> array of page numbers to show\n   */\n  private _generateList(\n    numberOfPages: number,\n    currentPosition: number\n  ): Array<number> {\n    const middle = Math.floor(this.paginationLength / 2);\n    const length =\n      numberOfPages < this.paginationLength\n        ? numberOfPages\n        : this.paginationLength;\n\n    return Array.from({ length }, (_, i) => {\n      if (i === 0) {\n        return 1;\n      } else if (numberOfPages < this.paginationLength) {\n        return i + 1;\n      } else if (i + 1 === length) {\n        return numberOfPages;\n      } else if (\n        currentPosition > middle &&\n        currentPosition < numberOfPages - middle\n      ) {\n        return i + currentPosition - (middle - 1);\n      } else if (\n        currentPosition > middle &&\n        currentPosition < numberOfPages - (middle - 1)\n      ) {\n        return i + currentPosition - middle;\n      } else if (\n        currentPosition > middle &&\n        currentPosition === numberOfPages - (middle - 1)\n      ) {\n        return i + currentPosition - (middle + 1);\n      } else if (\n        currentPosition > middle &&\n        currentPosition === numberOfPages - 1\n      ) {\n        return i + currentPosition - (middle + 2);\n      } else {\n        return i + 1;\n      }\n    });\n  }\n\n  /** go to page\n   * @param index - page index to go to\n   */\n  goToPage(index: number): void {\n    if (this.table) {\n      this.table.paginationIndex = index - 1;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "pagingInfo": {
                    "name": "pagingInfo",
                    "setSignature": {
                        "name": "pagingInfo",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "GtPaginationInfo",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 32,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "GtPaginationInfo",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "pagingInfo",
                        "type": "",
                        "returnType": "GtPaginationInfo",
                        "line": 20
                    }
                },
                "paginationLength": {
                    "name": "paginationLength",
                    "setSignature": {
                        "name": "paginationLength",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 39,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "paginationLength",
                        "type": "number",
                        "returnType": "number",
                        "line": 35
                    }
                },
                "classes": {
                    "name": "classes",
                    "setSignature": {
                        "name": "classes",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "GtPaginationClasses",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 46,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "GtPaginationClasses",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "classes",
                        "type": "",
                        "returnType": "GtPaginationClasses",
                        "line": 42
                    }
                },
                "ariaLabels": {
                    "name": "ariaLabels",
                    "setSignature": {
                        "name": "ariaLabels",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "GtPaginationAriaLabels",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 53,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "GtPaginationAriaLabels",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "ariaLabels",
                        "type": "",
                        "returnType": "GtPaginationAriaLabels",
                        "line": 49
                    }
                },
                "table": {
                    "name": "table",
                    "setSignature": {
                        "name": "table",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "CoreComponent",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 59,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "CoreComponent",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "table",
                        "type": "",
                        "returnType": "CoreComponent",
                        "line": 56
                    }
                }
            },
            "templateData": "<ng-container\n  *ngIf=\"{\n    links: paginationListItems$ | async,\n    currentPosition: table?.currentPaginationIndex$ | async\n  } as pagination\"\n>\n  <nav\n    *ngIf=\"pagination.links && pagination.links.length > 1\"\n    role=\"navigation\"\n    [attr.aria-label]=\"ariaLabels.nav\"\n    class=\"gt-pagination\"\n    [class]=\"classes.nav\"\n  >\n    <ul [class]=\"classes.ul\">\n      <ng-container\n        *ngFor=\"\n          let position of pagination!.links;\n          let i = index;\n          let last = last\n        \"\n      >\n        <li\n          [class]=\"classes.li\"\n          [class.active]=\"position === (pagination!.currentPosition || 0) + 1\"\n        >\n          <button\n            [class]=\"classes.button\"\n            [attr.aria-label]=\"ariaLabels.button + position\"\n            (click)=\"goToPage(position)\"\n          >\n            {{ position }}\n          </button>\n        </li>\n        <li\n          [class]=\"classes.li\"\n          class=\"gt-ellipsis\"\n          *ngIf=\"position + 1 !== pagination!.links![i + 1] && !last\"\n        >\n          <button [class]=\"classes.button\" disabled tabindex=\"-1\"></button>\n        </li>\n      </ng-container>\n    </ul>\n  </nav>\n</ng-container>\n"
        },
        {
            "name": "PaginationComponent",
            "id": "component-PaginationComponent-4e6e8e4d5250575d577b279ad5d214c85c8eaf92b8a54835f9917a7b8965dd6cb098c13a624394f0d651c0a53d664c04fa3c1a526c4b017fcd736d432b2f4c2c-1",
            "file": "projects/docs/src/app/examples/pagination/pagination.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-pagination",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./pagination.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'actions', {static: true}"
                        }
                    ]
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'color', {static: true}"
                        }
                    ]
                },
                {
                    "name": "data$",
                    "defaultValue": "this.http\n    .get('https://private-730c61-generictable.apiary-mock.com/data')\n    .pipe(\n      pluck('data'),\n      tap((_) => this.loading$.next(false))\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "loading$",
                    "defaultValue": "new BehaviorSubject(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "paginationForm",
                    "defaultValue": "this.fb.group({\n    length: [10],\n    search: [''],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "search$",
                    "defaultValue": "this.paginationForm.get('search')\n    ?.valueChanges as Observable<string>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "SNIPPETS",
                    "defaultValue": "ADVANCED_DOCS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "tableConfig$",
                    "defaultValue": "new ReplaySubject(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplaySubject<TableConfig>",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { UntypedFormBuilder } from '@angular/forms';\nimport { TableConfig } from '@angular-generic-table/core';\nimport { pluck, tap, withLatestFrom } from 'rxjs/operators';\nimport { Story } from '@storybook/angular/types-6-0';\nimport { ADVANCED_DOCS } from './pagination.snippets';\nimport { HttpClient } from '@angular/common/http';\nimport { DatePipe, formatDate } from '@angular/common';\n\n@Component({\n  selector: 'docs-pagination',\n  templateUrl: './pagination.component.html',\n  styles: [],\n})\nexport class PaginationComponent implements OnInit {\n  constructor(private fb: UntypedFormBuilder, private http: HttpClient) {}\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  @ViewChild('color', { static: true }) color: TemplateRef<any> | undefined;\n  paginationForm = this.fb.group({\n    length: [10],\n    search: [''],\n  });\n  search$ = this.paginationForm.get('search')\n    ?.valueChanges as Observable<string>;\n  loading$ = new BehaviorSubject(true);\n  data$: Observable<any> = this.http\n    .get('https://private-730c61-generictable.apiary-mock.com/data')\n    .pipe(\n      pluck('data'),\n      tap((_) => this.loading$.next(false))\n    );\n\n  tableConfig$: ReplaySubject<TableConfig> = new ReplaySubject(1);\n  SNIPPETS = ADVANCED_DOCS;\n\n  ngOnInit(): void {\n    this.paginationForm\n      .get('length')\n      ?.valueChanges.pipe(withLatestFrom(this.tableConfig$))\n      .subscribe(([length, config]) => {\n        length = +length;\n        this.tableConfig$.next({\n          ...config,\n          pagination: { ...config.pagination, length },\n        });\n      });\n    this.tableConfig$.next({\n      class: 'table text-nowrap',\n      columns: {\n        first_name: {\n          sortable: true,\n        },\n        last_name: {\n          sortable: true,\n        },\n        gender: {\n          sortable: true,\n        },\n        birthday: {\n          sortable: true,\n          class: 'text-end justify-content-end',\n          search: (row, column) => formatDate(row[column], 'longDate', 'en'),\n          transform: {\n            pipe: DatePipe,\n            args: ['longDate'],\n          },\n        },\n      },\n      pagination: {\n        length: this.paginationForm.get('length')?.value || 0,\n      },\n    });\n  }\n}\n\nexport const Pagination: Story<PaginationComponent> = (\n  args: PaginationComponent\n) => ({\n  props: args,\n  component: PaginationComponent,\n});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "UntypedFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "UntypedFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "PaginationComponent-1",
            "templateData": "<form [formGroup]=\"paginationForm\">\n  <div class=\"row gy-3\">\n    <div class=\"form-group col-12 col-sm-auto\">\n      <label for=\"length_input\">Number of rows</label>\n      <input\n        id=\"length_input\"\n        formControlName=\"length\"\n        type=\"number\"\n        class=\"form-control\"\n      />\n    </div>\n    <div class=\"form-group col-12 col-sm-auto\">\n      <label for=\"search_input\">Search</label>\n      <input\n        id=\"search_input\"\n        formControlName=\"search\"\n        type=\"text\"\n        class=\"form-control\"\n      />\n    </div>\n  </div>\n</form>\n<div class=\"mx-n3 mx-sm-0 my-3 overflow-auto\">\n  <angular-generic-table\n    [data]=\"data$\"\n    [config]=\"tableConfig$\"\n    [search]=\"search$\"\n    [loading]=\"loading$\"\n    #table\n  >\n    <div class=\"table-loading gt-skeleton-loader\"></div>\n    <div class=\"table-no-data alert alert-info mt-3\">Table is empty</div>\n  </angular-generic-table>\n</div>\n<angular-generic-table-pagination [table]=\"table\">\n</angular-generic-table-pagination>\n<docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n"
        },
        {
            "name": "RowHoverClickComponent",
            "id": "component-RowHoverClickComponent-beb9b8dec41975ff90d50f380c6e17362cfd5b4552fec0fdee29c3ecc06b680d6faa8ff75047aa7b54a2c504620ff01361bc68adfc590672a41ae31490e7f48d",
            "file": "projects/docs/src/app/examples/row-hover-click/row-hover-click.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-row-hover-click",
            "styleUrls": [],
            "styles": [
                "\n      :host ::ng-deep .gt-hover {\n        background-color: var(--bs-highlight-bg);\n      }\n    "
            ],
            "template": "<div class=\"overflow-auto\">\n  <button class=\"btn btn-secondary me-3\" (click)=\"tableRef.hoverRow(1)\">\n    Set hover state to second row\n  </button>\n  <button class=\"btn btn-secondary\" (click)=\"tableRef.hoverRow(null)\">\n    Remove hover state\n  </button>\n  <angular-generic-table\n    [data]=\"data\"\n    [config]=\"config\"\n    (rowClick)=\"onRowClick($event)\"\n    (rowHover)=\"onRowHover($event)\"\n    #tableRef\n  ></angular-generic-table>\n</div>\n{{ clicked }}\n<docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "clicked",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "config",
                    "defaultValue": "{\n    columns: {\n      firstName: {},\n      lastName: {},\n      gender: {},\n      favoriteFood: {},\n    },\n    rowClick: true,\n    rowHover: true,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "data",
                    "defaultValue": "[\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "SNIPPETS",
                    "defaultValue": "ROW_HOVER_CLICK_SNIPPETS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                }
            ],
            "methodsClass": [
                {
                    "name": "onRowClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "GtRowClickEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "GtRowClickEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRowHover",
                    "args": [
                        {
                            "name": "event",
                            "type": "GtRowHoverEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "GtRowHoverEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Story } from '@storybook/angular/types-6-0';\nimport { ROW_HOVER_CLICK_SNIPPETS } from './row-hower-click.snippets';\nimport { GtRowClickEvent, GtRowHoverEvent } from '@angular-generic-table/core';\n\n@Component({\n  selector: 'docs-row-hover-click',\n  template: `\n    <div class=\"overflow-auto\">\n      <button class=\"btn btn-secondary me-3\" (click)=\"tableRef.hoverRow(1)\">\n        Set hover state to second row\n      </button>\n      <button class=\"btn btn-secondary\" (click)=\"tableRef.hoverRow(null)\">\n        Remove hover state\n      </button>\n      <angular-generic-table\n        [data]=\"data\"\n        [config]=\"config\"\n        (rowClick)=\"onRowClick($event)\"\n        (rowHover)=\"onRowHover($event)\"\n        #tableRef\n      ></angular-generic-table>\n    </div>\n    {{ clicked }}\n    <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n  `,\n  styles: [\n    `\n      :host ::ng-deep .gt-hover {\n        background-color: var(--bs-highlight-bg);\n      }\n    `,\n  ],\n})\nexport class RowHoverClickComponent {\n  clicked = '';\n  data = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n    },\n  ];\n  config = {\n    columns: {\n      firstName: {},\n      lastName: {},\n      gender: {},\n      favoriteFood: {},\n    },\n    rowClick: true,\n    rowHover: true,\n  };\n\n  onRowClick(event: GtRowClickEvent) {\n    console.log('row clicked', event);\n    this.clicked = `clicked row number: ${event.index}`;\n  }\n  onRowHover(event: GtRowHoverEvent) {\n    console.log('row hovered', event);\n  }\n\n  SNIPPETS = ROW_HOVER_CLICK_SNIPPETS;\n}\n\nexport const RowHoverClick: Story<RowHoverClickComponent> = (\n  args: RowHoverClickComponent\n) => ({\n  props: args,\n  component: RowHoverClickComponent,\n});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host ::ng-deep .gt-hover {\n        background-color: var(--bs-highlight-bg);\n      }\n    \n"
        },
        {
            "name": "ServerSidePaginationComponent",
            "id": "component-ServerSidePaginationComponent-cb0f40783d1b367a19972a3b81e3d412ca580af909300bf9ee947fdcb514868d51bd4bbe662c4629e06be3b886763c1e2b2cb9ad5960daf2a9bee4c93c234cff",
            "file": "projects/docs/src/app/examples/server-side-pagination/server-side-pagination.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-lazy-loading",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./server-side-pagination.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'actions', {static: true}"
                        }
                    ]
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'color', {static: true}"
                        }
                    ]
                },
                {
                    "name": "data$",
                    "defaultValue": "this.request$.pipe(\n    pluck('data'),\n    shareReplay(1)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Array<LazyLoadingData>>",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "loading$",
                    "defaultValue": "new BehaviorSubject(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "paginationForm",
                    "defaultValue": "this.fb.group({\n    search: [''],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "paging$",
                    "defaultValue": "this.request$.pipe(\n    pluck('paging'),\n    shareReplay(1)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<GtPaginationInfo>",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "request$",
                    "defaultValue": "this.requestParams$.pipe(\n    tap((_) => this.loading$.next(true)), // show loading indicator whenever requests are changed (remove to disable loading indicator)\n    switchMap((params) =>\n      this.http.get<LazyLoadingResponse>(\n        'https://private-a6da3-generictableapi.apiary-mock.com/data',\n        {\n          params,\n        }\n      )\n    ),\n    tap((_) => this.loading$.next(false)), // hide loading indicator\n    shareReplay(1)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "requestParams$",
                    "defaultValue": "new BehaviorSubject({\n    page: 1,\n    page_size: 10,\n    sort_by: '+id',\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "search$",
                    "defaultValue": "this.paginationForm.controls.search.valueChanges.pipe(\n    shareReplay(1)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "SNIPPETS",
                    "defaultValue": "LAZY_LOADING_DOCS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 152
                },
                {
                    "name": "sorting$",
                    "defaultValue": "this.request$.pipe(pluck('sorting'), shareReplay(1))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "tableConfig$",
                    "defaultValue": "new ReplaySubject(\n    1\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplaySubject<TableConfig<LazyLoadingData>>",
                    "optional": false,
                    "description": "",
                    "line": 115
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "GtPageChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "GtPageChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSortOrderChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "GtSortEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "GtSortEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { DatePipe, formatDate } from '@angular/common';\nimport {\n  GtPageChangeEvent,\n  GtSortEvent,\n  GtSortOrder,\n  PaginationComponent,\n  TableConfig,\n} from '@angular-generic-table/core';\nimport { FormBuilder } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { pluck, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { Story } from '@storybook/angular/types-6-0';\nimport { GtPaginationInfo } from '../../../../../core/src/lib/models/gt-pagination';\nimport { sortOrderToParams } from '../../../../../core/src/lib/utilities/utilities';\nimport { LAZY_LOADING_DOCS } from './server-side-pagination.snippets';\ninterface LazyLoadingData {\n  birthday: string;\n  email: string;\n  favorite_color: string;\n  first_name: string;\n  gender: string;\n  id: number;\n  last_name: string;\n}\n\ninterface LazyLoadingResponse {\n  data: Array<LazyLoadingData>;\n  paging: GtPaginationInfo;\n  sorting: GtSortOrder<LazyLoadingData>;\n  filters: [\n    {\n      [Property in keyof LazyLoadingResponse]: { [key: string]: any };\n    }\n  ];\n  request: any;\n  error: any;\n}\n@Component({\n  selector: 'docs-lazy-loading',\n  templateUrl: './server-side-pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ServerSidePaginationComponent implements OnInit {\n  constructor(private fb: FormBuilder, private http: HttpClient) {}\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  @ViewChild('color', { static: true }) color: TemplateRef<any> | undefined;\n  paginationForm = this.fb.group({\n    search: [''],\n  });\n  requestParams$ = new BehaviorSubject({\n    page: 1,\n    page_size: 10,\n    sort_by: '+id',\n  });\n  search$ = this.paginationForm.controls.search.valueChanges.pipe(\n    shareReplay(1)\n  );\n  loading$ = new BehaviorSubject(true);\n\n  request$ = this.requestParams$.pipe(\n    tap((_) => this.loading$.next(true)), // show loading indicator whenever requests are changed (remove to disable loading indicator)\n    switchMap((params) =>\n      this.http.get<LazyLoadingResponse>(\n        'https://private-a6da3-generictableapi.apiary-mock.com/data',\n        {\n          params,\n        }\n      )\n    ),\n    tap((_) => this.loading$.next(false)), // hide loading indicator\n    shareReplay(1)\n  );\n\n  data$: Observable<Array<LazyLoadingData>> = this.request$.pipe(\n    pluck('data'),\n    shareReplay(1)\n  );\n  paging$: Observable<GtPaginationInfo> = this.request$.pipe(\n    pluck('paging'),\n    shareReplay(1)\n  );\n\n  sorting$ = this.request$.pipe(pluck('sorting'), shareReplay(1));\n\n  onPageChange(event: GtPageChangeEvent): void {\n    const current = { ...this.requestParams$.value };\n    if (current.page != event.index + 1) {\n      this.requestParams$.next({\n        ...current,\n        page: event.index + 1,\n      });\n    }\n  }\n\n  onSortOrderChange(event: GtSortEvent): void {\n    let sort_by = sortOrderToParams([...event.currentSortOrder]);\n    const current = { ...this.requestParams$.value };\n    if (current.sort_by !== sort_by) {\n      this.requestParams$.next({\n        ...current,\n        page: 1, // reset page to 1 when sorting changes\n        sort_by,\n      });\n    }\n  }\n\n  tableConfig$: ReplaySubject<TableConfig<LazyLoadingData>> = new ReplaySubject(\n    1\n  );\n  ngOnInit(): void {\n    this.tableConfig$.next({\n      class: 'table text-nowrap',\n      columns: {\n        id: {\n          sortable: true,\n        },\n        first_name: {},\n        last_name: {\n          sortable: true,\n        },\n        gender: {\n          sortable: true,\n        },\n        birthday: {\n          class: 'text-end justify-content-end',\n          search: (row, column) => formatDate(row[column], 'longDate', 'en'),\n          transform: {\n            pipe: DatePipe,\n            args: ['longDate'],\n          },\n        },\n        favorite_color: {\n          hidden: true,\n        },\n        email: {\n          hidden: true,\n        },\n      },\n      pagination: {\n        length: 10,\n      },\n    });\n  }\n  SNIPPETS = LAZY_LOADING_DOCS;\n}\n\nexport const Pagination: Story<PaginationComponent> = (\n  args: PaginationComponent\n) => ({\n  props: args,\n  component: PaginationComponent,\n});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form [formGroup]=\"paginationForm\">\n  <div class=\"row gy-3\">\n    <div class=\"form-group col-12 col-sm-auto\">\n      <label for=\"search_input\">Search</label>\n      <input\n        id=\"search_input\"\n        formControlName=\"search\"\n        type=\"text\"\n        class=\"form-control\"\n      />\n    </div>\n  </div>\n</form>\n<div class=\"mx-n3 mx-sm-0 my-3 overflow-auto\">\n  <angular-generic-table\n    [data]=\"data$\"\n    [config]=\"tableConfig$\"\n    [search]=\"search$\"\n    [loading]=\"loading$\"\n    [pagingInfo]=\"paging$ | async\"\n    (pageChange)=\"onPageChange($event)\"\n    (columnSort)=\"onSortOrderChange($event)\"\n    [sortOrder]=\"sorting$ | async\"\n    #table\n  >\n    <div\n      class=\"table-loading gt-skeleton-loader\"\n      [style.--gt-skeleton-height]=\"\n        ((table.table$ | async)?.info?.pageSize ?? 0) * 41 - 11 + 'px'\n      \"\n    ></div>\n    <div class=\"table-no-data alert alert-info mt-3\">Table is empty</div>\n  </angular-generic-table>\n</div>\n<angular-generic-table-pagination [table]=\"table\">\n</angular-generic-table-pagination>\n<docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n"
        },
        {
            "name": "SimpleComponent",
            "id": "component-SimpleComponent-694868655a17d764ba2ea4b3cec45a1da4821c89b5e10705be2cdafe489383b24c58c393e0f3abb055c4a617c285a2b05722a166766c3f680803a92b574cf339",
            "file": "projects/docs/src/app/examples/simple/simple.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"overflow-auto\">\n  <angular-generic-table\n    [data]=\"data\"\n    [config]=\"config\"\n  ></angular-generic-table>\n</div>\n<docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "defaultValue": "{\n    class: 'table table-striped table-bordered',\n    columns: {\n      firstName: {},\n      lastName: {},\n      gender: {},\n      favoriteFood: {},\n    },\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableConfig<BasicData>",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "data",
                    "defaultValue": "[\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<BasicData>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "SNIPPETS",
                    "defaultValue": "SIMPLE_SNIPPETS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Story } from '@storybook/angular/types-6-0';\nimport { SIMPLE_SNIPPETS } from './simple.snippets';\nimport { TableConfig } from '@angular-generic-table/core';\ninterface BasicData {\n  firstName: string;\n  lastName: string;\n  gender: 'male' | 'female';\n  favoriteFood: string;\n}\n@Component({\n  template: `\n    <div class=\"overflow-auto\">\n      <angular-generic-table\n        [data]=\"data\"\n        [config]=\"config\"\n      ></angular-generic-table>\n    </div>\n    <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n  `,\n  styles: [],\n})\nexport class SimpleComponent {\n  data: Array<BasicData> = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n    },\n  ];\n  config: TableConfig<BasicData> = {\n    class: 'table table-striped table-bordered',\n    columns: {\n      firstName: {},\n      lastName: {},\n      gender: {},\n      favoriteFood: {},\n    },\n  };\n\n  SNIPPETS = SIMPLE_SNIPPETS;\n}\n\nexport const Simple: Story<SimpleComponent> = (args: SimpleComponent) => ({\n  props: args,\n  component: SimpleComponent,\n});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "SortingComponent",
            "id": "component-SortingComponent-4ef62adeec6897b8e534c6091a292d9ae7fd533c6079340b6b9edf96420c885a8d8a92be14944773a784a876cca1d3299a6e8762760799e0958f49349cb5bd9a",
            "file": "projects/docs/src/app/examples/sorting/sorting.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"overflow-auto\">\n  <angular-generic-table\n    #table\n    [data]=\"data\"\n    [config]=\"config\"\n    [(sortOrder)]=\"sortOrder\"\n    (columnSort)=\"logSortChange($event)\"\n  ></angular-generic-table>\n</div>\n<div class=\"row mb-3 gy-3\">\n  <div class=\"col-12 col-sm-auto\">\n    <button\n      class=\"btn btn-primary w-100\"\n      (click)=\"table.sortByKey('firstName', $event)\"\n    >\n      Sort on first name\n    </button>\n  </div>\n  <div class=\"col-12 col-sm-auto\">\n    <button class=\"btn btn-primary w-100\" (click)=\"resetSort()\">\n      Reset sorting\n    </button>\n  </div>\n</div>\n<strong>Current sort order</strong>\n<p>\n  <code>\n    {{ sortOrder | json }}\n  </code>\n</p>\n<docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "defaultValue": "{\n    columns: {\n      firstName: {\n        sortable: true,\n      },\n      lastName: {\n        sortable: true,\n      },\n      gender: {\n        sortable: true,\n      },\n      favoriteFood: {\n        sortable: true,\n      },\n      birthdate: {\n        sortable: true,\n        transform: {\n          pipe: DatePipe,\n        },\n      },\n    },\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableConfig<SortingData>",
                    "optional": false,
                    "description": "",
                    "line": 140
                },
                {
                    "name": "data",
                    "defaultValue": "[\n    {\n      firstName: 'John',\n      lastName: 'Doe',\n      gender: 'male',\n      favoriteFood: 'pizza',\n      birthdate: 946684800000,\n    },\n    {\n      firstName: 'Jane',\n      lastName: 'Smith',\n      gender: 'female',\n      favoriteFood: 'sushi',\n      birthdate: 803404800000,\n    },\n    {\n      firstName: 'Bob',\n      lastName: 'Johnson',\n      gender: 'male',\n      favoriteFood: 'burgers',\n      birthdate: 649345600000,\n    },\n    {\n      firstName: 'Emily',\n      lastName: 'Williams',\n      gender: 'female',\n      favoriteFood: 'chicken',\n      birthdate: 946684800000,\n    },\n    {\n      firstName: 'Michael',\n      lastName: 'Jones',\n      gender: 'male',\n      favoriteFood: 'steak',\n      birthdate: 803404800000,\n    },\n    {\n      firstName: 'Matthew',\n      lastName: 'Brown',\n      gender: 'male',\n      favoriteFood: 'seafood',\n      birthdate: 649345600000,\n    },\n    {\n      firstName: 'Jessica',\n      lastName: 'Miller',\n      gender: 'female',\n      favoriteFood: 'salad',\n      birthdate: 946684800000,\n    },\n    {\n      firstName: 'Jacob',\n      lastName: 'Moore',\n      gender: 'male',\n      favoriteFood: 'pasta',\n      birthdate: 803404800000,\n    },\n    {\n      firstName: 'Nicholas',\n      lastName: 'Taylor',\n      gender: 'male',\n      favoriteFood: 'soup',\n      birthdate: 649345600000,\n    },\n    {\n      firstName: 'Ashley',\n      lastName: 'Anderson',\n      gender: 'female',\n      favoriteFood: 'tacos',\n      birthdate: 946684800000,\n    },\n    {\n      firstName: 'Brandon',\n      lastName: 'Thomas',\n      gender: 'male',\n      favoriteFood: 'nachos',\n      birthdate: 803404800000,\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<SortingData>",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "initialSortOrder",
                    "defaultValue": "[\n    { key: 'birthdate', order: 'asc' },\n    { key: 'gender', order: 'asc' },\n    { key: 'firstName', order: 'desc' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GtSortOrder<SortingData>",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "SNIPPETS",
                    "defaultValue": "SIMPLE_SNIPPETS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 171
                },
                {
                    "name": "sortOrder",
                    "defaultValue": "this.initialSortOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GtSortOrder<SortingData>",
                    "optional": false,
                    "description": "",
                    "line": 60
                }
            ],
            "methodsClass": [
                {
                    "name": "logSortChange",
                    "args": [
                        {
                            "name": "sortEvent",
                            "type": "GtSortEvent<SortingData>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sortEvent",
                            "type": "GtSortEvent<SortingData>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetSort",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Story } from '@storybook/angular/types-6-0';\nimport { SIMPLE_SNIPPETS } from './sorting.snippets';\nimport {\n  GtSortEvent,\n  GtSortOrder,\n  TableConfig,\n} from '@angular-generic-table/core';\nimport { DatePipe } from '@angular/common';\n\ninterface SortingData {\n  firstName: string;\n  lastName: string;\n  gender: 'male' | 'female';\n  favoriteFood: string;\n  birthdate: number;\n}\n@Component({\n  template: `\n    <div class=\"overflow-auto\">\n      <angular-generic-table\n        #table\n        [data]=\"data\"\n        [config]=\"config\"\n        [(sortOrder)]=\"sortOrder\"\n        (columnSort)=\"logSortChange($event)\"\n      ></angular-generic-table>\n    </div>\n    <div class=\"row mb-3 gy-3\">\n      <div class=\"col-12 col-sm-auto\">\n        <button\n          class=\"btn btn-primary w-100\"\n          (click)=\"table.sortByKey('firstName', $event)\"\n        >\n          Sort on first name\n        </button>\n      </div>\n      <div class=\"col-12 col-sm-auto\">\n        <button class=\"btn btn-primary w-100\" (click)=\"resetSort()\">\n          Reset sorting\n        </button>\n      </div>\n    </div>\n    <strong>Current sort order</strong>\n    <p>\n      <code>\n        {{ sortOrder | json }}\n      </code>\n    </p>\n    <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n  `,\n  styles: [],\n})\nexport class SortingComponent {\n  initialSortOrder: GtSortOrder<SortingData> = [\n    { key: 'birthdate', order: 'asc' },\n    { key: 'gender', order: 'asc' },\n    { key: 'firstName', order: 'desc' },\n  ];\n  sortOrder: GtSortOrder<SortingData> = this.initialSortOrder;\n  data: Array<SortingData> = [\n    {\n      firstName: 'John',\n      lastName: 'Doe',\n      gender: 'male',\n      favoriteFood: 'pizza',\n      birthdate: 946684800000,\n    },\n    {\n      firstName: 'Jane',\n      lastName: 'Smith',\n      gender: 'female',\n      favoriteFood: 'sushi',\n      birthdate: 803404800000,\n    },\n    {\n      firstName: 'Bob',\n      lastName: 'Johnson',\n      gender: 'male',\n      favoriteFood: 'burgers',\n      birthdate: 649345600000,\n    },\n    {\n      firstName: 'Emily',\n      lastName: 'Williams',\n      gender: 'female',\n      favoriteFood: 'chicken',\n      birthdate: 946684800000,\n    },\n    {\n      firstName: 'Michael',\n      lastName: 'Jones',\n      gender: 'male',\n      favoriteFood: 'steak',\n      birthdate: 803404800000,\n    },\n    {\n      firstName: 'Matthew',\n      lastName: 'Brown',\n      gender: 'male',\n      favoriteFood: 'seafood',\n      birthdate: 649345600000,\n    },\n    {\n      firstName: 'Jessica',\n      lastName: 'Miller',\n      gender: 'female',\n      favoriteFood: 'salad',\n      birthdate: 946684800000,\n    },\n    {\n      firstName: 'Jacob',\n      lastName: 'Moore',\n      gender: 'male',\n      favoriteFood: 'pasta',\n      birthdate: 803404800000,\n    },\n    {\n      firstName: 'Nicholas',\n      lastName: 'Taylor',\n      gender: 'male',\n      favoriteFood: 'soup',\n      birthdate: 649345600000,\n    },\n    {\n      firstName: 'Ashley',\n      lastName: 'Anderson',\n      gender: 'female',\n      favoriteFood: 'tacos',\n      birthdate: 946684800000,\n    },\n    {\n      firstName: 'Brandon',\n      lastName: 'Thomas',\n      gender: 'male',\n      favoriteFood: 'nachos',\n      birthdate: 803404800000,\n    },\n  ];\n  config: TableConfig<SortingData> = {\n    columns: {\n      firstName: {\n        sortable: true,\n      },\n      lastName: {\n        sortable: true,\n      },\n      gender: {\n        sortable: true,\n      },\n      favoriteFood: {\n        sortable: true,\n      },\n      birthdate: {\n        sortable: true,\n        transform: {\n          pipe: DatePipe,\n        },\n      },\n    },\n  };\n\n  logSortChange(sortEvent: GtSortEvent<SortingData>) {\n    console.log(sortEvent);\n  }\n\n  resetSort() {\n    this.sortOrder = this.initialSortOrder;\n  }\n\n  SNIPPETS = SIMPLE_SNIPPETS;\n}\n\nexport const Sorting: Story<SortingComponent> = (args: SortingComponent) => ({\n  props: args,\n  component: SortingComponent,\n});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "TabsComponent",
            "id": "component-TabsComponent-f6bd67f3efe786dedf8f39eb7495d332aa5eaefc16371ad8b578183423f6c6d6a24d7b992db44340ec002b0793a82c88ec1012d01f427926860296f820d8ac5e",
            "file": "projects/docs/src/app/components/tabs/tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-tabs",
            "styleUrls": [
                "./tabs.component.scss"
            ],
            "styles": [],
            "template": "<ul class=\"nav nav-tabs mt-4 flex-nowrap text-nowrap overflow-auto\">\n  <li class=\"nav-item\" *ngFor=\"let item of content; let i = index\">\n    <button\n      class=\"nav-link btn-link\"\n      [class.active]=\"activeIndex === i\"\n      (click)=\"view(i)\"\n    >\n      {{ item.name }}\n    </button>\n  </li>\n</ul>\n<ng-container *ngIf=\"activeContent\">\n  <pre><code [innerHTML]=\"activeContent.value\" class=\"{{'language-' + activeContent.language}}\"></code></pre>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_content",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "activeContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HighlightResult | undefined",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "activeIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "view",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { Story } from '@storybook/angular/types-6-0';\nimport hljs from 'highlight.js/lib/core';\nimport { HighlightResult } from 'highlight.js';\n\nimport typescript from 'highlight.js/lib/languages/typescript';\nimport xml from 'highlight.js/lib/languages/xml';\nimport scss from 'highlight.js/lib/languages/scss';\n\nhljs.registerLanguage('typescript', typescript);\nhljs.registerLanguage('scss', scss);\nhljs.registerLanguage('xml', xml);\n\n@Component({\n  selector: 'docs-tabs',\n  template: `\n    <ul class=\"nav nav-tabs mt-4 flex-nowrap text-nowrap overflow-auto\">\n      <li class=\"nav-item\" *ngFor=\"let item of content; let i = index\">\n        <button\n          class=\"nav-link btn-link\"\n          [class.active]=\"activeIndex === i\"\n          (click)=\"view(i)\"\n        >\n          {{ item.name }}\n        </button>\n      </li>\n    </ul>\n    <ng-container *ngIf=\"activeContent\">\n      <pre><code [innerHTML]=\"activeContent.value\" class=\"{{'language-' + activeContent.language}}\"></code></pre>\n    </ng-container>\n  `,\n  styleUrls: ['./tabs.component.scss'],\n})\nexport class TabsComponent implements OnInit {\n  get content(): any {\n    return this._content;\n  }\n\n  @Input() set content(value: any) {\n    this._content = value;\n  }\n  constructor() {}\n  activeIndex = 0;\n  activeContent: HighlightResult | undefined;\n\n  private _content: Array<{}> = [];\n  ngOnInit(): void {\n    this.activeContent = hljs.highlight(this.content[this.activeIndex].code, {\n      language: this.content[this.activeIndex].language,\n    });\n  }\n\n  view(index: number): void {\n    this.activeIndex = index;\n    this.activeContent = hljs.highlight(this.content[index].code, {\n      language: this.content[index].language,\n    });\n  }\n}\n\nexport const Tabs: Story<TabsComponent> = (args: TabsComponent) => ({\n  props: args,\n  component: TabsComponent,\n});\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "pre {\n  background-image: linear-gradient(0deg, #f8f8f8 25%, #ffffff 25%, #ffffff 50%, #f8f8f8 50%, #f8f8f8 75%, #ffffff 75%, #ffffff 100%);\n  background-size: 84.00px 84.00px;\n  padding: 21px 1rem;\n}\nul {\n  &::-webkit-scrollbar {\n    display: none;\n  }\n  -ms-overflow-style: none; /* IE and Edge */\n  scrollbar-width: none; /* Firefox */\n}\n",
                    "styleUrl": "./tabs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 41
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "content": {
                    "name": "content",
                    "setSignature": {
                        "name": "content",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 39,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "content",
                        "type": "any",
                        "returnType": "any",
                        "line": 35
                    }
                }
            }
        },
        {
            "name": "TransposeComponent",
            "id": "component-TransposeComponent-0a5c0cb27d235dfe9659a36988e8f66a453ff89ad5e286c1c983f66beb2ec0e2a4b9694bf4c3ff2f652e68001624f00f6630abc1e58f843290dac6f691044c0c",
            "file": "projects/docs/src/app/examples/transpose/transpose.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-transpose",
            "styleUrls": [],
            "styles": [],
            "template": "<form [formGroup]=\"reactiveForm\">\n  <div class=\"row gy-3 gx-3 align-items-end mb-3\">\n    <div class=\"form-group col-6 col-sm-auto\">\n      <label for=\"length_input\">Number of rows</label>\n      <input\n        id=\"length_input\"\n        formControlName=\"length\"\n        type=\"number\"\n        class=\"form-control\"\n      />\n    </div>\n    <div class=\"form-group col-6 col-sm-auto\">\n      <label for=\"search_input\">Search</label>\n      <input\n        id=\"search_input\"\n        formControlName=\"search\"\n        type=\"text\"\n        class=\"form-control\"\n      />\n    </div>\n    <div class=\"col-auto\">\n      <button\n        class=\"btn btn-outline-primary w-100\"\n        (click)=\"simulateLoad()\"\n      >\n        Simulate load\n      </button>\n    </div>\n    <div class=\"col col-sm-auto\">\n      <button class=\"btn btn-outline-danger w-100\" (click)=\"empty()\">\n        Empty\n      </button>\n    </div>\n    <div class=\"col col-sm-auto\">\n      <button class=\"btn btn-outline-primary w-100\" (click)=\"load()\">\n        Reset\n      </button>\n    </div>\n    <div class=\"col col-sm-auto\">\n      <button class=\"btn btn-outline-primary w-100\" (click)=\"transpose()\">\n        Transpose\n      </button>\n    </div>\n  </div>\n  <div class=\"overflow-auto\">\n    <angular-generic-table\n      #table\n      [data]=\"data\"\n      [config]=\"tableConfig$\"\n      [loading]=\"loading$\"\n      [search]=\"search$\"\n    >\n      <div class=\"table-loading gt-skeleton-loader\"></div>\n      <div class=\"table-no-data alert alert-info mt-3\">Table is empty</div>\n    </angular-generic-table>\n  </div>\n  <angular-generic-table-pagination [table]=\"table\">\n  </angular-generic-table-pagination>\n  <ng-template #delta let-index=\"index\" let-data=\"data\">\n    <gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>\n  </ng-template>\n  <ng-template #deltaAbsolute let-index=\"index\" let-data=\"data\">\n    <gt-delta\n      [index]=\"index\"\n      [data]=\"data\"\n      [deltaTemplate]=\"deltaTemplate\"\n    ></gt-delta>\n  </ng-template>\n  <ng-template #deltaIndex let-index=\"index\" let-data=\"data\">\n    <gt-delta [index]=\"index\" [data]=\"data\" [baseIndex]=\"0\"></gt-delta>\n  </ng-template>\n  <ng-template\n    #combined\n    let-index=\"index\"\n    let-data=\"data\"\n    let-row=\"row\"\n    let-col=\"col\"\n  >\n    {{ row.value }}\n    <ng-container *ngIf=\"index > 0\">\n      <gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>\n    </ng-container>\n  </ng-template>\n  <ng-template #deltaTemplate let-delta=\"delta\">\n    <span>{{ delta.absolute }}</span></ng-template\n  >\n  <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n</form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "combined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<GtDeltaComponent> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 122,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'combined', {static: true}"
                        }
                    ]
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<RawData>",
                    "optional": false,
                    "description": "",
                    "line": 134
                },
                {
                    "name": "delta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<GtDeltaComponent> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 113,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'delta', {static: true}"
                        }
                    ]
                },
                {
                    "name": "deltaAbsolute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<GtDeltaComponent> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 116,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'deltaAbsolute', {static: true}"
                        }
                    ]
                },
                {
                    "name": "deltaIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<GtDeltaComponent> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 119,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'deltaIndex', {static: true}"
                        }
                    ]
                },
                {
                    "name": "loading$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "reactiveForm",
                    "defaultValue": "this.fb.group({\n    length: [10],\n    search: [''],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 126
                },
                {
                    "name": "search$",
                    "defaultValue": "this.reactiveForm.get('search')?.valueChanges as Observable<string>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 130
                },
                {
                    "name": "SNIPPETS",
                    "defaultValue": "TRANSPOSE_SNIPPETS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 289
                },
                {
                    "name": "tableConfig$",
                    "defaultValue": "new BehaviorSubject<\n    TableConfig<YearData>\n  >({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<TableConfig<YearData>>",
                    "optional": false,
                    "description": "",
                    "line": 131
                }
            ],
            "methodsClass": [
                {
                    "name": "empty",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "load",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "simulateLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "transpose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { TableConfig, GtDeltaComponent } from '@angular-generic-table/core';\nimport { UntypedFormBuilder } from '@angular/forms';\nimport { withLatestFrom } from 'rxjs/operators';\nimport { Story } from '@storybook/angular/types-6-0';\nimport { TRANSPOSE_SNIPPETS } from './transpose.snippets';\ninterface RawData {\n  year: string;\n  value: number;\n}\ninterface YearData extends RawData {\n  delta: number;\n  deltaIndex: number;\n  combined: number;\n  deltaAbsolute: number;\n}\n@Component({\n  selector: 'docs-transpose',\n  template: `\n    <form [formGroup]=\"reactiveForm\">\n      <div class=\"row gy-3 gx-3 align-items-end mb-3\">\n        <div class=\"form-group col-6 col-sm-auto\">\n          <label for=\"length_input\">Number of rows</label>\n          <input\n            id=\"length_input\"\n            formControlName=\"length\"\n            type=\"number\"\n            class=\"form-control\"\n          />\n        </div>\n        <div class=\"form-group col-6 col-sm-auto\">\n          <label for=\"search_input\">Search</label>\n          <input\n            id=\"search_input\"\n            formControlName=\"search\"\n            type=\"text\"\n            class=\"form-control\"\n          />\n        </div>\n        <div class=\"col-auto\">\n          <button\n            class=\"btn btn-outline-primary w-100\"\n            (click)=\"simulateLoad()\"\n          >\n            Simulate load\n          </button>\n        </div>\n        <div class=\"col col-sm-auto\">\n          <button class=\"btn btn-outline-danger w-100\" (click)=\"empty()\">\n            Empty\n          </button>\n        </div>\n        <div class=\"col col-sm-auto\">\n          <button class=\"btn btn-outline-primary w-100\" (click)=\"load()\">\n            Reset\n          </button>\n        </div>\n        <div class=\"col col-sm-auto\">\n          <button class=\"btn btn-outline-primary w-100\" (click)=\"transpose()\">\n            Transpose\n          </button>\n        </div>\n      </div>\n      <div class=\"overflow-auto\">\n        <angular-generic-table\n          #table\n          [data]=\"data\"\n          [config]=\"tableConfig$\"\n          [loading]=\"loading$\"\n          [search]=\"search$\"\n        >\n          <div class=\"table-loading gt-skeleton-loader\"></div>\n          <div class=\"table-no-data alert alert-info mt-3\">Table is empty</div>\n        </angular-generic-table>\n      </div>\n      <angular-generic-table-pagination [table]=\"table\">\n      </angular-generic-table-pagination>\n      <ng-template #delta let-index=\"index\" let-data=\"data\">\n        <gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>\n      </ng-template>\n      <ng-template #deltaAbsolute let-index=\"index\" let-data=\"data\">\n        <gt-delta\n          [index]=\"index\"\n          [data]=\"data\"\n          [deltaTemplate]=\"deltaTemplate\"\n        ></gt-delta>\n      </ng-template>\n      <ng-template #deltaIndex let-index=\"index\" let-data=\"data\">\n        <gt-delta [index]=\"index\" [data]=\"data\" [baseIndex]=\"0\"></gt-delta>\n      </ng-template>\n      <ng-template\n        #combined\n        let-index=\"index\"\n        let-data=\"data\"\n        let-row=\"row\"\n        let-col=\"col\"\n      >\n        {{ row.value }}\n        <ng-container *ngIf=\"index > 0\">\n          <gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>\n        </ng-container>\n      </ng-template>\n      <ng-template #deltaTemplate let-delta=\"delta\">\n        <span>{{ delta.absolute }}</span></ng-template\n      >\n      <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n    </form>\n  `,\n  styles: [],\n})\nexport class TransposeComponent implements OnInit {\n  @ViewChild('delta', { static: true }) delta:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  @ViewChild('deltaAbsolute', { static: true }) deltaAbsolute:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  @ViewChild('deltaIndex', { static: true }) deltaIndex:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  @ViewChild('combined', { static: true }) combined:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  loading$ = new BehaviorSubject(false);\n  reactiveForm = this.fb.group({\n    length: [10],\n    search: [''],\n  });\n  search$ = this.reactiveForm.get('search')?.valueChanges as Observable<string>;\n  tableConfig$: BehaviorSubject<TableConfig<YearData>> = new BehaviorSubject<\n    TableConfig<YearData>\n  >({});\n  data: Array<RawData> = [];\n\n  constructor(private fb: UntypedFormBuilder) {}\n\n  ngOnInit(): void {\n    this.transpose();\n    this.load();\n    this.reactiveForm\n      .get('length')\n      ?.valueChanges.pipe(withLatestFrom(this.tableConfig$))\n      .subscribe(([length, config]) => {\n        length = +length;\n        this.tableConfig$.next({\n          ...config,\n          pagination: { ...config.pagination, length },\n        });\n      });\n  }\n\n  simulateLoad(): void {\n    this.loading$.next(true);\n    // set loading state to false after 2 seconds\n    setTimeout(() => this.loading$.next(false), 2000);\n  }\n  empty(): void {\n    this.data = [];\n  }\n  load(): void {\n    this.data = [\n      {\n        year: '2010',\n        value: 15,\n      },\n      {\n        year: '2011',\n        value: 30,\n      },\n      {\n        year: '2012',\n        value: 25,\n      },\n      {\n        year: '2013',\n        value: 0,\n      },\n      {\n        year: '2014',\n        value: 40,\n      },\n      {\n        year: '2015',\n        value: 0,\n      },\n      {\n        year: '2016',\n        value: -5,\n      },\n      {\n        year: '2018',\n        value: 75,\n      },\n      {\n        year: '2019',\n        value: 100,\n      },\n      {\n        year: '2020',\n        value: 250,\n      },\n      {\n        year: '2021',\n        value: 50,\n      },\n      {\n        year: '2022',\n        value: 60,\n      },\n    ];\n  }\n  transpose(): void {\n    if (this.tableConfig$.value.columns) {\n      this.tableConfig$.next({\n        stickyHeaders: {\n          row: true,\n          column: true,\n        },\n        rows: {\n          year: {\n            sortable: true,\n            header: false,\n            class: 'text-end',\n          },\n          value: {\n            class: 'text-end',\n          },\n          delta: {\n            header: 'Delta %',\n            templateRef: this.delta,\n            class: 'text-end',\n          },\n          deltaIndex: {\n            header: 'Since inception %',\n            templateRef: this.deltaIndex,\n            class: 'text-end',\n          },\n          deltaAbsolute: {\n            header: 'Delta',\n            templateRef: this.deltaAbsolute,\n            class: 'text-end',\n          },\n          combined: {\n            header: 'Value with change',\n            templateRef: this.combined,\n            class: 'text-end text-nowrap',\n          },\n        },\n      });\n    } else {\n      this.tableConfig$.next({\n        stickyHeaders: {\n          row: true,\n          column: true,\n        },\n        columns: {\n          year: {\n            sortable: true,\n          },\n          value: {\n            class: 'text-end',\n          },\n          delta: {\n            header: 'Delta %',\n            templateRef: this.delta,\n            class: 'text-end',\n          },\n          deltaIndex: {\n            header: 'Since inception %',\n            templateRef: this.deltaIndex,\n            class: 'text-end',\n          },\n          deltaAbsolute: {\n            header: 'Delta',\n            templateRef: this.deltaAbsolute,\n            class: 'text-end',\n          },\n          combined: {\n            header: 'Value with change',\n            templateRef: this.combined,\n            class: 'text-end text-nowrap',\n          },\n        },\n        pagination: { length: this.reactiveForm.get('length')?.value },\n      });\n    }\n  }\n  SNIPPETS = TRANSPOSE_SNIPPETS;\n}\n\nexport const Transpose: Story<TransposeComponent> = (\n  args: TransposeComponent\n) => ({\n  props: args,\n  component: TransposeComponent,\n});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "UntypedFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 134,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "UntypedFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-df0c26e16dbd97eda40213d28568d96390d2c08cba6f9c16c17e04b6c7c949096d5908b766b6783de532cb4eaa331c14d81b18a6bea40b9229308e4a9399c8c9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/docs/src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport {\n  GenericTableCoreModule,\n  GenericTablePaginationModule,\n} from '@angular-generic-table/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AdvancedComponent } from './examples/advanced/advanced.component';\nimport { SimpleComponent } from './examples/simple/simple.component';\nimport { TabsComponent } from './components/tabs/tabs.component';\nimport { CustomTemplatesComponent } from './examples/custom-templates/custom-templates.component';\nimport { PaginationComponent } from './examples/pagination/pagination.component';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { HorizontalTableComponent } from './examples/horizontal-table/horizontal-table.component';\nimport { MobileLayoutComponent } from './examples/mobile-layout/mobile-layout.component';\nimport { NestedDataComponent } from './examples/nested-data/nested-data.component';\nimport { TransposeComponent } from './examples/transpose/transpose.component';\nimport { RowHoverClickComponent } from './examples/row-hover-click/row-hover-click.component';\nimport { FooterComponent } from './examples/footer/footer.component';\nimport { SortingComponent } from './examples/sorting/sorting.component';\nimport { ServerSidePaginationComponent } from './examples/server-side-pagination/server-side-pagination.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AdvancedComponent,\n    SimpleComponent,\n    HorizontalTableComponent,\n    PaginationComponent,\n    TabsComponent,\n    CustomTemplatesComponent,\n    MobileLayoutComponent,\n    NestedDataComponent,\n    TransposeComponent,\n    RowHoverClickComponent,\n    FooterComponent,\n    SortingComponent,\n    ServerSidePaginationComponent,\n  ],\n  imports: [\n    BrowserModule,\n    CommonModule,\n    AppRoutingModule,\n    GenericTableCoreModule,\n    GenericTablePaginationModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AdvancedComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "CustomTemplatesComponent"
                        },
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "HorizontalTableComponent"
                        },
                        {
                            "name": "MobileLayoutComponent"
                        },
                        {
                            "name": "NestedDataComponent"
                        },
                        {
                            "name": "RowHoverClickComponent"
                        },
                        {
                            "name": "ServerSidePaginationComponent"
                        },
                        {
                            "name": "SimpleComponent"
                        },
                        {
                            "name": "SortingComponent"
                        },
                        {
                            "name": "TabsComponent"
                        },
                        {
                            "name": "TransposeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "GenericTableCoreModule"
                        },
                        {
                            "name": "GenericTablePaginationModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-056ce6fa5285bcf62ac389e5990646ed12c3def5f4e71d855dc966b7fe096e8c7dd52ee76dbf954de3d5e586895691fe8a14b318de131dfece1940037face036",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/docs/src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AdvancedComponent } from './examples/advanced/advanced.component';\nimport { SimpleComponent } from './examples/simple/simple.component';\nimport { CustomTemplatesComponent } from './examples/custom-templates/custom-templates.component';\nimport { PaginationComponent } from './examples/pagination/pagination.component';\nimport { HorizontalTableComponent } from './examples/horizontal-table/horizontal-table.component';\nimport { MobileLayoutComponent } from './examples/mobile-layout/mobile-layout.component';\nimport { NestedDataComponent } from './examples/nested-data/nested-data.component';\nimport { TransposeComponent } from './examples/transpose/transpose.component';\nimport { RowHoverClickComponent } from './examples/row-hover-click/row-hover-click.component';\nimport { FooterComponent } from './examples/footer/footer.component';\nimport { SortingComponent } from './examples/sorting/sorting.component';\nimport { ServerSidePaginationComponent } from './examples/server-side-pagination/server-side-pagination.component';\n\nconst routes: Routes = [\n  {\n    path: 'advanced',\n    component: AdvancedComponent,\n  },\n  {\n    path: 'pagination',\n    component: PaginationComponent,\n  },\n  {\n    path: 'lazy-loading',\n    component: ServerSidePaginationComponent,\n  },\n  {\n    path: 'simple',\n    component: SimpleComponent,\n  },\n  {\n    path: 'sorting',\n    component: SortingComponent,\n  },\n  {\n    path: 'row-hover-click',\n    component: RowHoverClickComponent,\n  },\n  {\n    path: 'horizontal-table',\n    component: HorizontalTableComponent,\n  },\n  {\n    path: 'custom-templates',\n    component: CustomTemplatesComponent,\n  },\n  {\n    path: 'mobile-layout',\n    component: MobileLayoutComponent,\n  },\n  {\n    path: 'nested',\n    component: NestedDataComponent,\n  },\n  {\n    path: 'transpose',\n    component: TransposeComponent,\n  },\n  {\n    path: 'footer',\n    component: FooterComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GenericTableCoreModule",
            "id": "module-GenericTableCoreModule-5e6f26e77833c9b6ffb8891bf22611853d3ccf26b6e6ee93cda5d153827062eb2978ba993150a911f3250163a3355a4aa0cd09c64c0550915cde75217981a475",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/core/src/lib/core.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CoreComponent } from './core.component';\nimport { CommonModule } from '@angular/common';\nimport { SortClassPipe } from './pipes/sort-class.pipe';\nimport { DashCasePipe } from './pipes/dash-case.pipe';\nimport { HighlightPipe } from './pipes/highlight.pipe';\nimport { CapitalCasePipe } from './pipes/capital-case.pipe';\nimport { DynamicPipe } from './pipes/dynamic.pipe';\nimport { GtDeltaComponent } from './gt-delta/gt-delta.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CoreComponent,\n    SortClassPipe,\n    DashCasePipe,\n    HighlightPipe,\n    CapitalCasePipe,\n    CapitalCasePipe,\n    DynamicPipe,\n    GtDeltaComponent,\n  ],\n  exports: [CoreComponent, GtDeltaComponent],\n})\nexport class GenericTableCoreModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CapitalCasePipe"
                        },
                        {
                            "name": "CapitalCasePipe"
                        },
                        {
                            "name": "CoreComponent"
                        },
                        {
                            "name": "DashCasePipe"
                        },
                        {
                            "name": "DynamicPipe"
                        },
                        {
                            "name": "GtDeltaComponent"
                        },
                        {
                            "name": "HighlightPipe"
                        },
                        {
                            "name": "SortClassPipe"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CoreComponent"
                        },
                        {
                            "name": "GtDeltaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GenericTablePaginationModule",
            "id": "module-GenericTablePaginationModule-a4227080671cbaa73f2851b45140457f52248b2362cd6ee8d180e3ebf8f950307912b89e04fbcbcdf5cd82a6e0720cf164c1d5ddfb6c9f94ee347b7a54b53fa3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/core/src/lib/pagination/pagination.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [CommonModule, PaginationComponent],\n  exports: [PaginationComponent],\n})\nexport class GenericTablePaginationModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PaginationComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PaginationComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Advanced",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/app.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<AppComponent>",
                "defaultValue": "(args: AppComponent) => ({\n  props: args,\n  component: AppComponent,\n})"
            },
            {
                "name": "Advanced",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/advanced/advanced.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<AdvancedComponent>",
                "defaultValue": "(\n  args: AdvancedComponent\n) => ({\n  props: args,\n  component: AdvancedComponent,\n})"
            },
            {
                "name": "ADVANCED_DOCS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/advanced/advanced.snippets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'advanced.component.html',\n    code: `<div class=\"row gx-2 gy-3 mb-3\">\n  <div class=\"col-12 col-sm-auto\">\n    <button class=\"btn btn-primary w-100\" (click)=\"addData()\">Add random data</button>\n  </div>\n  <div class=\"col-12 col-sm-auto\">\n    <button class=\"btn btn-danger w-100\" (click)=\"removeData()\">Remove data</button>\n  </div>\n  <div class=\"col-12 col-sm-auto\">\n    <button class=\"btn btn-secondary w-100\" (click)=\"simulateLoad()\">Load</button>\n  </div>\n</div>\n<form [formGroup]=\"paginationForm\">\n  <div class=\"row\">\n    <div class=\"form-group col-12 col-sm-auto\">\n      <label for=\"length_input\">Length</label>\n      <input id=\"length_input\" formControlName=\"length\" type=\"number\" class=\"form-control\">\n    </div>\n    <div class=\"form-group col-12 col-sm-auto\">\n      <label for=\"search_input\">Search</label>\n      <input id=\"search_input\" formControlName=\"search\" type=\"text\" class=\"form-control\">\n    </div>\n  </div>\n</form>\n<div class=\"mx-n3 mx-sm-0\">\n  <angular-generic-table [data]=\"data$\" [config]=\"tableConfig$\" [page]=\"(currentPage$ | async)!\" [search]=\"search$\" [loading]=\"loading$\" #table>\n    <div class=\"table-loading gt-skeleton-loader\"></div>\n    <div class=\"table-no-data alert alert-info mt-3\">\n      Table is empty\n    </div>\n  </angular-generic-table>\n</div>\n<div class=\"row justify-content-between justify-content-sm-center align-items-center mt-3\" *ngIf=\"{current: (currentPage$ | async) || 0,total: (table.table$ | async)?.info?.pageTotal || 1\n} as pagination\">\n  <div class=\"col-auto\">\n    <button class=\"btn btn-primary\" (click)=\"prev()\" [disabled]=\"pagination.current === 0\">Prev</button>\n  </div>\n  <div class=\"col-auto\">\n    <button class=\"btn btn-primary\" (click)=\"next()\" [disabled]=\"pagination.total -1 === pagination.current\">Next</button>\n  </div>\n  <div class=\"col-auto\">Current page: {{pagination.current +1}}</div>\n  <div class=\"col-auto\">Total pages: {{pagination.total}}</div>\n  <div class=\"col-auto\">\n    Records: {{(data$ | async).length}}\n  </div>\n  <div class=\"col-auto\">\n    {{clicked}}\n  </div>\n</div>\n<ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n  <button\n    *ngIf=\"index !== undefined\"\n    class=\"btn btn-outline-primary btn-sm\"\n    (click)=\"clickAction(row, col, index)\"\n  >\n    Click me!\n  </button>\n</ng-template>\n<ng-template #color let-row=\"row\" let-col=\"col\">\n  <div\n    [style.background]=\"row[col.key]\"\n    style=\"width: 1.5rem; height: 1.5rem; border-radius: 50%\"\n  ></div>\n</ng-template>`,\n    language: 'xml',\n  },\n  {\n    name: 'advanced.component.ts',\n    code: `import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { FormBuilder } from '@angular/forms';\nimport { TableColumn, TableConfig, TableRow } from '@angular-generic-table/core';\nimport { withLatestFrom } from 'rxjs/operators';\n\n@Component({\n  templateUrl: './advanced.component.html',\n})\nexport class AdvancedComponent implements OnInit {\n  get currentPage$(): Observable<number> {\n    return this._currentPage$.asObservable();\n  }\n\n  set currentPage(value: number) {\n    this._currentPage$.next(value);\n  }\n  constructor(private fb: FormBuilder) {}\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  @ViewChild('color', { static: true }) color: TemplateRef<any> | undefined;\n  paginationForm = this.fb.group({\n    length: [10],\n    search: [''],\n  });\n  search$ = this.paginationForm.get('search')?.valueChanges as Observable<string>;\n  loading$ = new BehaviorSubject(true);\n  data$: BehaviorSubject<any> = new BehaviorSubject([\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteColor: '#26BFAF',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteColor: '#0f0',\n      favoriteFood: 'Pizza',\n    },\n  ]);\n\n  private _currentPage$ = new BehaviorSubject(0);\n\n  clicked: string = '';\n  maleFirstNames = ['Peter', 'Clark', 'Ruben', 'John', 'Jack', 'Roscoe'];\n  femaleFirstNames = ['Mary Jane', 'Kim', 'Sarah', 'Michelle', 'Ann'];\n  lastNames = ['Andersson', 'Smith', 'Parker', 'Kent', 'Rogers', 'Lane', 'Jackson'];\n  foods = ['Pizza', 'Pasta', 'Hamburger', 'Pancakes', 'Tacos', 'Lasagna', 'Meatloaf'];\n  colors = ['#33d60b', '#dcafff', '#3fc9ff', '#ff1600', '#5238b1', '#fff'];\n\n  tableConfig$: ReplaySubject<TableConfig> = new ReplaySubject(1);\n\n  addData(): void {\n    this.data$.next([...this.data$.getValue(), this.randomRecord()]);\n  }\n\n  removeData(): void {\n    this.data$.next([]);\n  }\n\n  simulateLoad(): void {\n    this.loading$.next(true);\n    // set loading state to false after 2 seconds\n    setTimeout(() => this.loading$.next(false), 2000);\n  }\n\n  clickAction(row: TableRow, column: { key: string; value: TableColumn }, index: number): void {\n    console.log('clicked row:', row, 'col:', column);\n    this.clicked = \\`clicked row number: \\${index}\\`;\n  }\n\n  randomRecord(): TableRow {\n    const random = Math.floor(Math.random() * 2);\n    const newRecord = {\n      firstName: random\n        ? this.maleFirstNames[Math.floor(Math.random() * this.maleFirstNames.length)]\n        : this.femaleFirstNames[Math.floor(Math.random() * this.femaleFirstNames.length)],\n      lastName: this.lastNames[Math.floor(Math.random() * this.lastNames.length)],\n      gender: random ? 'male' : 'female',\n      favoriteColor: this.colors[Math.floor(Math.random() * this.colors.length)],\n      favoriteFood: this.foods[Math.floor(Math.random() * this.foods.length)],\n    };\n    console.log('added new random record:', newRecord);\n\n    return newRecord;\n  }\n\n  next = () => {\n    this.currentPage = this._currentPage$.value + 1;\n  };\n  prev = () => {\n    this.currentPage = this._currentPage$.value - 1;\n  };\n\n  ngOnInit(): void {\n    this.simulateLoad();\n    this.paginationForm\n      .get('length')\n      ?.valueChanges.pipe(withLatestFrom(this.tableConfig$))\n      .subscribe(([length, config]) => {\n        length = +length;\n        this.tableConfig$.next({\n          ...config,\n          pagination: { ...config.pagination, length },\n        });\n      });\n    this.tableConfig$.next({\n      class: 'table table-mobile text-nowrap mb-0',\n      columns: {\n        firstName: {\n          header: 'First name',\n          mobileHeader: true,\n          sortable: true,\n          order: 0,\n        },\n        lastName: {\n          header: 'Last name',\n          mobileHeader: true,\n          hidden: false,\n          sortable: true,\n        },\n        gender: {\n          mobileHeader: 'Sex',\n          sortable: true,\n          order: 1,\n        },\n        favoriteColor: {\n          header: 'Favorite color',\n          mobileHeader: true,\n          templateRef: this.color,\n          sortable: false,\n          order: 2,\n          search: false,\n          class: 'custom-class',\n        },\n        favoriteFood: {\n          mobileHeader: true,\n          header: 'Favorite food',\n          hidden: false,\n          sortable: true,\n          order: 0,\n        },\n        action: {\n          mobileHeader: false,\n          header: false,\n          templateRef: this.actions,\n          order: 6,\n        },\n      },\n      pagination: {\n        length: this.paginationForm.get('length')?.value || 0,\n      },\n      footer: {\n        columns: {\n          gender: {\n            count: (data, key) => {\n              let men = 0;\n              let women = 0;\n              for (let i = 0; i < data.length; i++) {\n                if (data[i][key] === 'female') {\n                  women++;\n                } else if (data[i][key] === 'male') {\n                  men++;\n                }\n              }\n              return \\`♂ \\${men} ♀ \\${women}\\`;\n            },\n          },\n          favoriteColor: {},\n          action: { count: (data, key) => \\`Total: \\${data.length}\\` },\n        },\n      },\n    });\n  }\n}`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { AdvancedComponent } from './advanced.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [AdvancedComponent],\n  imports: [BrowserModule, ReactiveFormsModule, GenericTableCoreModule],\n  bootstrap: [AdvancedComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
            },
            {
                "name": "ADVANCED_DOCS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/pagination/pagination.snippets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'pagination.component.html',\n    code: `<form [formGroup]=\"paginationForm\">\n  <div class=\"row gy-3\">\n    <div class=\"form-group col-12 col-sm-auto\">\n      <label for=\"length_input\">Length</label>\n      <input id=\"length_input\" formControlName=\"length\" type=\"number\" class=\"form-control\">\n    </div>\n    <div class=\"form-group col-12 col-sm-auto\">\n      <label for=\"search_input\">Search</label>\n      <input id=\"search_input\" formControlName=\"search\" type=\"text\" class=\"form-control\">\n    </div>\n  </div>\n</form>\n<div class=\"mx-n3 mx-sm-0 my-3 overflow-auto\">\n  <angular-generic-table [data]=\"data$\" [config]=\"tableConfig$\" [search]=\"search$\" [loading]=\"loading$\" #table>\n    <div class=\"table-loading gt-skeleton-loader\"></div>\n    <div class=\"table-no-data alert alert-info mt-3\">\n      Table is empty\n    </div>\n  </angular-generic-table>\n</div>\n<angular-generic-table-pagination [table]=\"table\">\n</angular-generic-table-pagination>`,\n    language: 'xml',\n  },\n  {\n    name: 'pagination.component.ts',\n    code: `import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { FormBuilder } from '@angular/forms';\nimport { TableConfig } from '@angular-generic-table/core';\nimport { pluck, tap, withLatestFrom } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { DatePipe } from '@angular/common';\n\n@Component({\n  selector: 'docs-pagination',\n  templateUrl: './pagination.component.html',\n  styles: [],\n})\nexport class PaginationComponent implements OnInit {\n  constructor(private fb: FormBuilder, private http: HttpClient) {}\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  @ViewChild('color', { static: true }) color: TemplateRef<any> | undefined;\n  paginationForm = this.fb.group({\n    length: [10],\n    search: [''],\n  });\n  search$ = this.paginationForm.get('search')?.valueChanges as Observable<string>;\n  loading$ = new BehaviorSubject(true);\n  data$: Observable<any> = this.http.get('https://private-730c61-generictable.apiary-mock.com/data').pipe(\n    pluck('data'),\n    tap((_) => this.loading$.next(false))\n  );\n\n  tableConfig$: ReplaySubject<TableConfig> = new ReplaySubject(1);\n\n  ngOnInit(): void {\n    this.paginationForm\n      .get('length')\n      ?.valueChanges.pipe(withLatestFrom(this.tableConfig$))\n      .subscribe(([length, config]) => {\n        length = +length;\n        this.tableConfig$.next({\n          ...config,\n          pagination: { ...config.pagination, length },\n        });\n      });\n    this.tableConfig$.next({\n      class: 'table text-nowrap',\n      columns: {\n        first_name: {\n          sortable: true,\n        },\n        last_name: {\n          sortable: true,\n        },\n        gender: {\n          sortable: true,\n        },\n        birthday: {\n          sortable: true,\n          class: 'text-end',\n          transform: {\n            pipe: DatePipe,\n            args: ['longDate'],\n          },\n        },\n      },\n      pagination: {\n        length: this.paginationForm.get('length')?.value || 0,\n      },\n    });\n  }\n}`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { PaginationComponent } from './pagination.component';\nimport { GenericTableCoreModule, GenericTablePaginationModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [PaginationComponent],\n  imports: [\n    BrowserModule,\n    GenericTableCoreModule,\n    GenericTablePaginationModule,\n    ReactiveFormsModule,\n    HttpClientModule\n  ],\n  bootstrap: [PaginationComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
            },
            {
                "name": "calculate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/core/src/lib/utilities/utilities.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(data: Array<TableRow>, config: TableConfig) => {\n  const CALCULATIONS: { [key: string]: boolean } = {};\n  const COLUMN_CALCULATIONS: { [key: string]: Array<string> } = {};\n  let CALCULATED = Object.entries(config.footer?.columns || {})\n    .filter(\n      ([columnName, calculations]) =>\n        Object.values(calculations || {}).filter((value) => value !== false)\n          .length >= 0\n    )\n    .reduce((acc: any, [columnName, calculations], index) => {\n      acc[columnName] = Object.entries(calculations || {})\n        .filter(([calculation, value]) => value !== false)\n        .reduce((acc: any, [calculation, value]) => {\n          if (COLUMN_CALCULATIONS[columnName]) {\n            COLUMN_CALCULATIONS[columnName].push(calculation);\n          } else if (value === true) {\n            COLUMN_CALCULATIONS[columnName] = [calculation];\n          }\n          CALCULATIONS[calculation] = true;\n          if (typeof value === 'function') {\n            value = value(data, columnName);\n          }\n          acc[calculation] = value === true ? 0 : value;\n          return acc;\n        }, {});\n      return acc;\n    }, {});\n  if (Object.keys(CALCULATED).length > 0) {\n    for (let i = 0; i < data.length; i++) {\n      Object.entries(COLUMN_CALCULATIONS).forEach(([column, calculations]) => {\n        if (calculations.indexOf('sum') > -1) {\n          CALCULATED[column].sum += data[i][column];\n        }\n        if (\n          calculations.indexOf('avg') > -1 &&\n          calculations.indexOf('sum') === -1\n        ) {\n          if (CALCULATED[column].sum === undefined) {\n            CALCULATED[column].sum = 0;\n          }\n          CALCULATED[column].sum += data[i][column];\n        }\n        if (\n          calculations.indexOf('max') > -1 &&\n          (!CALCULATED[column].max || +data[i][column] > CALCULATED[column].max)\n        ) {\n          CALCULATED[column].max = +data[i][column];\n        }\n        if (\n          calculations.indexOf('min') > -1 &&\n          (!CALCULATED[column].min || +data[i][column] < CALCULATED[column].min)\n        ) {\n          CALCULATED[column].min = +data[i][column];\n        }\n      });\n    }\n    Object.entries(COLUMN_CALCULATIONS).forEach(([column, calculations]) => {\n      if (calculations.indexOf('avg') !== -1) {\n        CALCULATED[column].avg = CALCULATED[column]?.sum / data.length;\n        // if sum is not part of calculations config...\n        if (calculations.indexOf('sum') === -1 && CALCULATED[column].sum) {\n          // ...remove it\n          delete CALCULATED[column].sum;\n        }\n      }\n      if (calculations.indexOf('count') !== -1) {\n        CALCULATED[column].count = data.length;\n      }\n    });\n  }\n  return {\n    calculated: CALCULATED,\n    calculations: Object.keys(CALCULATIONS).sort(\n      (a, b) =>\n        (config.footer?.rowOrder?.indexOf(a) || 0) -\n        (config.footer?.rowOrder?.indexOf(b) || 0)\n    ),\n    calculatedColumnsCount: Object.keys(CALCULATED).length || 0,\n  };\n}"
            },
            {
                "name": "capitalize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/core/src/lib/utilities/utilities.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string"
            },
            {
                "name": "chunk",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/core/src/lib/utilities/utilities.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Array<Array<TableRow>>"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/core/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "CUSTOM_TEMPLATES_DOCS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/custom-templates/custom-templates.snippets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'custom-templates.component.ts',\n    code: `import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { TableColumn, TableConfig, TableRow } from '@angular-generic-table/core';\nimport { ReplaySubject } from 'rxjs';\n\n@Component({\n  selector: 'custom-templates',\n  templateUrl: \\`./custom-templates.component.html\\`\n})\nexport class CustomTemplatesComponent implements OnInit {\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  @ViewChild('color', { static: true }) color: TemplateRef<any> | undefined;\n  clicked = '';\n\n  data = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteColor: '#26BFAF',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteColor: '#0f0',\n      favoriteFood: 'Pizza',\n    },\n  ];\n  config$: ReplaySubject<TableConfig> = new ReplaySubject(1);\n  ngOnInit(): void {\n    this.config$.next({\n      columns: {\n        firstName: {},\n        lastName: {},\n        gender: {},\n        favoriteColor: {\n          templateRef: this.color,\n        },\n        favoriteFood: {},\n        action: {\n          templateRef: this.actions,\n        },\n      },\n    });\n  }\n  clickAction(row: TableRow, column: { key: string; value: TableColumn }, index: number): void {\n    console.log('clicked row:', row, 'col:', column);\n    this.clicked = \\`clicked row number: \\${index}\\`;\n  }\n}`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { CustomTemplatesComponent } from './custom-templates-table.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [CustomTemplatesComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [CustomTemplatesComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n  {\n    name: 'custom-templates.component.html',\n    code: `<angular-generic-table [data]=\"data\" [config]=\"config$\"></angular-generic-table>\n<ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n <button class=\"btn btn-outline-primary btn-sm my-sm-n3 text-nowrap\" (click)=\"clickAction(row, col, index)\">Click me!</button>\n</ng-template>\n<ng-template #color let-row=\"row\" let-col=\"col\">\n <div [style.background]=\"row[col.key]\" style=\"width: 1.5rem; height: 1.5rem; border-radius: 50%\"></div>\n</ng-template>\n{{ clicked }}`,\n    language: 'xml',\n  },\n]"
            },
            {
                "name": "CustomTemplates",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/custom-templates/custom-templates.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CustomTemplatesComponent>",
                "defaultValue": "(\n  args: CustomTemplatesComponent\n) => ({\n  props: args,\n  component: CustomTemplatesComponent,\n})"
            },
            {
                "name": "dashed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/core/src/lib/utilities/utilities.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Footer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/footer/footer.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FooterComponent>",
                "defaultValue": "(args: FooterComponent) => ({\n  props: args,\n  component: FooterComponent,\n})"
            },
            {
                "name": "Horizontal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/horizontal-table/horizontal-table.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<HorizontalTableComponent>",
                "defaultValue": "(\n  args: HorizontalTableComponent\n) => ({\n  props: args,\n  component: HorizontalTableComponent,\n})"
            },
            {
                "name": "HORIZONTAL_TABLE_SNIPPETS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/horizontal-table/horizontal-table.snippets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'horizontal-table.component.ts',\n    code: `import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { GtDeltaComponent, TableConfig } from '@angular-generic-table/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Component({\n  selector: 'docs-horizontal',\n  templateUrl: './horizontal-table.component.html',\n  styles: [],\n})\nexport class TransposeComponent implements OnInit {\n  @ViewChild('feelings', { static: true }) feelings:\n    | TemplateRef<any>\n    | undefined;\n  @ViewChild('delta', { static: true }) delta: TemplateRef<GtDeltaComponent> | undefined;\n  @ViewChild('deltaIndex', { static: true }) deltaIndex:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  loading$ = new BehaviorSubject(false);\n  config: TableConfig = {};\n  data: any = [];\n\n  ngOnInit(): void {\n    this.config = {\n      stickyHeaders: {\n        row: true,\n      },\n      mobileLayout: true,\n      rows: {\n        year: {\n          class: 'text-end',\n          header: false\n        },\n        value: {\n          class: 'text-end'\n        },\n        delta: {\n          header: 'Delta %',\n          templateRef: this.delta,\n          class: 'text-end'\n        },\n        deltaIndex: {\n          header: 'Since inception %',\n          templateRef: this.deltaIndex,\n          class: 'text-end'\n        },\n        feeling: {\n          templateRef: this.feelings,\n          class: 'text-end'\n        },\n      },\n    };\n    this.load();\n  }\n  simulateLoad(): void {\n    this.loading$.next(true);\n    // set loading state to false after 2 seconds\n    setTimeout(() => this.loading$.next(false), 2000);\n  }\n  empty(): void {\n    this.data = [];\n  }\n  load(): void {\n    this.data = [\n      {\n        year: '2017',\n        value: 50,\n        feeling: 'neutral'\n      },\n      {\n        year: '2018',\n        value: 75,\n        feeling: 'positive'\n      },\n      {\n        year: '2019',\n        value: 100,\n        feeling: 'thrilled'\n      },\n      {\n        year: '2020',\n        value: 250,\n        feeling: 'thrilled'\n      },\n      {\n        year: '2021',\n        value: 50,\n        feeling: 'negative'\n      }\n    ];\n  }\n}\n`,\n    language: 'typescript',\n  },\n  {\n    name: 'horizontal-table.component.html',\n    code: `<button class=\"btn btn-outline-primary\" (click)=\"simulateLoad()\">Simulate load</button>\n<button class=\"btn btn-outline-danger mx-3\" (click)=\"empty()\">Empty</button>\n<button class=\"btn btn-outline-primary\" (click)=\"load()\">Reset</button>\n<div class=\"overflow-auto\">\n  <angular-generic-table\n    [data]=\"data\"\n    [config]=\"config\"\n    [loading]=\"loading$\"\n  >\n    <div class=\"table-loading gt-skeleton-loader\"></div>\n    <div class=\"table-no-data alert alert-info mt-3\">Table is empty</div>\n  </angular-generic-table>\n</div>\n<ng-template #feelings let-row=\"row\" let-col=\"col\">\n  <div [ngSwitch]=\"row[col.key]\">\n    <ng-container *ngSwitchCase=\"'thrilled'\">😀</ng-container>\n    <ng-container *ngSwitchCase=\"'positive'\">🙂</ng-container>\n    <ng-container *ngSwitchCase=\"'neutral'\">😐</ng-container>\n    <ng-container *ngSwitchCase=\"'negative'\">😭</ng-container>\n  </div>\n</ng-template>\n<ng-template #delta let-data=\"data\" let-index=\"index\">\n  <gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>\n</ng-template>\n<ng-template #deltaIndex let-data=\"data\" let-index=\"index\">\n  <gt-delta [index]=\"index\" [baseIndex]=\"0\" [data]=\"data\"></gt-delta>\n</ng-template>`,\n    language: 'xml',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { HorizontalTableComponent } from './horizontal-table.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [HorizontalTableComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [HorizontalTableComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
            },
            {
                "name": "LAZY_LOADING_DOCS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/server-side-pagination/server-side-pagination.snippets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'server-side-pagination.component.html',\n    code: `<form [formGroup]=\"paginationForm\">\n  <div class=\"row gy-3\">\n    <div class=\"form-group col-12 col-sm-auto\">\n      <label for=\"search_input\">Search</label>\n      <input\n        id=\"search_input\"\n        formControlName=\"search\"\n        type=\"text\"\n        class=\"form-control\"\n      />\n    </div>\n  </div>\n</form>\n<div class=\"mx-n3 mx-sm-0 my-3 overflow-auto\">\n  <angular-generic-table\n    [data]=\"data$\"\n    [config]=\"tableConfig$\"\n    [search]=\"search$\"\n    [loading]=\"loading$\"\n    [pagingInfo]=\"paging$ | async\"\n    (pageChange)=\"onPageChange($event)\"\n    (columnSort)=\"onSortOrderChange($event)\"\n    [sortOrder]=\"sorting$ | async\"\n    #table\n  >\n    <div\n      class=\"table-loading gt-skeleton-loader\"\n      [style.--gt-skeleton-height]=\"\n        ((table.table$ | async)?.info?.pageSize ?? 0) * 41 - 11 + 'px'\n      \"\n    ></div>\n    <div class=\"table-no-data alert alert-info mt-3\">Table is empty</div>\n  </angular-generic-table>\n</div>\n<angular-generic-table-pagination [table]=\"table\">\n</angular-generic-table-pagination>`,\n    language: 'xml',\n  },\n  {\n    name: 'server-side-pagination.component.ts',\n    code: `import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { DatePipe, formatDate } from '@angular/common';\nimport {\n  GtPageChangeEvent,\n  GtSortEvent,\n  GtSortOrder,\n  TableConfig,\n} from '@angular-generic-table/core';\nimport { FormBuilder } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { pluck, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { GtPaginationInfo } from '../../../../../core/src/lib/models/gt-pagination';\nimport { sortOrderToParams } from '../../../../../core/src/lib/utilities/utilities';\n\ninterface LazyLoadingData {\n  birthday: string;\n  email: string;\n  favorite_color: string;\n  first_name: string;\n  gender: string;\n  id: number;\n  last_name: string;\n}\n\ninterface LazyLoadingResponse {\n  data: Array<LazyLoadingData>;\n  paging: GtPaginationInfo;\n  sorting: GtSortOrder<LazyLoadingData>;\n  filters: [\n    {\n      [Property in keyof LazyLoadingResponse]: { [key: string]: any };\n    }\n  ];\n  request: any;\n  error: any;\n}\n\n@Component({\n  templateUrl: './server-side-pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ServerSidePaginationComponent implements OnInit {\n  constructor(private fb: FormBuilder, private http: HttpClient) {}\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  @ViewChild('color', { static: true }) color: TemplateRef<any> | undefined;\n\n paginationForm = this.fb.group({\n    search: ['']\n  });\n requestParams$ = new BehaviorSubject({\n    page: 1,\n    page_size: 10,\n    sort_by: '+id',\n });\n search$ = this.paginationForm.controls.search.valueChanges.pipe(\n    shareReplay(1)\n );\n loading$ = new BehaviorSubject(true);\n\n request$ = this.requestParams$.pipe(\n    tap((_) => this.loading$.next(true)), // show loading indicator whenever requests are changed (remove to disable loading indicator)\n    switchMap((params) =>\n      this.http.get<LazyLoadingResponse>(\n        'https://private-a6da3-generictableapi.apiary-mock.com/data',\n        {\n          params,\n        }\n      )\n    ),\n    tap((_) => this.loading$.next(false)), // hide loading indicator\n    shareReplay(1)\n );\n\n data$: Observable<Array<LazyLoadingData>> = this.request$.pipe(\n    pluck('data'),\n    shareReplay(1)\n );\n\n paging$: Observable<GtPaginationInfo> = this.request$.pipe(\n    pluck('paging'),\n    shareReplay(1)\n );\n\n sorting$ = this.request$.pipe(\n    pluck('sorting'),\n    shareReplay(1)\n );\n\n onPageChange(event: GtPageChangeEvent): void {\n    const current = { ...this.requestParams$.value };\n    if (current.page != event.index + 1) {\n      this.requestParams$.next({\n        ...current,\n        page: event.index + 1,\n      });\n    }\n  }\n\n onSortOrderChange(event: GtSortEvent): void {\n   let sort_by = sortOrderToParams([...event.currentSortOrder]);\n   const current = { ...this.requestParams$.value };\n   if (current.sort_by !== sort_by) {\n     this.requestParams$.next({\n       ...current,\n       page: 1, // reset page to 1 when sorting changes\n       sort_by,\n     });\n   }\n }\n\n tableConfig$: ReplaySubject<TableConfig<LazyLoadingData>> = new ReplaySubject(\n   1\n );\n\n ngOnInit(): void {\n   this.tableConfig$.next({\n      class: 'table text-nowrap',\n      columns: {\n        id: {\n          sortable: true,\n        },\n        first_name: {},\n        last_name: {\n          sortable: true,\n        },\n        gender: {\n          sortable: true,\n        },\n        birthday: {\n          class: 'text-end justify-content-end',\n          search: (row, column) => formatDate(row[column], 'longDate', 'en'),\n          transform: {\n            pipe: DatePipe,\n            args: ['longDate'],\n          },\n        },\n        favorite_color: {\n          hidden: true,\n        },\n        email: {\n          hidden: true,\n        },\n      },\n      pagination: {\n        length: 10,\n      },\n    });\n  }\n}\n`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ServerSidePaginationComponent } from './server-side-pagination.component';\nimport { GenericTableCoreModule, GenericTablePaginationModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [ServerSidePaginationComponent],\n  imports: [\n    BrowserModule,\n    GenericTableCoreModule,\n    GenericTablePaginationModule,\n    ReactiveFormsModule,\n    HttpClientModule\n  ],\n  bootstrap: [ServerSidePaginationComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
            },
            {
                "name": "Mobile",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/mobile-layout/mobile-layout.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MobileLayoutComponent>",
                "defaultValue": "(\n  args: MobileLayoutComponent\n) => ({\n  props: args,\n  component: MobileLayoutComponent,\n})"
            },
            {
                "name": "MOBILE_LAYOUT_SNIPPETS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/mobile-layout/mobileLayout.snippets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'mobile-layout.component.ts',\n    code: `import {Component, Pipe, PipeTransform, TemplateRef, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {TableColumn, TableConfig, TableRow} from \"@angular-generic-table/core\";\nimport {BehaviorSubject, Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\n\n@Pipe({\n  name: 'genderPipe',\n})\nexport class GenderPipe implements PipeTransform {\n  transform(gender: 'male' | 'female'): string {\n  return gender === 'male' ? '👨' : '👩';\n  }\n}\n\n@Component({\n  selector: 'docs-mobile-layout',\n  template: \\`\n    <div class=\"d-flex justify-content-end mb-1 align-items-center\">\n      {{clicked}} <button class=\"btn btn-link d-sm-none \" (click)=\"toggleLayout()\">{{(mobileLayout$ | async)? 'Desktop ' : 'Mobile '}} layout</button>\n    </div>\n    <div [class.overflow-auto]=\"(mobileLayout$ | async) === false\">\n      <angular-generic-table [data]=\"data\" [config]=\"config$\"></angular-generic-table>\n    </div>\n    <ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n      <button class=\"btn btn-outline-primary btn-sm my-sm-n3 text-nowrap\" (click)=\"clickAction(row, col, index)\">Click me!</button>\n    </ng-template>\n  \\`,\n  styles: [\\`\n    .table th {\n      white-space: nowrap;\n    }\n  \\`],\n  encapsulation: ViewEncapsulation.None\n})\nexport class MobileLayoutComponent {\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  clicked = '';\n\n  mobileLayout$ = new BehaviorSubject(true);\n  data = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n    },\n  ];\n  config$: Observable<TableConfig> = this.mobileLayout$.pipe(\n    map(mobileLayout => ({\n      mobileLayout,\n      columns: {\n        firstName: {\n          mobileHeader: true,\n          sortable: true\n        },\n        lastName: {\n          mobileHeader: true,\n          sortable: true\n        },\n        gender: {\n          mobileHeader: true,\n          transform: {\n            pipe: GenderPipe\n          }\n        },\n        favoriteFood: {\n          mobileHeader: true\n        },\n        action: {\n          mobileHeader: false,\n          header: false,\n          templateRef: this.actions,\n        },\n      },\n    }))\n  );\n\n  toggleLayout = (): void => {\n    this.mobileLayout$.next(!this.mobileLayout$.getValue());\n  }\n  clickAction(row: TableRow, column: { key: string; value: TableColumn }, index: number): void {\n    console.log('clicked row:', row, 'col:', column);\n    this.clicked = \\`Clicked row number: \\${index}\\`;\n  }\n}`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { MobileLayoutComponent } from './mobile-layout.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [MobileLayoutComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [MobileLayoutComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
            },
            {
                "name": "Nested",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/nested-data/nested-data.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<NestedDataComponent>",
                "defaultValue": "(\n  args: NestedDataComponent\n) => ({\n  props: args,\n  component: NestedDataComponent,\n})"
            },
            {
                "name": "NESTED_SNIPPETS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/nested-data/nested.snippets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'nested-data.component.ts',\n    code: `import {Component, OnInit, TemplateRef, ViewChild} from '@angular/core';\nimport {TableConfig, TableRows} from \"@angular-generic-table/core\";\n\ninterface NestedData {\n  name: {\n    first: string;\n    last: string;\n  };\n  data: {\n    details?: {\n      gender: 'male' | 'female';\n      favoriteFood: 'Pasta' | 'Pizza';\n    };\n  };\n}\n\ninterface Data {\n  firstName: string;\n  lastName: string;\n  gender: 'male' | 'female';\n  favoriteFood: 'Pasta' | 'Pizza';\n  missing: string;\n}\n@Component({\n  selector: 'nested-data',\n  template: \\`\n    <div class=\"row gy-3\">\n      <div class=\"col col-sm-auto\">\n        <button class=\"btn btn-outline-primary mb-3\" (click)=\"loadData()\">\n          Load other data\n        </button>\n      </div>\n      <div class=\"col col-sm-auto\">\n        <button class=\"btn btn-outline-primary mb-3\" (click)=\"resetData()\">\n          Reset\n        </button>\n      </div>\n    </div>\n    <angular-generic-table [data]=\"data\" [config]=\"config\"></angular-generic-table>\n    <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n    <ng-template #gender let-row=\"row\" let-col=\"col\">\n      <div [ngSwitch]=\"row[col.key]\">\n        <ng-container *ngSwitchCase=\"'male'\">♂️</ng-container>\n        <ng-container *ngSwitchCase=\"'female'\">♀️</ng-container>\n      </div>\n    </ng-template>\n  \\`,\n  styles: [],\n})\nexport class NestedDataComponent implements OnInit {\n  @ViewChild('gender', { static: true }) gender: TemplateRef<any> | undefined;\n\n  config: TableConfig<Data> = {};\n  data: Array<NestedData> = [];\n  ngOnInit(): void {\n    this.resetData();\n    this.config = {\n      columns: {\n        firstName: {\n          sortable: true,\n          mapTo: { path: 'name.first' },\n        },\n        lastName: {\n          sortable: true,\n          mapTo: { path: 'name.last' },\n        },\n        gender: {\n          mapTo: { path: 'data.details.gender' },\n          templateRef: this.gender,\n        },\n        favoriteFood: {\n          sortable: true,\n          mapTo: { path: 'data.details.favoriteFood', missingValue: 'n/a' },\n        },\n        missing: {\n          mapTo: { path: 'data.missingKey.noMatch', missingValue: 'n/a' },\n        },\n      },\n    };\n  }\n\n  resetData() {\n    this.data = [\n      {\n        name: {\n          first: 'Peter',\n          last: 'Parker',\n        },\n        data: {\n          details: {\n            gender: 'male',\n            favoriteFood: 'Pasta',\n          },\n        },\n      },\n      {\n        name: {\n          first: 'Mary Jane',\n          last: 'Watson',\n        },\n        data: {\n          details: {\n            gender: 'female',\n            favoriteFood: 'Pizza',\n          },\n        },\n      },\n    ];\n  }\n\n  loadData(): void {\n    this.data = [\n      {\n        name: {\n          first: 'John',\n          last: 'Doe',\n        },\n        data: {\n          details: {\n            gender: 'male',\n            favoriteFood: 'Pasta',\n          },\n        },\n      },\n      {\n        name: {\n          first: 'Jane',\n          last: 'Doe',\n        },\n        data: {\n          details: {\n            gender: 'female',\n            favoriteFood: 'Pizza',\n          },\n        },\n      },\n      {\n        name: {\n          first: 'Foo',\n          last: 'Bar',\n        },\n        data: {},\n      },\n    ];\n  }\n}`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { NestedDataComponent } from './nested-data.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [NestedDataComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [NestedDataComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
            },
            {
                "name": "Pagination",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/pagination/pagination.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PaginationComponent>",
                "defaultValue": "(\n  args: PaginationComponent\n) => ({\n  props: args,\n  component: PaginationComponent,\n})"
            },
            {
                "name": "Pagination",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/server-side-pagination/server-side-pagination.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PaginationComponent>",
                "defaultValue": "(\n  args: PaginationComponent\n) => ({\n  props: args,\n  component: PaginationComponent,\n})"
            },
            {
                "name": "parseSortOrderParams",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/core/src/lib/utilities/utilities.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(sortParams: string): GtSortOrder => {\n  const sortParamsArray = sortParams.split(',');\n  return sortParamsArray.map((sortParam) => {\n    const [key, order] = sortParam.split(':');\n    return {\n      key: key.replace(/^[+-]/, ''),\n      order: order === 'desc' ? 'desc' : 'asc',\n    };\n  });\n}",
                "rawdescription": "parseSortOrderParams",
                "description": "<p>parseSortOrderParams</p>\n"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/core/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "ROW_HOVER_CLICK_SNIPPETS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/row-hover-click/row-hower-click.snippets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'row-hover-click.component.ts',\n    code: `import { Component } from '@angular/core';\nimport { GtRowClickEvent, GtRowHoverEvent } from '@angular-generic-table/core';\n\n\n@Component({\n  selector: 'row-hover-click-table',\n  template: '<div class=\"overflow-auto\">\n      <button class=\"btn btn-secondary me-3\" (click)=\"tableRef.hoverRow(1)\">\n        Set hover state to second row\n      </button>\n      <button class=\"btn btn-secondary\" (click)=\"tableRef.hoverRow(null)\">\n        Remove hover state\n      </button>\n      <angular-generic-table\n        [data]=\"data\"\n        [config]=\"config\"\n        (rowClick)=\"onRowClick($event)\"\n        (rowHover)=\"onRowHover($event)\"\n        #tableRef\n      ></angular-generic-table>\n      {{ clicked }}\n    </div>',\n  styles: [\n    \\`\n      :host ::ng-deep .gt-hover {\n        background-color: var(--bs-highlight-bg);\n      }\n    \\`,\n  ],\n})\nexport class RowHoverClickComponent {\n  clicked = '';\n  data = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n    },\n  ];\n  config = {\n    columns: {\n      firstName: {},\n      lastName: {},\n      gender: {},\n      favoriteFood: {},\n    },\n    rowClick: true,\n    rowHover: true,\n  };\n\n  onRowClick(event: GtRowClickEvent) {\n    console.log('row clicked', event);\n    this.clicked = \\`clicked row number: \\${event.index}\\`;\n  }\n  onRowHover(event: GtRowHoverEvent) {\n    console.log('row hovered', event);\n  }\n`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { RowHoverClickTableComponent } from './events-table.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [RowHoverClickTableComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [RowHoverClickTableComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
            },
            {
                "name": "RowHoverClick",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/row-hover-click/row-hover-click.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<RowHoverClickComponent>",
                "defaultValue": "(\n  args: RowHoverClickComponent\n) => ({\n  props: args,\n  component: RowHoverClickComponent,\n})"
            },
            {
                "name": "search",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/core/src/lib/utilities/utilities.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TableRow[]"
            },
            {
                "name": "Simple",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/simple/simple.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SimpleComponent>",
                "defaultValue": "(args: SimpleComponent) => ({\n  props: args,\n  component: SimpleComponent,\n})"
            },
            {
                "name": "SIMPLE_SNIPPETS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/footer/simple.snippets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'footer-table.component.ts',\n    code: `import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { TableConfig, TableRow } from '@angular-generic-table/core';\nimport { DecimalPipe } from '@angular/common';\n\n@Component({\n  template: \\`\n    <div class=\"overflow-auto\">\n      <angular-generic-table [data]=\"data\" [config]=\"config\">\n      </angular-generic-table>\n    </div>\n    <ng-template #heightTmplRef let-row=\"row\" let-col=\"col\">\n      <ng-container *ngIf=\"row[col.key || col] as height\"\n        >{{ height }} m\n      </ng-container>\n    </ng-template>\n  \\`,\n})\nexport class FooterComponent implements OnInit {\n  @ViewChild('heightTmplRef', { static: true }) heightTmplRef:\n    | TemplateRef<any>\n    | undefined;\n  data = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n      age: 27,\n      weight: 85.457,\n      height: 1.85,\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n      age: 25,\n      weight: 60.123,\n      height: 1.65,\n    },\n  ];\n  config: TableConfig = {};\n  ngOnInit() {\n    this.config = {\n      columns: {\n        firstName: {},\n        lastName: {},\n        gender: {},\n        favoriteFood: {\n          class: 'text-end flex-end',\n        },\n        age: {\n          class: 'text-end',\n        },\n        weight: {\n          class: 'text-end',\n          transform: {\n            pipe: DecimalPipe,\n            args: ['1.0-2'],\n          },\n        },\n        height: {\n          class: 'text-end',\n          templateRef: this.heightTmplRef,\n        },\n      },\n      footer: {\n        headers: {\n          sum: 'Total',\n          numberOfWomen: 'Number of women',\n          numberOfMen: 'Number of men',\n          min: true,\n          max: true,\n          avg: true,\n          count: true,\n          static: true,\n          first: true,\n        },\n        rowOrder: [\n          'first',\n          'numberOfWomen',\n          'numberOfMen',\n          'min',\n          'max',\n          'sum',\n          'avg',\n          'count',\n        ],\n        columns: {\n          firstName: {},\n          lastName: {\n            static: 'n/a',\n          },\n          gender: {\n            numberOfWomen: (data: Array<TableRow>, key) => {\n              let count = 0;\n              for (let i = 0; i < data.length; i++) {\n                if (data[i][key] === 'female') {\n                  count++;\n                }\n              }\n              return count;\n            },\n            numberOfMen: (data: Array<TableRow>, key) => {\n              let count = 0;\n              for (let i = 0; i < data.length; i++) {\n                if (data[i][key] === 'male') {\n                  count++;\n                }\n              }\n              return count;\n            },\n          },\n          favoriteFood: {\n            first: (data: Array<TableRow>, key) => data[0][key],\n          },\n          age: {\n            sum: true,\n            avg: true,\n            count: true,\n            max: true,\n            min: true,\n          },\n          weight: {\n            sum: true,\n            avg: true,\n            min: true,\n          },\n          height: {\n            avg: true,\n            min: true,\n            max: true,\n          },\n        },\n      },\n    };\n  }\n\n}`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { BasicTableComponent } from './basic-table.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [BasicTableComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [BasicTableComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
            },
            {
                "name": "SIMPLE_SNIPPETS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/sorting/sorting.snippets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'sorting-table.component.ts',\n    code: `import { Component } from '@angular/core';\nimport { TableConfig } from '@angular-generic-table/core';\n\ninterface SortingData {\n  firstName: string;\n  lastName: string;\n  gender: 'male' | 'female';\n  favoriteFood: string;\n  birthdate: number;\n}\n\n@Component({\n  template: '<div class=\"overflow-auto\">\n      <angular-generic-table\n        #table\n        [data]=\"data\"\n        [config]=\"config\"\n        [(sortOrder)]=\"sortOrder\"\n        (columnSort)=\"logSortChange($event)\"\n      ></angular-generic-table>\n    </div>\n    <div class=\"row mb-3 gy-3\">\n      <div class=\"col-12 col-sm-auto\">\n        <button\n          class=\"btn btn-primary w-100\"\n          (click)=\"table.sortByKey('firstName', $event)\"\n        >\n          Sort on first name\n        </button>\n      </div>\n      <div class=\"col-12 col-sm-auto\">\n        <button class=\"btn btn-primary w-100\" (click)=\"resetSort()\">\n          Reset sorting\n        </button>\n      </div>\n    </div>\n    <strong>Current sort order</strong>\n    <p>\n      <code>\n        {{ sortOrder | json }}\n      </code>\n    </p>'\n})\nexport class SimpleComponent {\n  initialSortOrder: GtSortOrder<SortingData> = [\n    { key: 'birthdate', order: 'asc' },\n    { key: 'gender', order: 'asc' },\n    { key: 'firstName', order: 'desc' },\n  ];\n  sortOrder: GtSortOrder<SortingData> = this.initialSortOrder;\n  data: Array<SortingData> = [\n    {\n      firstName: 'John',\n      lastName: 'Doe',\n      gender: 'male',\n      favoriteFood: 'pizza',\n      birthdate: 946684800000,\n    },\n    {\n      firstName: 'Jane',\n      lastName: 'Smith',\n      gender: 'female',\n      favoriteFood: 'sushi',\n      birthdate: 803404800000,\n    },\n    {\n      firstName: 'Bob',\n      lastName: 'Johnson',\n      gender: 'male',\n      favoriteFood: 'burgers',\n      birthdate: 649345600000,\n    },\n    {\n      firstName: 'Emily',\n      lastName: 'Williams',\n      gender: 'female',\n      favoriteFood: 'chicken',\n      birthdate: 946684800000,\n    },\n    {\n      firstName: 'Michael',\n      lastName: 'Jones',\n      gender: 'male',\n      favoriteFood: 'steak',\n      birthdate: 803404800000,\n    },\n    {\n      firstName: 'Matthew',\n      lastName: 'Brown',\n      gender: 'male',\n      favoriteFood: 'seafood',\n      birthdate: 649345600000,\n    },\n    {\n      firstName: 'Jessica',\n      lastName: 'Miller',\n      gender: 'female',\n      favoriteFood: 'salad',\n      birthdate: 946684800000,\n    },\n    {\n      firstName: 'Jacob',\n      lastName: 'Moore',\n      gender: 'male',\n      favoriteFood: 'pasta',\n      birthdate: 803404800000,\n    },\n    {\n      firstName: 'Nicholas',\n      lastName: 'Taylor',\n      gender: 'male',\n      favoriteFood: 'soup',\n      birthdate: 649345600000,\n    },\n    {\n      firstName: 'Ashley',\n      lastName: 'Anderson',\n      gender: 'female',\n      favoriteFood: 'tacos',\n      birthdate: 946684800000,\n    },\n    {\n      firstName: 'Brandon',\n      lastName: 'Thomas',\n      gender: 'male',\n      favoriteFood: 'nachos',\n      birthdate: 803404800000,\n    },\n  ];\n  config: TableConfig<SortingData> = {\n    columns: {\n      firstName: {\n        sortable: true,\n      },\n      lastName: {\n        sortable: true,\n      },\n      gender: {\n        sortable: true,\n      },\n      favoriteFood: {\n        sortable: true,\n      },\n      birthdate: {\n        sortable: true,\n        transform: {\n          pipe: DatePipe,\n        },\n      },\n    },\n  };\n\n  logSortChange(sortEvent: GtSortEvent<SortingData>) {\n    console.log(sortEvent);\n  }\n\n  resetSort() {\n    this.sortOrder = this.initialSortOrder;\n  }\n}\n`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { SortingTableComponent } from './sorting-table.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [SortingTableComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [SortingTableComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
            },
            {
                "name": "SIMPLE_SNIPPETS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/simple/simple.snippets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'basic-table.component.ts',\n    code: `import { Component } from '@angular/core';\nimport { TableConfig } from '@angular-generic-table/core';\n\ninterface BasicData {\n  firstName: string;\n  lastName: string;\n  gender: 'male' | 'female';\n  favoriteFood: string;\n}\n\n@Component({\n  template: '<angular-generic-table [data]=\"data\" [config]=\"config\"></angular-generic-table>'\n})\nexport class SimpleComponent {\n  data: Array<BasicData> = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n    },\n  ];\n  config: TableConfig<BasicData> = {\n    columns: {\n      firstName: {},\n      lastName: {},\n      gender: {},\n      favoriteFood: {},\n    },\n  };\n`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { BasicTableComponent } from './basic-table.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [BasicTableComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [BasicTableComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
            },
            {
                "name": "Sorting",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/sorting/sorting.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SortingComponent>",
                "defaultValue": "(args: SortingComponent) => ({\n  props: args,\n  component: SortingComponent,\n})"
            },
            {
                "name": "sortOnMultipleKeys",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/core/src/lib/utilities/utilities.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  keys: GtSortOrder\n): ((a: TableRow, b: TableRow) => number) => {\n  const order = keys.map((key) => (key.order === 'desc' ? -1 : 1));\n  return (a, b) => {\n    for (let i = 0; i < keys.length; i++) {\n      const o = keys[i].key;\n      if (a[o] > b[o]) return order[i];\n      if (a[o] < b[o]) return -order[i];\n    }\n    return 0;\n  };\n}",
                "rawdescription": "sortOnMultipleKeys",
                "description": "<p>sortOnMultipleKeys</p>\n"
            },
            {
                "name": "sortOrderConfigToParam",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/core/src/lib/utilities/utilities.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\n  sortConfig: GtSortEvent | GtSortConfig\n): string => {\n  const order = sortConfig.order === 'desc' ? '-' : '+';\n  return `${order}${sortConfig.key}`;\n}",
                "rawdescription": "sortOrderConfigToParam",
                "description": "<p>sortOrderConfigToParam</p>\n"
            },
            {
                "name": "sortOrderToParams",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/core/src/lib/utilities/utilities.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(sortOrder: GtSortOrder): string => {\n  return sortOrder\n    .map((sortConfig) => sortOrderConfigToParam(sortConfig))\n    .join(',');\n}",
                "rawdescription": "sortOrderToParams",
                "description": "<p>sortOrderToParams</p>\n"
            },
            {
                "name": "Tabs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/components/tabs/tabs.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TabsComponent>",
                "defaultValue": "(args: TabsComponent) => ({\n  props: args,\n  component: TabsComponent,\n})"
            },
            {
                "name": "Transpose",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/transpose/transpose.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TransposeComponent>",
                "defaultValue": "(\n  args: TransposeComponent\n) => ({\n  props: args,\n  component: TransposeComponent,\n})"
            },
            {
                "name": "TRANSPOSE_SNIPPETS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/transpose/transpose.snippets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'transpose.component.ts',\n    code: `import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { TableConfig, GtDeltaComponent } from '@angular-generic-table/core';\nimport { FormBuilder } from '@angular/forms';\nimport { withLatestFrom } from 'rxjs/operators';\n\ninterface RawData {\n  year: string;\n  value: number;\n}\ninterface YearData extends RawData {\n  delta: number;\n  deltaIndex: number;\n  combined: number;\n  deltaAbsolute: number;\n}\n@Component({\n  templateUrl: './transpose.component.html',\n  styles: []\n})\nexport class TransposeComponent implements OnInit {\n  @ViewChild('delta', { static: true }) delta:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  @ViewChild('deltaAbsolute', { static: true }) deltaAbsolute:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  @ViewChild('deltaIndex', { static: true }) deltaIndex:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  @ViewChild('combined', { static: true }) combined:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  loading$ = new BehaviorSubject(false);\n  reactiveForm = this.fb.group({\n    length: [10],\n    search: [''],\n  });\n  search$ = this.reactiveForm.get('search')?.valueChanges as Observable<string>;\n  tableConfig$: BehaviorSubject<TableConfig<YearData>> = new BehaviorSubject<\n    TableConfig<YearData>\n  >({});\n  data: Array<RawData> = [];\n\n  constructor(private fb: UntypedFormBuilder) {}\n\n  ngOnInit(): void {\n    this.transpose();\n    this.load();\n    this.reactiveForm\n      .get('length')\n      ?.valueChanges.pipe(withLatestFrom(this.tableConfig$))\n      .subscribe(([length, config]) => {\n        length = +length;\n        this.tableConfig$.next({\n          ...config,\n          pagination: { ...config.pagination, length },\n        });\n      });\n  }\n\n  simulateLoad(): void {\n    this.loading$.next(true);\n    // set loading state to false after 2 seconds\n    setTimeout(() => this.loading$.next(false), 2000);\n  }\n  empty(): void {\n    this.data = [];\n  }\n  load(): void {\n    this.data = [\n      {\n        year: '2010',\n        value: 15,\n      },\n      {\n        year: '2011',\n        value: 30,\n      },\n      {\n        year: '2012',\n        value: 25,\n      },\n      {\n        year: '2013',\n        value: 0,\n      },\n      {\n        year: '2014',\n        value: 40,\n      },\n      {\n        year: '2015',\n        value: 0,\n      },\n      {\n        year: '2016',\n        value: -5,\n      },\n      {\n        year: '2018',\n        value: 75,\n      },\n      {\n        year: '2019',\n        value: 100,\n      },\n      {\n        year: '2020',\n        value: 250,\n      },\n      {\n        year: '2021',\n        value: 50,\n      },\n      {\n        year: '2022',\n        value: 60,\n      },\n    ];\n  }\n  transpose(): void {\n    if (this.tableConfig$.value.columns) {\n      this.tableConfig$.next({\n        stickyHeaders: {\n          row: true,\n          column: true,\n        },\n        rows: {\n          year: {\n            sortable: true,\n            header: false,\n            class: 'text-end',\n          },\n          value: {\n            class: 'text-end',\n          },\n          delta: {\n            header: 'Delta %',\n            templateRef: this.delta,\n            class: 'text-end',\n          },\n          deltaIndex: {\n            header: 'Since inception %',\n            templateRef: this.deltaIndex,\n            class: 'text-end',\n          },\n          deltaAbsolute: {\n            header: 'Delta',\n            templateRef: this.deltaAbsolute,\n            class: 'text-end',\n          },\n          combined: {\n            header: 'Value with change',\n            templateRef: this.combined,\n            class: 'text-end text-nowrap',\n          },\n        },\n      });\n    } else {\n      this.tableConfig$.next({\n        stickyHeaders: {\n          row: true,\n          column: true,\n        },\n        columns: {\n          year: {\n            sortable: true,\n          },\n          value: {\n            class: 'text-end',\n          },\n          delta: {\n            header: 'Delta %',\n            templateRef: this.delta,\n            class: 'text-end',\n          },\n          deltaIndex: {\n            header: 'Since inception %',\n            templateRef: this.deltaIndex,\n            class: 'text-end',\n          },\n          deltaAbsolute: {\n            header: 'Delta',\n            templateRef: this.deltaAbsolute,\n            class: 'text-end',\n          },\n          combined: {\n            header: 'Value with change',\n            templateRef: this.combined,\n            class: 'text-end text-nowrap',\n          },\n        },\n        pagination: { length: this.reactiveForm.get('length')?.value },\n      });\n    }\n  }\n}\n`,\n    language: 'typescript',\n  },\n  {\n    name: 'transpose.component.html',\n    code: `<form [formGroup]=\"reactiveForm\">\n  <div class=\"row gy-3 gx-3 align-items-end mb-3\">\n    <div class=\"form-group col-6 col-sm-auto\">\n      <label for=\"length_input\">Number of rows</label>\n      <input\n        id=\"length_input\"\n        formControlName=\"length\"\n        type=\"number\"\n        class=\"form-control\"\n      />\n    </div>\n    <div class=\"form-group col-6 col-sm-auto\">\n      <label for=\"search_input\">Search</label>\n      <input\n        id=\"search_input\"\n        formControlName=\"search\"\n        type=\"text\"\n        class=\"form-control\"\n      />\n    </div>\n    <div class=\"col-auto\">\n      <button\n        class=\"btn btn-outline-primary w-100\"\n        (click)=\"simulateLoad()\"\n      >\n        Simulate load\n      </button>\n    </div>\n    <div class=\"col col-sm-auto\">\n      <button class=\"btn btn-outline-danger w-100\" (click)=\"empty()\">\n        Empty\n      </button>\n    </div>\n    <div class=\"col col-sm-auto\">\n      <button class=\"btn btn-outline-primary w-100\" (click)=\"load()\">\n        Reset\n      </button>\n    </div>\n    <div class=\"col col-sm-auto\">\n      <button class=\"btn btn-outline-primary w-100\" (click)=\"transpose()\">\n        Transpose\n      </button>\n    </div>\n  </div>\n  <div class=\"overflow-auto\">\n    <angular-generic-table\n      #table\n      [data]=\"data\"\n      [config]=\"tableConfig$\"\n      [loading]=\"loading$\"\n      [search]=\"search$\"\n    >\n      <div class=\"table-loading gt-skeleton-loader\"></div>\n      <div class=\"table-no-data alert alert-info mt-3\">Table is empty</div>\n    </angular-generic-table>\n  </div>\n  <angular-generic-table-pagination [table]=\"table\">\n  </angular-generic-table-pagination>\n  <ng-template #delta let-index=\"index\" let-data=\"data\">\n    <gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>\n  </ng-template>\n  <ng-template #deltaAbsolute let-index=\"index\" let-data=\"data\">\n    <gt-delta\n      [index]=\"index\"\n      [data]=\"data\"\n      [deltaTemplate]=\"deltaTemplate\"\n    ></gt-delta>\n  </ng-template>\n  <ng-template #deltaIndex let-index=\"index\" let-data=\"data\">\n    <gt-delta [index]=\"index\" [data]=\"data\" [baseIndex]=\"0\"></gt-delta>\n  </ng-template>\n  <ng-template\n    #combined\n    let-index=\"index\"\n    let-data=\"data\"\n    let-row=\"row\"\n    let-col=\"col\"\n  >\n    {{ row.value }}\n    <ng-container *ngIf=\"index > 0\">\n      <gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>\n    </ng-container>\n  </ng-template>\n  <ng-template #deltaTemplate let-delta=\"delta\">\n    <span>{{ delta.absolute }}</span></ng-template\n  >\n  <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n</form>`,\n    language: 'xml',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { HorizontalTableComponent } from './horizontal-table.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [HorizontalTableComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [HorizontalTableComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "FooterCalculation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"sum\" | \"avg\" | \"count\" | \"max\" | \"min\"",
                "file": "projects/core/src/lib/models/table-config.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "GtOrder",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"asc\" | \"desc\"",
                "file": "projects/core/src/lib/models/table-sort.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "GtSortOrder",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Array<GtSortConfig<R>>",
                "file": "projects/core/src/lib/models/table-sort.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "SearchFunction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/core/src/lib/models/table-column.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/docs/src/app/app.component.ts": [
                {
                    "name": "Advanced",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/app.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<AppComponent>",
                    "defaultValue": "(args: AppComponent) => ({\n  props: args,\n  component: AppComponent,\n})"
                }
            ],
            "projects/docs/src/app/examples/advanced/advanced.component.ts": [
                {
                    "name": "Advanced",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/advanced/advanced.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<AdvancedComponent>",
                    "defaultValue": "(\n  args: AdvancedComponent\n) => ({\n  props: args,\n  component: AdvancedComponent,\n})"
                }
            ],
            "projects/docs/src/app/examples/advanced/advanced.snippets.ts": [
                {
                    "name": "ADVANCED_DOCS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/advanced/advanced.snippets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'advanced.component.html',\n    code: `<div class=\"row gx-2 gy-3 mb-3\">\n  <div class=\"col-12 col-sm-auto\">\n    <button class=\"btn btn-primary w-100\" (click)=\"addData()\">Add random data</button>\n  </div>\n  <div class=\"col-12 col-sm-auto\">\n    <button class=\"btn btn-danger w-100\" (click)=\"removeData()\">Remove data</button>\n  </div>\n  <div class=\"col-12 col-sm-auto\">\n    <button class=\"btn btn-secondary w-100\" (click)=\"simulateLoad()\">Load</button>\n  </div>\n</div>\n<form [formGroup]=\"paginationForm\">\n  <div class=\"row\">\n    <div class=\"form-group col-12 col-sm-auto\">\n      <label for=\"length_input\">Length</label>\n      <input id=\"length_input\" formControlName=\"length\" type=\"number\" class=\"form-control\">\n    </div>\n    <div class=\"form-group col-12 col-sm-auto\">\n      <label for=\"search_input\">Search</label>\n      <input id=\"search_input\" formControlName=\"search\" type=\"text\" class=\"form-control\">\n    </div>\n  </div>\n</form>\n<div class=\"mx-n3 mx-sm-0\">\n  <angular-generic-table [data]=\"data$\" [config]=\"tableConfig$\" [page]=\"(currentPage$ | async)!\" [search]=\"search$\" [loading]=\"loading$\" #table>\n    <div class=\"table-loading gt-skeleton-loader\"></div>\n    <div class=\"table-no-data alert alert-info mt-3\">\n      Table is empty\n    </div>\n  </angular-generic-table>\n</div>\n<div class=\"row justify-content-between justify-content-sm-center align-items-center mt-3\" *ngIf=\"{current: (currentPage$ | async) || 0,total: (table.table$ | async)?.info?.pageTotal || 1\n} as pagination\">\n  <div class=\"col-auto\">\n    <button class=\"btn btn-primary\" (click)=\"prev()\" [disabled]=\"pagination.current === 0\">Prev</button>\n  </div>\n  <div class=\"col-auto\">\n    <button class=\"btn btn-primary\" (click)=\"next()\" [disabled]=\"pagination.total -1 === pagination.current\">Next</button>\n  </div>\n  <div class=\"col-auto\">Current page: {{pagination.current +1}}</div>\n  <div class=\"col-auto\">Total pages: {{pagination.total}}</div>\n  <div class=\"col-auto\">\n    Records: {{(data$ | async).length}}\n  </div>\n  <div class=\"col-auto\">\n    {{clicked}}\n  </div>\n</div>\n<ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n  <button\n    *ngIf=\"index !== undefined\"\n    class=\"btn btn-outline-primary btn-sm\"\n    (click)=\"clickAction(row, col, index)\"\n  >\n    Click me!\n  </button>\n</ng-template>\n<ng-template #color let-row=\"row\" let-col=\"col\">\n  <div\n    [style.background]=\"row[col.key]\"\n    style=\"width: 1.5rem; height: 1.5rem; border-radius: 50%\"\n  ></div>\n</ng-template>`,\n    language: 'xml',\n  },\n  {\n    name: 'advanced.component.ts',\n    code: `import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { FormBuilder } from '@angular/forms';\nimport { TableColumn, TableConfig, TableRow } from '@angular-generic-table/core';\nimport { withLatestFrom } from 'rxjs/operators';\n\n@Component({\n  templateUrl: './advanced.component.html',\n})\nexport class AdvancedComponent implements OnInit {\n  get currentPage$(): Observable<number> {\n    return this._currentPage$.asObservable();\n  }\n\n  set currentPage(value: number) {\n    this._currentPage$.next(value);\n  }\n  constructor(private fb: FormBuilder) {}\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  @ViewChild('color', { static: true }) color: TemplateRef<any> | undefined;\n  paginationForm = this.fb.group({\n    length: [10],\n    search: [''],\n  });\n  search$ = this.paginationForm.get('search')?.valueChanges as Observable<string>;\n  loading$ = new BehaviorSubject(true);\n  data$: BehaviorSubject<any> = new BehaviorSubject([\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteColor: '#26BFAF',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteColor: '#0f0',\n      favoriteFood: 'Pizza',\n    },\n  ]);\n\n  private _currentPage$ = new BehaviorSubject(0);\n\n  clicked: string = '';\n  maleFirstNames = ['Peter', 'Clark', 'Ruben', 'John', 'Jack', 'Roscoe'];\n  femaleFirstNames = ['Mary Jane', 'Kim', 'Sarah', 'Michelle', 'Ann'];\n  lastNames = ['Andersson', 'Smith', 'Parker', 'Kent', 'Rogers', 'Lane', 'Jackson'];\n  foods = ['Pizza', 'Pasta', 'Hamburger', 'Pancakes', 'Tacos', 'Lasagna', 'Meatloaf'];\n  colors = ['#33d60b', '#dcafff', '#3fc9ff', '#ff1600', '#5238b1', '#fff'];\n\n  tableConfig$: ReplaySubject<TableConfig> = new ReplaySubject(1);\n\n  addData(): void {\n    this.data$.next([...this.data$.getValue(), this.randomRecord()]);\n  }\n\n  removeData(): void {\n    this.data$.next([]);\n  }\n\n  simulateLoad(): void {\n    this.loading$.next(true);\n    // set loading state to false after 2 seconds\n    setTimeout(() => this.loading$.next(false), 2000);\n  }\n\n  clickAction(row: TableRow, column: { key: string; value: TableColumn }, index: number): void {\n    console.log('clicked row:', row, 'col:', column);\n    this.clicked = \\`clicked row number: \\${index}\\`;\n  }\n\n  randomRecord(): TableRow {\n    const random = Math.floor(Math.random() * 2);\n    const newRecord = {\n      firstName: random\n        ? this.maleFirstNames[Math.floor(Math.random() * this.maleFirstNames.length)]\n        : this.femaleFirstNames[Math.floor(Math.random() * this.femaleFirstNames.length)],\n      lastName: this.lastNames[Math.floor(Math.random() * this.lastNames.length)],\n      gender: random ? 'male' : 'female',\n      favoriteColor: this.colors[Math.floor(Math.random() * this.colors.length)],\n      favoriteFood: this.foods[Math.floor(Math.random() * this.foods.length)],\n    };\n    console.log('added new random record:', newRecord);\n\n    return newRecord;\n  }\n\n  next = () => {\n    this.currentPage = this._currentPage$.value + 1;\n  };\n  prev = () => {\n    this.currentPage = this._currentPage$.value - 1;\n  };\n\n  ngOnInit(): void {\n    this.simulateLoad();\n    this.paginationForm\n      .get('length')\n      ?.valueChanges.pipe(withLatestFrom(this.tableConfig$))\n      .subscribe(([length, config]) => {\n        length = +length;\n        this.tableConfig$.next({\n          ...config,\n          pagination: { ...config.pagination, length },\n        });\n      });\n    this.tableConfig$.next({\n      class: 'table table-mobile text-nowrap mb-0',\n      columns: {\n        firstName: {\n          header: 'First name',\n          mobileHeader: true,\n          sortable: true,\n          order: 0,\n        },\n        lastName: {\n          header: 'Last name',\n          mobileHeader: true,\n          hidden: false,\n          sortable: true,\n        },\n        gender: {\n          mobileHeader: 'Sex',\n          sortable: true,\n          order: 1,\n        },\n        favoriteColor: {\n          header: 'Favorite color',\n          mobileHeader: true,\n          templateRef: this.color,\n          sortable: false,\n          order: 2,\n          search: false,\n          class: 'custom-class',\n        },\n        favoriteFood: {\n          mobileHeader: true,\n          header: 'Favorite food',\n          hidden: false,\n          sortable: true,\n          order: 0,\n        },\n        action: {\n          mobileHeader: false,\n          header: false,\n          templateRef: this.actions,\n          order: 6,\n        },\n      },\n      pagination: {\n        length: this.paginationForm.get('length')?.value || 0,\n      },\n      footer: {\n        columns: {\n          gender: {\n            count: (data, key) => {\n              let men = 0;\n              let women = 0;\n              for (let i = 0; i < data.length; i++) {\n                if (data[i][key] === 'female') {\n                  women++;\n                } else if (data[i][key] === 'male') {\n                  men++;\n                }\n              }\n              return \\`♂ \\${men} ♀ \\${women}\\`;\n            },\n          },\n          favoriteColor: {},\n          action: { count: (data, key) => \\`Total: \\${data.length}\\` },\n        },\n      },\n    });\n  }\n}`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { AdvancedComponent } from './advanced.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [AdvancedComponent],\n  imports: [BrowserModule, ReactiveFormsModule, GenericTableCoreModule],\n  bootstrap: [AdvancedComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
                }
            ],
            "projects/docs/src/app/examples/pagination/pagination.snippets.ts": [
                {
                    "name": "ADVANCED_DOCS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/pagination/pagination.snippets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'pagination.component.html',\n    code: `<form [formGroup]=\"paginationForm\">\n  <div class=\"row gy-3\">\n    <div class=\"form-group col-12 col-sm-auto\">\n      <label for=\"length_input\">Length</label>\n      <input id=\"length_input\" formControlName=\"length\" type=\"number\" class=\"form-control\">\n    </div>\n    <div class=\"form-group col-12 col-sm-auto\">\n      <label for=\"search_input\">Search</label>\n      <input id=\"search_input\" formControlName=\"search\" type=\"text\" class=\"form-control\">\n    </div>\n  </div>\n</form>\n<div class=\"mx-n3 mx-sm-0 my-3 overflow-auto\">\n  <angular-generic-table [data]=\"data$\" [config]=\"tableConfig$\" [search]=\"search$\" [loading]=\"loading$\" #table>\n    <div class=\"table-loading gt-skeleton-loader\"></div>\n    <div class=\"table-no-data alert alert-info mt-3\">\n      Table is empty\n    </div>\n  </angular-generic-table>\n</div>\n<angular-generic-table-pagination [table]=\"table\">\n</angular-generic-table-pagination>`,\n    language: 'xml',\n  },\n  {\n    name: 'pagination.component.ts',\n    code: `import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { FormBuilder } from '@angular/forms';\nimport { TableConfig } from '@angular-generic-table/core';\nimport { pluck, tap, withLatestFrom } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { DatePipe } from '@angular/common';\n\n@Component({\n  selector: 'docs-pagination',\n  templateUrl: './pagination.component.html',\n  styles: [],\n})\nexport class PaginationComponent implements OnInit {\n  constructor(private fb: FormBuilder, private http: HttpClient) {}\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  @ViewChild('color', { static: true }) color: TemplateRef<any> | undefined;\n  paginationForm = this.fb.group({\n    length: [10],\n    search: [''],\n  });\n  search$ = this.paginationForm.get('search')?.valueChanges as Observable<string>;\n  loading$ = new BehaviorSubject(true);\n  data$: Observable<any> = this.http.get('https://private-730c61-generictable.apiary-mock.com/data').pipe(\n    pluck('data'),\n    tap((_) => this.loading$.next(false))\n  );\n\n  tableConfig$: ReplaySubject<TableConfig> = new ReplaySubject(1);\n\n  ngOnInit(): void {\n    this.paginationForm\n      .get('length')\n      ?.valueChanges.pipe(withLatestFrom(this.tableConfig$))\n      .subscribe(([length, config]) => {\n        length = +length;\n        this.tableConfig$.next({\n          ...config,\n          pagination: { ...config.pagination, length },\n        });\n      });\n    this.tableConfig$.next({\n      class: 'table text-nowrap',\n      columns: {\n        first_name: {\n          sortable: true,\n        },\n        last_name: {\n          sortable: true,\n        },\n        gender: {\n          sortable: true,\n        },\n        birthday: {\n          sortable: true,\n          class: 'text-end',\n          transform: {\n            pipe: DatePipe,\n            args: ['longDate'],\n          },\n        },\n      },\n      pagination: {\n        length: this.paginationForm.get('length')?.value || 0,\n      },\n    });\n  }\n}`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { PaginationComponent } from './pagination.component';\nimport { GenericTableCoreModule, GenericTablePaginationModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [PaginationComponent],\n  imports: [\n    BrowserModule,\n    GenericTableCoreModule,\n    GenericTablePaginationModule,\n    ReactiveFormsModule,\n    HttpClientModule\n  ],\n  bootstrap: [PaginationComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
                }
            ],
            "projects/core/src/lib/utilities/utilities.ts": [
                {
                    "name": "calculate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/core/src/lib/utilities/utilities.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(data: Array<TableRow>, config: TableConfig) => {\n  const CALCULATIONS: { [key: string]: boolean } = {};\n  const COLUMN_CALCULATIONS: { [key: string]: Array<string> } = {};\n  let CALCULATED = Object.entries(config.footer?.columns || {})\n    .filter(\n      ([columnName, calculations]) =>\n        Object.values(calculations || {}).filter((value) => value !== false)\n          .length >= 0\n    )\n    .reduce((acc: any, [columnName, calculations], index) => {\n      acc[columnName] = Object.entries(calculations || {})\n        .filter(([calculation, value]) => value !== false)\n        .reduce((acc: any, [calculation, value]) => {\n          if (COLUMN_CALCULATIONS[columnName]) {\n            COLUMN_CALCULATIONS[columnName].push(calculation);\n          } else if (value === true) {\n            COLUMN_CALCULATIONS[columnName] = [calculation];\n          }\n          CALCULATIONS[calculation] = true;\n          if (typeof value === 'function') {\n            value = value(data, columnName);\n          }\n          acc[calculation] = value === true ? 0 : value;\n          return acc;\n        }, {});\n      return acc;\n    }, {});\n  if (Object.keys(CALCULATED).length > 0) {\n    for (let i = 0; i < data.length; i++) {\n      Object.entries(COLUMN_CALCULATIONS).forEach(([column, calculations]) => {\n        if (calculations.indexOf('sum') > -1) {\n          CALCULATED[column].sum += data[i][column];\n        }\n        if (\n          calculations.indexOf('avg') > -1 &&\n          calculations.indexOf('sum') === -1\n        ) {\n          if (CALCULATED[column].sum === undefined) {\n            CALCULATED[column].sum = 0;\n          }\n          CALCULATED[column].sum += data[i][column];\n        }\n        if (\n          calculations.indexOf('max') > -1 &&\n          (!CALCULATED[column].max || +data[i][column] > CALCULATED[column].max)\n        ) {\n          CALCULATED[column].max = +data[i][column];\n        }\n        if (\n          calculations.indexOf('min') > -1 &&\n          (!CALCULATED[column].min || +data[i][column] < CALCULATED[column].min)\n        ) {\n          CALCULATED[column].min = +data[i][column];\n        }\n      });\n    }\n    Object.entries(COLUMN_CALCULATIONS).forEach(([column, calculations]) => {\n      if (calculations.indexOf('avg') !== -1) {\n        CALCULATED[column].avg = CALCULATED[column]?.sum / data.length;\n        // if sum is not part of calculations config...\n        if (calculations.indexOf('sum') === -1 && CALCULATED[column].sum) {\n          // ...remove it\n          delete CALCULATED[column].sum;\n        }\n      }\n      if (calculations.indexOf('count') !== -1) {\n        CALCULATED[column].count = data.length;\n      }\n    });\n  }\n  return {\n    calculated: CALCULATED,\n    calculations: Object.keys(CALCULATIONS).sort(\n      (a, b) =>\n        (config.footer?.rowOrder?.indexOf(a) || 0) -\n        (config.footer?.rowOrder?.indexOf(b) || 0)\n    ),\n    calculatedColumnsCount: Object.keys(CALCULATED).length || 0,\n  };\n}"
                },
                {
                    "name": "capitalize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/core/src/lib/utilities/utilities.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string"
                },
                {
                    "name": "chunk",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/core/src/lib/utilities/utilities.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Array<TableRow>>"
                },
                {
                    "name": "dashed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/core/src/lib/utilities/utilities.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string"
                },
                {
                    "name": "parseSortOrderParams",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/core/src/lib/utilities/utilities.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(sortParams: string): GtSortOrder => {\n  const sortParamsArray = sortParams.split(',');\n  return sortParamsArray.map((sortParam) => {\n    const [key, order] = sortParam.split(':');\n    return {\n      key: key.replace(/^[+-]/, ''),\n      order: order === 'desc' ? 'desc' : 'asc',\n    };\n  });\n}",
                    "rawdescription": "parseSortOrderParams",
                    "description": "<p>parseSortOrderParams</p>\n"
                },
                {
                    "name": "search",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/core/src/lib/utilities/utilities.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow[]"
                },
                {
                    "name": "sortOnMultipleKeys",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/core/src/lib/utilities/utilities.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  keys: GtSortOrder\n): ((a: TableRow, b: TableRow) => number) => {\n  const order = keys.map((key) => (key.order === 'desc' ? -1 : 1));\n  return (a, b) => {\n    for (let i = 0; i < keys.length; i++) {\n      const o = keys[i].key;\n      if (a[o] > b[o]) return order[i];\n      if (a[o] < b[o]) return -order[i];\n    }\n    return 0;\n  };\n}",
                    "rawdescription": "sortOnMultipleKeys",
                    "description": "<p>sortOnMultipleKeys</p>\n"
                },
                {
                    "name": "sortOrderConfigToParam",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/core/src/lib/utilities/utilities.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\n  sortConfig: GtSortEvent | GtSortConfig\n): string => {\n  const order = sortConfig.order === 'desc' ? '-' : '+';\n  return `${order}${sortConfig.key}`;\n}",
                    "rawdescription": "sortOrderConfigToParam",
                    "description": "<p>sortOrderConfigToParam</p>\n"
                },
                {
                    "name": "sortOrderToParams",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/core/src/lib/utilities/utilities.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(sortOrder: GtSortOrder): string => {\n  return sortOrder\n    .map((sortConfig) => sortOrderConfigToParam(sortConfig))\n    .join(',');\n}",
                    "rawdescription": "sortOrderToParams",
                    "description": "<p>sortOrderToParams</p>\n"
                }
            ],
            "projects/core/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/core/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/core/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/docs/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/docs/src/app/examples/custom-templates/custom-templates.snippets.ts": [
                {
                    "name": "CUSTOM_TEMPLATES_DOCS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/custom-templates/custom-templates.snippets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'custom-templates.component.ts',\n    code: `import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { TableColumn, TableConfig, TableRow } from '@angular-generic-table/core';\nimport { ReplaySubject } from 'rxjs';\n\n@Component({\n  selector: 'custom-templates',\n  templateUrl: \\`./custom-templates.component.html\\`\n})\nexport class CustomTemplatesComponent implements OnInit {\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  @ViewChild('color', { static: true }) color: TemplateRef<any> | undefined;\n  clicked = '';\n\n  data = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteColor: '#26BFAF',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteColor: '#0f0',\n      favoriteFood: 'Pizza',\n    },\n  ];\n  config$: ReplaySubject<TableConfig> = new ReplaySubject(1);\n  ngOnInit(): void {\n    this.config$.next({\n      columns: {\n        firstName: {},\n        lastName: {},\n        gender: {},\n        favoriteColor: {\n          templateRef: this.color,\n        },\n        favoriteFood: {},\n        action: {\n          templateRef: this.actions,\n        },\n      },\n    });\n  }\n  clickAction(row: TableRow, column: { key: string; value: TableColumn }, index: number): void {\n    console.log('clicked row:', row, 'col:', column);\n    this.clicked = \\`clicked row number: \\${index}\\`;\n  }\n}`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { CustomTemplatesComponent } from './custom-templates-table.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [CustomTemplatesComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [CustomTemplatesComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n  {\n    name: 'custom-templates.component.html',\n    code: `<angular-generic-table [data]=\"data\" [config]=\"config$\"></angular-generic-table>\n<ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n <button class=\"btn btn-outline-primary btn-sm my-sm-n3 text-nowrap\" (click)=\"clickAction(row, col, index)\">Click me!</button>\n</ng-template>\n<ng-template #color let-row=\"row\" let-col=\"col\">\n <div [style.background]=\"row[col.key]\" style=\"width: 1.5rem; height: 1.5rem; border-radius: 50%\"></div>\n</ng-template>\n{{ clicked }}`,\n    language: 'xml',\n  },\n]"
                }
            ],
            "projects/docs/src/app/examples/custom-templates/custom-templates.component.ts": [
                {
                    "name": "CustomTemplates",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/custom-templates/custom-templates.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CustomTemplatesComponent>",
                    "defaultValue": "(\n  args: CustomTemplatesComponent\n) => ({\n  props: args,\n  component: CustomTemplatesComponent,\n})"
                }
            ],
            "projects/docs/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "projects/docs/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "projects/docs/src/app/examples/footer/footer.component.ts": [
                {
                    "name": "Footer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/footer/footer.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FooterComponent>",
                    "defaultValue": "(args: FooterComponent) => ({\n  props: args,\n  component: FooterComponent,\n})"
                }
            ],
            "projects/docs/src/app/examples/horizontal-table/horizontal-table.component.ts": [
                {
                    "name": "Horizontal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/horizontal-table/horizontal-table.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<HorizontalTableComponent>",
                    "defaultValue": "(\n  args: HorizontalTableComponent\n) => ({\n  props: args,\n  component: HorizontalTableComponent,\n})"
                }
            ],
            "projects/docs/src/app/examples/horizontal-table/horizontal-table.snippets.ts": [
                {
                    "name": "HORIZONTAL_TABLE_SNIPPETS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/horizontal-table/horizontal-table.snippets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'horizontal-table.component.ts',\n    code: `import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { GtDeltaComponent, TableConfig } from '@angular-generic-table/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Component({\n  selector: 'docs-horizontal',\n  templateUrl: './horizontal-table.component.html',\n  styles: [],\n})\nexport class TransposeComponent implements OnInit {\n  @ViewChild('feelings', { static: true }) feelings:\n    | TemplateRef<any>\n    | undefined;\n  @ViewChild('delta', { static: true }) delta: TemplateRef<GtDeltaComponent> | undefined;\n  @ViewChild('deltaIndex', { static: true }) deltaIndex:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  loading$ = new BehaviorSubject(false);\n  config: TableConfig = {};\n  data: any = [];\n\n  ngOnInit(): void {\n    this.config = {\n      stickyHeaders: {\n        row: true,\n      },\n      mobileLayout: true,\n      rows: {\n        year: {\n          class: 'text-end',\n          header: false\n        },\n        value: {\n          class: 'text-end'\n        },\n        delta: {\n          header: 'Delta %',\n          templateRef: this.delta,\n          class: 'text-end'\n        },\n        deltaIndex: {\n          header: 'Since inception %',\n          templateRef: this.deltaIndex,\n          class: 'text-end'\n        },\n        feeling: {\n          templateRef: this.feelings,\n          class: 'text-end'\n        },\n      },\n    };\n    this.load();\n  }\n  simulateLoad(): void {\n    this.loading$.next(true);\n    // set loading state to false after 2 seconds\n    setTimeout(() => this.loading$.next(false), 2000);\n  }\n  empty(): void {\n    this.data = [];\n  }\n  load(): void {\n    this.data = [\n      {\n        year: '2017',\n        value: 50,\n        feeling: 'neutral'\n      },\n      {\n        year: '2018',\n        value: 75,\n        feeling: 'positive'\n      },\n      {\n        year: '2019',\n        value: 100,\n        feeling: 'thrilled'\n      },\n      {\n        year: '2020',\n        value: 250,\n        feeling: 'thrilled'\n      },\n      {\n        year: '2021',\n        value: 50,\n        feeling: 'negative'\n      }\n    ];\n  }\n}\n`,\n    language: 'typescript',\n  },\n  {\n    name: 'horizontal-table.component.html',\n    code: `<button class=\"btn btn-outline-primary\" (click)=\"simulateLoad()\">Simulate load</button>\n<button class=\"btn btn-outline-danger mx-3\" (click)=\"empty()\">Empty</button>\n<button class=\"btn btn-outline-primary\" (click)=\"load()\">Reset</button>\n<div class=\"overflow-auto\">\n  <angular-generic-table\n    [data]=\"data\"\n    [config]=\"config\"\n    [loading]=\"loading$\"\n  >\n    <div class=\"table-loading gt-skeleton-loader\"></div>\n    <div class=\"table-no-data alert alert-info mt-3\">Table is empty</div>\n  </angular-generic-table>\n</div>\n<ng-template #feelings let-row=\"row\" let-col=\"col\">\n  <div [ngSwitch]=\"row[col.key]\">\n    <ng-container *ngSwitchCase=\"'thrilled'\">😀</ng-container>\n    <ng-container *ngSwitchCase=\"'positive'\">🙂</ng-container>\n    <ng-container *ngSwitchCase=\"'neutral'\">😐</ng-container>\n    <ng-container *ngSwitchCase=\"'negative'\">😭</ng-container>\n  </div>\n</ng-template>\n<ng-template #delta let-data=\"data\" let-index=\"index\">\n  <gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>\n</ng-template>\n<ng-template #deltaIndex let-data=\"data\" let-index=\"index\">\n  <gt-delta [index]=\"index\" [baseIndex]=\"0\" [data]=\"data\"></gt-delta>\n</ng-template>`,\n    language: 'xml',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { HorizontalTableComponent } from './horizontal-table.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [HorizontalTableComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [HorizontalTableComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
                }
            ],
            "projects/docs/src/app/examples/server-side-pagination/server-side-pagination.snippets.ts": [
                {
                    "name": "LAZY_LOADING_DOCS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/server-side-pagination/server-side-pagination.snippets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'server-side-pagination.component.html',\n    code: `<form [formGroup]=\"paginationForm\">\n  <div class=\"row gy-3\">\n    <div class=\"form-group col-12 col-sm-auto\">\n      <label for=\"search_input\">Search</label>\n      <input\n        id=\"search_input\"\n        formControlName=\"search\"\n        type=\"text\"\n        class=\"form-control\"\n      />\n    </div>\n  </div>\n</form>\n<div class=\"mx-n3 mx-sm-0 my-3 overflow-auto\">\n  <angular-generic-table\n    [data]=\"data$\"\n    [config]=\"tableConfig$\"\n    [search]=\"search$\"\n    [loading]=\"loading$\"\n    [pagingInfo]=\"paging$ | async\"\n    (pageChange)=\"onPageChange($event)\"\n    (columnSort)=\"onSortOrderChange($event)\"\n    [sortOrder]=\"sorting$ | async\"\n    #table\n  >\n    <div\n      class=\"table-loading gt-skeleton-loader\"\n      [style.--gt-skeleton-height]=\"\n        ((table.table$ | async)?.info?.pageSize ?? 0) * 41 - 11 + 'px'\n      \"\n    ></div>\n    <div class=\"table-no-data alert alert-info mt-3\">Table is empty</div>\n  </angular-generic-table>\n</div>\n<angular-generic-table-pagination [table]=\"table\">\n</angular-generic-table-pagination>`,\n    language: 'xml',\n  },\n  {\n    name: 'server-side-pagination.component.ts',\n    code: `import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n  TemplateRef,\n  ViewChild,\n} from '@angular/core';\nimport { DatePipe, formatDate } from '@angular/common';\nimport {\n  GtPageChangeEvent,\n  GtSortEvent,\n  GtSortOrder,\n  TableConfig,\n} from '@angular-generic-table/core';\nimport { FormBuilder } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { pluck, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { GtPaginationInfo } from '../../../../../core/src/lib/models/gt-pagination';\nimport { sortOrderToParams } from '../../../../../core/src/lib/utilities/utilities';\n\ninterface LazyLoadingData {\n  birthday: string;\n  email: string;\n  favorite_color: string;\n  first_name: string;\n  gender: string;\n  id: number;\n  last_name: string;\n}\n\ninterface LazyLoadingResponse {\n  data: Array<LazyLoadingData>;\n  paging: GtPaginationInfo;\n  sorting: GtSortOrder<LazyLoadingData>;\n  filters: [\n    {\n      [Property in keyof LazyLoadingResponse]: { [key: string]: any };\n    }\n  ];\n  request: any;\n  error: any;\n}\n\n@Component({\n  templateUrl: './server-side-pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ServerSidePaginationComponent implements OnInit {\n  constructor(private fb: FormBuilder, private http: HttpClient) {}\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  @ViewChild('color', { static: true }) color: TemplateRef<any> | undefined;\n\n paginationForm = this.fb.group({\n    search: ['']\n  });\n requestParams$ = new BehaviorSubject({\n    page: 1,\n    page_size: 10,\n    sort_by: '+id',\n });\n search$ = this.paginationForm.controls.search.valueChanges.pipe(\n    shareReplay(1)\n );\n loading$ = new BehaviorSubject(true);\n\n request$ = this.requestParams$.pipe(\n    tap((_) => this.loading$.next(true)), // show loading indicator whenever requests are changed (remove to disable loading indicator)\n    switchMap((params) =>\n      this.http.get<LazyLoadingResponse>(\n        'https://private-a6da3-generictableapi.apiary-mock.com/data',\n        {\n          params,\n        }\n      )\n    ),\n    tap((_) => this.loading$.next(false)), // hide loading indicator\n    shareReplay(1)\n );\n\n data$: Observable<Array<LazyLoadingData>> = this.request$.pipe(\n    pluck('data'),\n    shareReplay(1)\n );\n\n paging$: Observable<GtPaginationInfo> = this.request$.pipe(\n    pluck('paging'),\n    shareReplay(1)\n );\n\n sorting$ = this.request$.pipe(\n    pluck('sorting'),\n    shareReplay(1)\n );\n\n onPageChange(event: GtPageChangeEvent): void {\n    const current = { ...this.requestParams$.value };\n    if (current.page != event.index + 1) {\n      this.requestParams$.next({\n        ...current,\n        page: event.index + 1,\n      });\n    }\n  }\n\n onSortOrderChange(event: GtSortEvent): void {\n   let sort_by = sortOrderToParams([...event.currentSortOrder]);\n   const current = { ...this.requestParams$.value };\n   if (current.sort_by !== sort_by) {\n     this.requestParams$.next({\n       ...current,\n       page: 1, // reset page to 1 when sorting changes\n       sort_by,\n     });\n   }\n }\n\n tableConfig$: ReplaySubject<TableConfig<LazyLoadingData>> = new ReplaySubject(\n   1\n );\n\n ngOnInit(): void {\n   this.tableConfig$.next({\n      class: 'table text-nowrap',\n      columns: {\n        id: {\n          sortable: true,\n        },\n        first_name: {},\n        last_name: {\n          sortable: true,\n        },\n        gender: {\n          sortable: true,\n        },\n        birthday: {\n          class: 'text-end justify-content-end',\n          search: (row, column) => formatDate(row[column], 'longDate', 'en'),\n          transform: {\n            pipe: DatePipe,\n            args: ['longDate'],\n          },\n        },\n        favorite_color: {\n          hidden: true,\n        },\n        email: {\n          hidden: true,\n        },\n      },\n      pagination: {\n        length: 10,\n      },\n    });\n  }\n}\n`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { ServerSidePaginationComponent } from './server-side-pagination.component';\nimport { GenericTableCoreModule, GenericTablePaginationModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [ServerSidePaginationComponent],\n  imports: [\n    BrowserModule,\n    GenericTableCoreModule,\n    GenericTablePaginationModule,\n    ReactiveFormsModule,\n    HttpClientModule\n  ],\n  bootstrap: [ServerSidePaginationComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
                }
            ],
            "projects/docs/src/app/examples/mobile-layout/mobile-layout.component.ts": [
                {
                    "name": "Mobile",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/mobile-layout/mobile-layout.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MobileLayoutComponent>",
                    "defaultValue": "(\n  args: MobileLayoutComponent\n) => ({\n  props: args,\n  component: MobileLayoutComponent,\n})"
                }
            ],
            "projects/docs/src/app/examples/mobile-layout/mobileLayout.snippets.ts": [
                {
                    "name": "MOBILE_LAYOUT_SNIPPETS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/mobile-layout/mobileLayout.snippets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'mobile-layout.component.ts',\n    code: `import {Component, Pipe, PipeTransform, TemplateRef, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {TableColumn, TableConfig, TableRow} from \"@angular-generic-table/core\";\nimport {BehaviorSubject, Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\n\n@Pipe({\n  name: 'genderPipe',\n})\nexport class GenderPipe implements PipeTransform {\n  transform(gender: 'male' | 'female'): string {\n  return gender === 'male' ? '👨' : '👩';\n  }\n}\n\n@Component({\n  selector: 'docs-mobile-layout',\n  template: \\`\n    <div class=\"d-flex justify-content-end mb-1 align-items-center\">\n      {{clicked}} <button class=\"btn btn-link d-sm-none \" (click)=\"toggleLayout()\">{{(mobileLayout$ | async)? 'Desktop ' : 'Mobile '}} layout</button>\n    </div>\n    <div [class.overflow-auto]=\"(mobileLayout$ | async) === false\">\n      <angular-generic-table [data]=\"data\" [config]=\"config$\"></angular-generic-table>\n    </div>\n    <ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n      <button class=\"btn btn-outline-primary btn-sm my-sm-n3 text-nowrap\" (click)=\"clickAction(row, col, index)\">Click me!</button>\n    </ng-template>\n  \\`,\n  styles: [\\`\n    .table th {\n      white-space: nowrap;\n    }\n  \\`],\n  encapsulation: ViewEncapsulation.None\n})\nexport class MobileLayoutComponent {\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  clicked = '';\n\n  mobileLayout$ = new BehaviorSubject(true);\n  data = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n    },\n  ];\n  config$: Observable<TableConfig> = this.mobileLayout$.pipe(\n    map(mobileLayout => ({\n      mobileLayout,\n      columns: {\n        firstName: {\n          mobileHeader: true,\n          sortable: true\n        },\n        lastName: {\n          mobileHeader: true,\n          sortable: true\n        },\n        gender: {\n          mobileHeader: true,\n          transform: {\n            pipe: GenderPipe\n          }\n        },\n        favoriteFood: {\n          mobileHeader: true\n        },\n        action: {\n          mobileHeader: false,\n          header: false,\n          templateRef: this.actions,\n        },\n      },\n    }))\n  );\n\n  toggleLayout = (): void => {\n    this.mobileLayout$.next(!this.mobileLayout$.getValue());\n  }\n  clickAction(row: TableRow, column: { key: string; value: TableColumn }, index: number): void {\n    console.log('clicked row:', row, 'col:', column);\n    this.clicked = \\`Clicked row number: \\${index}\\`;\n  }\n}`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { MobileLayoutComponent } from './mobile-layout.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [MobileLayoutComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [MobileLayoutComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
                }
            ],
            "projects/docs/src/app/examples/nested-data/nested-data.component.ts": [
                {
                    "name": "Nested",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/nested-data/nested-data.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<NestedDataComponent>",
                    "defaultValue": "(\n  args: NestedDataComponent\n) => ({\n  props: args,\n  component: NestedDataComponent,\n})"
                }
            ],
            "projects/docs/src/app/examples/nested-data/nested.snippets.ts": [
                {
                    "name": "NESTED_SNIPPETS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/nested-data/nested.snippets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'nested-data.component.ts',\n    code: `import {Component, OnInit, TemplateRef, ViewChild} from '@angular/core';\nimport {TableConfig, TableRows} from \"@angular-generic-table/core\";\n\ninterface NestedData {\n  name: {\n    first: string;\n    last: string;\n  };\n  data: {\n    details?: {\n      gender: 'male' | 'female';\n      favoriteFood: 'Pasta' | 'Pizza';\n    };\n  };\n}\n\ninterface Data {\n  firstName: string;\n  lastName: string;\n  gender: 'male' | 'female';\n  favoriteFood: 'Pasta' | 'Pizza';\n  missing: string;\n}\n@Component({\n  selector: 'nested-data',\n  template: \\`\n    <div class=\"row gy-3\">\n      <div class=\"col col-sm-auto\">\n        <button class=\"btn btn-outline-primary mb-3\" (click)=\"loadData()\">\n          Load other data\n        </button>\n      </div>\n      <div class=\"col col-sm-auto\">\n        <button class=\"btn btn-outline-primary mb-3\" (click)=\"resetData()\">\n          Reset\n        </button>\n      </div>\n    </div>\n    <angular-generic-table [data]=\"data\" [config]=\"config\"></angular-generic-table>\n    <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n    <ng-template #gender let-row=\"row\" let-col=\"col\">\n      <div [ngSwitch]=\"row[col.key]\">\n        <ng-container *ngSwitchCase=\"'male'\">♂️</ng-container>\n        <ng-container *ngSwitchCase=\"'female'\">♀️</ng-container>\n      </div>\n    </ng-template>\n  \\`,\n  styles: [],\n})\nexport class NestedDataComponent implements OnInit {\n  @ViewChild('gender', { static: true }) gender: TemplateRef<any> | undefined;\n\n  config: TableConfig<Data> = {};\n  data: Array<NestedData> = [];\n  ngOnInit(): void {\n    this.resetData();\n    this.config = {\n      columns: {\n        firstName: {\n          sortable: true,\n          mapTo: { path: 'name.first' },\n        },\n        lastName: {\n          sortable: true,\n          mapTo: { path: 'name.last' },\n        },\n        gender: {\n          mapTo: { path: 'data.details.gender' },\n          templateRef: this.gender,\n        },\n        favoriteFood: {\n          sortable: true,\n          mapTo: { path: 'data.details.favoriteFood', missingValue: 'n/a' },\n        },\n        missing: {\n          mapTo: { path: 'data.missingKey.noMatch', missingValue: 'n/a' },\n        },\n      },\n    };\n  }\n\n  resetData() {\n    this.data = [\n      {\n        name: {\n          first: 'Peter',\n          last: 'Parker',\n        },\n        data: {\n          details: {\n            gender: 'male',\n            favoriteFood: 'Pasta',\n          },\n        },\n      },\n      {\n        name: {\n          first: 'Mary Jane',\n          last: 'Watson',\n        },\n        data: {\n          details: {\n            gender: 'female',\n            favoriteFood: 'Pizza',\n          },\n        },\n      },\n    ];\n  }\n\n  loadData(): void {\n    this.data = [\n      {\n        name: {\n          first: 'John',\n          last: 'Doe',\n        },\n        data: {\n          details: {\n            gender: 'male',\n            favoriteFood: 'Pasta',\n          },\n        },\n      },\n      {\n        name: {\n          first: 'Jane',\n          last: 'Doe',\n        },\n        data: {\n          details: {\n            gender: 'female',\n            favoriteFood: 'Pizza',\n          },\n        },\n      },\n      {\n        name: {\n          first: 'Foo',\n          last: 'Bar',\n        },\n        data: {},\n      },\n    ];\n  }\n}`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { NestedDataComponent } from './nested-data.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [NestedDataComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [NestedDataComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
                }
            ],
            "projects/docs/src/app/examples/pagination/pagination.component.ts": [
                {
                    "name": "Pagination",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/pagination/pagination.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PaginationComponent>",
                    "defaultValue": "(\n  args: PaginationComponent\n) => ({\n  props: args,\n  component: PaginationComponent,\n})"
                }
            ],
            "projects/docs/src/app/examples/server-side-pagination/server-side-pagination.component.ts": [
                {
                    "name": "Pagination",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/server-side-pagination/server-side-pagination.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PaginationComponent>",
                    "defaultValue": "(\n  args: PaginationComponent\n) => ({\n  props: args,\n  component: PaginationComponent,\n})"
                }
            ],
            "projects/docs/src/app/examples/row-hover-click/row-hower-click.snippets.ts": [
                {
                    "name": "ROW_HOVER_CLICK_SNIPPETS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/row-hover-click/row-hower-click.snippets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'row-hover-click.component.ts',\n    code: `import { Component } from '@angular/core';\nimport { GtRowClickEvent, GtRowHoverEvent } from '@angular-generic-table/core';\n\n\n@Component({\n  selector: 'row-hover-click-table',\n  template: '<div class=\"overflow-auto\">\n      <button class=\"btn btn-secondary me-3\" (click)=\"tableRef.hoverRow(1)\">\n        Set hover state to second row\n      </button>\n      <button class=\"btn btn-secondary\" (click)=\"tableRef.hoverRow(null)\">\n        Remove hover state\n      </button>\n      <angular-generic-table\n        [data]=\"data\"\n        [config]=\"config\"\n        (rowClick)=\"onRowClick($event)\"\n        (rowHover)=\"onRowHover($event)\"\n        #tableRef\n      ></angular-generic-table>\n      {{ clicked }}\n    </div>',\n  styles: [\n    \\`\n      :host ::ng-deep .gt-hover {\n        background-color: var(--bs-highlight-bg);\n      }\n    \\`,\n  ],\n})\nexport class RowHoverClickComponent {\n  clicked = '';\n  data = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n    },\n  ];\n  config = {\n    columns: {\n      firstName: {},\n      lastName: {},\n      gender: {},\n      favoriteFood: {},\n    },\n    rowClick: true,\n    rowHover: true,\n  };\n\n  onRowClick(event: GtRowClickEvent) {\n    console.log('row clicked', event);\n    this.clicked = \\`clicked row number: \\${event.index}\\`;\n  }\n  onRowHover(event: GtRowHoverEvent) {\n    console.log('row hovered', event);\n  }\n`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { RowHoverClickTableComponent } from './events-table.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [RowHoverClickTableComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [RowHoverClickTableComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
                }
            ],
            "projects/docs/src/app/examples/row-hover-click/row-hover-click.component.ts": [
                {
                    "name": "RowHoverClick",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/row-hover-click/row-hover-click.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<RowHoverClickComponent>",
                    "defaultValue": "(\n  args: RowHoverClickComponent\n) => ({\n  props: args,\n  component: RowHoverClickComponent,\n})"
                }
            ],
            "projects/docs/src/app/examples/simple/simple.component.ts": [
                {
                    "name": "Simple",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/simple/simple.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SimpleComponent>",
                    "defaultValue": "(args: SimpleComponent) => ({\n  props: args,\n  component: SimpleComponent,\n})"
                }
            ],
            "projects/docs/src/app/examples/footer/simple.snippets.ts": [
                {
                    "name": "SIMPLE_SNIPPETS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/footer/simple.snippets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'footer-table.component.ts',\n    code: `import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { TableConfig, TableRow } from '@angular-generic-table/core';\nimport { DecimalPipe } from '@angular/common';\n\n@Component({\n  template: \\`\n    <div class=\"overflow-auto\">\n      <angular-generic-table [data]=\"data\" [config]=\"config\">\n      </angular-generic-table>\n    </div>\n    <ng-template #heightTmplRef let-row=\"row\" let-col=\"col\">\n      <ng-container *ngIf=\"row[col.key || col] as height\"\n        >{{ height }} m\n      </ng-container>\n    </ng-template>\n  \\`,\n})\nexport class FooterComponent implements OnInit {\n  @ViewChild('heightTmplRef', { static: true }) heightTmplRef:\n    | TemplateRef<any>\n    | undefined;\n  data = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n      age: 27,\n      weight: 85.457,\n      height: 1.85,\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n      age: 25,\n      weight: 60.123,\n      height: 1.65,\n    },\n  ];\n  config: TableConfig = {};\n  ngOnInit() {\n    this.config = {\n      columns: {\n        firstName: {},\n        lastName: {},\n        gender: {},\n        favoriteFood: {\n          class: 'text-end flex-end',\n        },\n        age: {\n          class: 'text-end',\n        },\n        weight: {\n          class: 'text-end',\n          transform: {\n            pipe: DecimalPipe,\n            args: ['1.0-2'],\n          },\n        },\n        height: {\n          class: 'text-end',\n          templateRef: this.heightTmplRef,\n        },\n      },\n      footer: {\n        headers: {\n          sum: 'Total',\n          numberOfWomen: 'Number of women',\n          numberOfMen: 'Number of men',\n          min: true,\n          max: true,\n          avg: true,\n          count: true,\n          static: true,\n          first: true,\n        },\n        rowOrder: [\n          'first',\n          'numberOfWomen',\n          'numberOfMen',\n          'min',\n          'max',\n          'sum',\n          'avg',\n          'count',\n        ],\n        columns: {\n          firstName: {},\n          lastName: {\n            static: 'n/a',\n          },\n          gender: {\n            numberOfWomen: (data: Array<TableRow>, key) => {\n              let count = 0;\n              for (let i = 0; i < data.length; i++) {\n                if (data[i][key] === 'female') {\n                  count++;\n                }\n              }\n              return count;\n            },\n            numberOfMen: (data: Array<TableRow>, key) => {\n              let count = 0;\n              for (let i = 0; i < data.length; i++) {\n                if (data[i][key] === 'male') {\n                  count++;\n                }\n              }\n              return count;\n            },\n          },\n          favoriteFood: {\n            first: (data: Array<TableRow>, key) => data[0][key],\n          },\n          age: {\n            sum: true,\n            avg: true,\n            count: true,\n            max: true,\n            min: true,\n          },\n          weight: {\n            sum: true,\n            avg: true,\n            min: true,\n          },\n          height: {\n            avg: true,\n            min: true,\n            max: true,\n          },\n        },\n      },\n    };\n  }\n\n}`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { BasicTableComponent } from './basic-table.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [BasicTableComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [BasicTableComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
                }
            ],
            "projects/docs/src/app/examples/sorting/sorting.snippets.ts": [
                {
                    "name": "SIMPLE_SNIPPETS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/sorting/sorting.snippets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'sorting-table.component.ts',\n    code: `import { Component } from '@angular/core';\nimport { TableConfig } from '@angular-generic-table/core';\n\ninterface SortingData {\n  firstName: string;\n  lastName: string;\n  gender: 'male' | 'female';\n  favoriteFood: string;\n  birthdate: number;\n}\n\n@Component({\n  template: '<div class=\"overflow-auto\">\n      <angular-generic-table\n        #table\n        [data]=\"data\"\n        [config]=\"config\"\n        [(sortOrder)]=\"sortOrder\"\n        (columnSort)=\"logSortChange($event)\"\n      ></angular-generic-table>\n    </div>\n    <div class=\"row mb-3 gy-3\">\n      <div class=\"col-12 col-sm-auto\">\n        <button\n          class=\"btn btn-primary w-100\"\n          (click)=\"table.sortByKey('firstName', $event)\"\n        >\n          Sort on first name\n        </button>\n      </div>\n      <div class=\"col-12 col-sm-auto\">\n        <button class=\"btn btn-primary w-100\" (click)=\"resetSort()\">\n          Reset sorting\n        </button>\n      </div>\n    </div>\n    <strong>Current sort order</strong>\n    <p>\n      <code>\n        {{ sortOrder | json }}\n      </code>\n    </p>'\n})\nexport class SimpleComponent {\n  initialSortOrder: GtSortOrder<SortingData> = [\n    { key: 'birthdate', order: 'asc' },\n    { key: 'gender', order: 'asc' },\n    { key: 'firstName', order: 'desc' },\n  ];\n  sortOrder: GtSortOrder<SortingData> = this.initialSortOrder;\n  data: Array<SortingData> = [\n    {\n      firstName: 'John',\n      lastName: 'Doe',\n      gender: 'male',\n      favoriteFood: 'pizza',\n      birthdate: 946684800000,\n    },\n    {\n      firstName: 'Jane',\n      lastName: 'Smith',\n      gender: 'female',\n      favoriteFood: 'sushi',\n      birthdate: 803404800000,\n    },\n    {\n      firstName: 'Bob',\n      lastName: 'Johnson',\n      gender: 'male',\n      favoriteFood: 'burgers',\n      birthdate: 649345600000,\n    },\n    {\n      firstName: 'Emily',\n      lastName: 'Williams',\n      gender: 'female',\n      favoriteFood: 'chicken',\n      birthdate: 946684800000,\n    },\n    {\n      firstName: 'Michael',\n      lastName: 'Jones',\n      gender: 'male',\n      favoriteFood: 'steak',\n      birthdate: 803404800000,\n    },\n    {\n      firstName: 'Matthew',\n      lastName: 'Brown',\n      gender: 'male',\n      favoriteFood: 'seafood',\n      birthdate: 649345600000,\n    },\n    {\n      firstName: 'Jessica',\n      lastName: 'Miller',\n      gender: 'female',\n      favoriteFood: 'salad',\n      birthdate: 946684800000,\n    },\n    {\n      firstName: 'Jacob',\n      lastName: 'Moore',\n      gender: 'male',\n      favoriteFood: 'pasta',\n      birthdate: 803404800000,\n    },\n    {\n      firstName: 'Nicholas',\n      lastName: 'Taylor',\n      gender: 'male',\n      favoriteFood: 'soup',\n      birthdate: 649345600000,\n    },\n    {\n      firstName: 'Ashley',\n      lastName: 'Anderson',\n      gender: 'female',\n      favoriteFood: 'tacos',\n      birthdate: 946684800000,\n    },\n    {\n      firstName: 'Brandon',\n      lastName: 'Thomas',\n      gender: 'male',\n      favoriteFood: 'nachos',\n      birthdate: 803404800000,\n    },\n  ];\n  config: TableConfig<SortingData> = {\n    columns: {\n      firstName: {\n        sortable: true,\n      },\n      lastName: {\n        sortable: true,\n      },\n      gender: {\n        sortable: true,\n      },\n      favoriteFood: {\n        sortable: true,\n      },\n      birthdate: {\n        sortable: true,\n        transform: {\n          pipe: DatePipe,\n        },\n      },\n    },\n  };\n\n  logSortChange(sortEvent: GtSortEvent<SortingData>) {\n    console.log(sortEvent);\n  }\n\n  resetSort() {\n    this.sortOrder = this.initialSortOrder;\n  }\n}\n`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { SortingTableComponent } from './sorting-table.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [SortingTableComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [SortingTableComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
                }
            ],
            "projects/docs/src/app/examples/simple/simple.snippets.ts": [
                {
                    "name": "SIMPLE_SNIPPETS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/simple/simple.snippets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'basic-table.component.ts',\n    code: `import { Component } from '@angular/core';\nimport { TableConfig } from '@angular-generic-table/core';\n\ninterface BasicData {\n  firstName: string;\n  lastName: string;\n  gender: 'male' | 'female';\n  favoriteFood: string;\n}\n\n@Component({\n  template: '<angular-generic-table [data]=\"data\" [config]=\"config\"></angular-generic-table>'\n})\nexport class SimpleComponent {\n  data: Array<BasicData> = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n    },\n  ];\n  config: TableConfig<BasicData> = {\n    columns: {\n      firstName: {},\n      lastName: {},\n      gender: {},\n      favoriteFood: {},\n    },\n  };\n`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { BasicTableComponent } from './basic-table.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [BasicTableComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [BasicTableComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
                }
            ],
            "projects/docs/src/app/examples/sorting/sorting.component.ts": [
                {
                    "name": "Sorting",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/sorting/sorting.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SortingComponent>",
                    "defaultValue": "(args: SortingComponent) => ({\n  props: args,\n  component: SortingComponent,\n})"
                }
            ],
            "projects/docs/src/app/components/tabs/tabs.component.ts": [
                {
                    "name": "Tabs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/components/tabs/tabs.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TabsComponent>",
                    "defaultValue": "(args: TabsComponent) => ({\n  props: args,\n  component: TabsComponent,\n})"
                }
            ],
            "projects/docs/src/app/examples/transpose/transpose.component.ts": [
                {
                    "name": "Transpose",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/transpose/transpose.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TransposeComponent>",
                    "defaultValue": "(\n  args: TransposeComponent\n) => ({\n  props: args,\n  component: TransposeComponent,\n})"
                }
            ],
            "projects/docs/src/app/examples/transpose/transpose.snippets.ts": [
                {
                    "name": "TRANSPOSE_SNIPPETS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/transpose/transpose.snippets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'transpose.component.ts',\n    code: `import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { TableConfig, GtDeltaComponent } from '@angular-generic-table/core';\nimport { FormBuilder } from '@angular/forms';\nimport { withLatestFrom } from 'rxjs/operators';\n\ninterface RawData {\n  year: string;\n  value: number;\n}\ninterface YearData extends RawData {\n  delta: number;\n  deltaIndex: number;\n  combined: number;\n  deltaAbsolute: number;\n}\n@Component({\n  templateUrl: './transpose.component.html',\n  styles: []\n})\nexport class TransposeComponent implements OnInit {\n  @ViewChild('delta', { static: true }) delta:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  @ViewChild('deltaAbsolute', { static: true }) deltaAbsolute:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  @ViewChild('deltaIndex', { static: true }) deltaIndex:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  @ViewChild('combined', { static: true }) combined:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  loading$ = new BehaviorSubject(false);\n  reactiveForm = this.fb.group({\n    length: [10],\n    search: [''],\n  });\n  search$ = this.reactiveForm.get('search')?.valueChanges as Observable<string>;\n  tableConfig$: BehaviorSubject<TableConfig<YearData>> = new BehaviorSubject<\n    TableConfig<YearData>\n  >({});\n  data: Array<RawData> = [];\n\n  constructor(private fb: UntypedFormBuilder) {}\n\n  ngOnInit(): void {\n    this.transpose();\n    this.load();\n    this.reactiveForm\n      .get('length')\n      ?.valueChanges.pipe(withLatestFrom(this.tableConfig$))\n      .subscribe(([length, config]) => {\n        length = +length;\n        this.tableConfig$.next({\n          ...config,\n          pagination: { ...config.pagination, length },\n        });\n      });\n  }\n\n  simulateLoad(): void {\n    this.loading$.next(true);\n    // set loading state to false after 2 seconds\n    setTimeout(() => this.loading$.next(false), 2000);\n  }\n  empty(): void {\n    this.data = [];\n  }\n  load(): void {\n    this.data = [\n      {\n        year: '2010',\n        value: 15,\n      },\n      {\n        year: '2011',\n        value: 30,\n      },\n      {\n        year: '2012',\n        value: 25,\n      },\n      {\n        year: '2013',\n        value: 0,\n      },\n      {\n        year: '2014',\n        value: 40,\n      },\n      {\n        year: '2015',\n        value: 0,\n      },\n      {\n        year: '2016',\n        value: -5,\n      },\n      {\n        year: '2018',\n        value: 75,\n      },\n      {\n        year: '2019',\n        value: 100,\n      },\n      {\n        year: '2020',\n        value: 250,\n      },\n      {\n        year: '2021',\n        value: 50,\n      },\n      {\n        year: '2022',\n        value: 60,\n      },\n    ];\n  }\n  transpose(): void {\n    if (this.tableConfig$.value.columns) {\n      this.tableConfig$.next({\n        stickyHeaders: {\n          row: true,\n          column: true,\n        },\n        rows: {\n          year: {\n            sortable: true,\n            header: false,\n            class: 'text-end',\n          },\n          value: {\n            class: 'text-end',\n          },\n          delta: {\n            header: 'Delta %',\n            templateRef: this.delta,\n            class: 'text-end',\n          },\n          deltaIndex: {\n            header: 'Since inception %',\n            templateRef: this.deltaIndex,\n            class: 'text-end',\n          },\n          deltaAbsolute: {\n            header: 'Delta',\n            templateRef: this.deltaAbsolute,\n            class: 'text-end',\n          },\n          combined: {\n            header: 'Value with change',\n            templateRef: this.combined,\n            class: 'text-end text-nowrap',\n          },\n        },\n      });\n    } else {\n      this.tableConfig$.next({\n        stickyHeaders: {\n          row: true,\n          column: true,\n        },\n        columns: {\n          year: {\n            sortable: true,\n          },\n          value: {\n            class: 'text-end',\n          },\n          delta: {\n            header: 'Delta %',\n            templateRef: this.delta,\n            class: 'text-end',\n          },\n          deltaIndex: {\n            header: 'Since inception %',\n            templateRef: this.deltaIndex,\n            class: 'text-end',\n          },\n          deltaAbsolute: {\n            header: 'Delta',\n            templateRef: this.deltaAbsolute,\n            class: 'text-end',\n          },\n          combined: {\n            header: 'Value with change',\n            templateRef: this.combined,\n            class: 'text-end text-nowrap',\n          },\n        },\n        pagination: { length: this.reactiveForm.get('length')?.value },\n      });\n    }\n  }\n}\n`,\n    language: 'typescript',\n  },\n  {\n    name: 'transpose.component.html',\n    code: `<form [formGroup]=\"reactiveForm\">\n  <div class=\"row gy-3 gx-3 align-items-end mb-3\">\n    <div class=\"form-group col-6 col-sm-auto\">\n      <label for=\"length_input\">Number of rows</label>\n      <input\n        id=\"length_input\"\n        formControlName=\"length\"\n        type=\"number\"\n        class=\"form-control\"\n      />\n    </div>\n    <div class=\"form-group col-6 col-sm-auto\">\n      <label for=\"search_input\">Search</label>\n      <input\n        id=\"search_input\"\n        formControlName=\"search\"\n        type=\"text\"\n        class=\"form-control\"\n      />\n    </div>\n    <div class=\"col-auto\">\n      <button\n        class=\"btn btn-outline-primary w-100\"\n        (click)=\"simulateLoad()\"\n      >\n        Simulate load\n      </button>\n    </div>\n    <div class=\"col col-sm-auto\">\n      <button class=\"btn btn-outline-danger w-100\" (click)=\"empty()\">\n        Empty\n      </button>\n    </div>\n    <div class=\"col col-sm-auto\">\n      <button class=\"btn btn-outline-primary w-100\" (click)=\"load()\">\n        Reset\n      </button>\n    </div>\n    <div class=\"col col-sm-auto\">\n      <button class=\"btn btn-outline-primary w-100\" (click)=\"transpose()\">\n        Transpose\n      </button>\n    </div>\n  </div>\n  <div class=\"overflow-auto\">\n    <angular-generic-table\n      #table\n      [data]=\"data\"\n      [config]=\"tableConfig$\"\n      [loading]=\"loading$\"\n      [search]=\"search$\"\n    >\n      <div class=\"table-loading gt-skeleton-loader\"></div>\n      <div class=\"table-no-data alert alert-info mt-3\">Table is empty</div>\n    </angular-generic-table>\n  </div>\n  <angular-generic-table-pagination [table]=\"table\">\n  </angular-generic-table-pagination>\n  <ng-template #delta let-index=\"index\" let-data=\"data\">\n    <gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>\n  </ng-template>\n  <ng-template #deltaAbsolute let-index=\"index\" let-data=\"data\">\n    <gt-delta\n      [index]=\"index\"\n      [data]=\"data\"\n      [deltaTemplate]=\"deltaTemplate\"\n    ></gt-delta>\n  </ng-template>\n  <ng-template #deltaIndex let-index=\"index\" let-data=\"data\">\n    <gt-delta [index]=\"index\" [data]=\"data\" [baseIndex]=\"0\"></gt-delta>\n  </ng-template>\n  <ng-template\n    #combined\n    let-index=\"index\"\n    let-data=\"data\"\n    let-row=\"row\"\n    let-col=\"col\"\n  >\n    {{ row.value }}\n    <ng-container *ngIf=\"index > 0\">\n      <gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>\n    </ng-container>\n  </ng-template>\n  <ng-template #deltaTemplate let-delta=\"delta\">\n    <span>{{ delta.absolute }}</span></ng-template\n  >\n  <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n</form>`,\n    language: 'xml',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { HorizontalTableComponent } from './horizontal-table.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [HorizontalTableComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [HorizontalTableComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/core/src/lib/models/table-config.interface.ts": [
                {
                    "name": "FooterCalculation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"sum\" | \"avg\" | \"count\" | \"max\" | \"min\"",
                    "file": "projects/core/src/lib/models/table-config.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/core/src/lib/models/table-sort.interface.ts": [
                {
                    "name": "GtOrder",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"asc\" | \"desc\"",
                    "file": "projects/core/src/lib/models/table-sort.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "GtSortOrder",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Array<GtSortConfig<R>>",
                    "file": "projects/core/src/lib/models/table-sort.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/core/src/lib/models/table-column.interface.ts": [
                {
                    "name": "SearchFunction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/core/src/lib/models/table-column.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "projects/docs/src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "advanced",
                        "component": "AdvancedComponent"
                    },
                    {
                        "path": "pagination",
                        "component": "PaginationComponent"
                    },
                    {
                        "path": "lazy-loading",
                        "component": "ServerSidePaginationComponent"
                    },
                    {
                        "path": "simple",
                        "component": "SimpleComponent"
                    },
                    {
                        "path": "sorting",
                        "component": "SortingComponent"
                    },
                    {
                        "path": "row-hover-click",
                        "component": "RowHoverClickComponent"
                    },
                    {
                        "path": "horizontal-table",
                        "component": "HorizontalTableComponent"
                    },
                    {
                        "path": "custom-templates",
                        "component": "CustomTemplatesComponent"
                    },
                    {
                        "path": "mobile-layout",
                        "component": "MobileLayoutComponent"
                    },
                    {
                        "path": "nested",
                        "component": "NestedDataComponent"
                    },
                    {
                        "path": "transpose",
                        "component": "TransposeComponent"
                    },
                    {
                        "path": "footer",
                        "component": "FooterComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 5,
        "status": "low",
        "files": [
            {
                "filePath": "projects/core/src/lib/core.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CoreComponent",
                "coveragePercent": 5,
                "coverageCount": "2/40",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/core.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CoreService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/gt-delta/gt-delta.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GtDeltaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/gt-delta/gt-delta.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GtDelta",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/models/gt-pagination.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GtPaginationAriaLabels",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/models/gt-pagination.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GtPaginationClasses",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/models/gt-pagination.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GtPaginationInfo",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/models/table-column.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableColumn",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/models/table-config.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CalcFunc",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/models/table-config.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableConfig",
                "coveragePercent": 36,
                "coverageCount": "4/11",
                "status": "medium"
            },
            {
                "filePath": "projects/core/src/lib/models/table-config.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableFooterColumn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/models/table-events.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GtPageChangeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/models/table-events.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GtRowClickEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/models/table-events.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GtRowHoverEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/models/table-events.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GtSortEvent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/models/table-info.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableInfo",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/models/table-meta.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableMeta",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/models/table-row.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableRow",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/models/table-sort.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GtSortConfig",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/pagination/pagination.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginationComponent",
                "coveragePercent": 20,
                "coverageCount": "3/15",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/pipes/capital-case.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "CapitalCasePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/pipes/dash-case.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "DashCasePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/pipes/dynamic.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "DynamicPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/pipes/highlight.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "HighlightPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/pipes/sort-class.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SortClassPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/utilities/utilities.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "calculate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/utilities/utilities.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "capitalize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/utilities/utilities.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "chunk",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/utilities/utilities.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dashed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/utilities/utilities.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "parseSortOrderParams",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/core/src/lib/utilities/utilities.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "search",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/utilities/utilities.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sortOnMultipleKeys",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/core/src/lib/utilities/utilities.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sortOrderConfigToParam",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/core/src/lib/utilities/utilities.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sortOrderToParams",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/core/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/app.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Advanced",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/components/tabs/tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/components/tabs/tabs.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Tabs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/advanced/advanced.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdvancedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/advanced/advanced.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Advanced",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/advanced/advanced.snippets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADVANCED_DOCS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/custom-templates/custom-templates.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomTemplatesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/custom-templates/custom-templates.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomTemplates",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/custom-templates/custom-templates.snippets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CUSTOM_TEMPLATES_DOCS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/footer/footer.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Footer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/footer/simple.snippets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SIMPLE_SNIPPETS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/horizontal-table/horizontal-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HorizontalTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/horizontal-table/horizontal-table.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Horizontal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/horizontal-table/horizontal-table.snippets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HORIZONTAL_TABLE_SNIPPETS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/mobile-layout/mobile-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MobileLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/mobile-layout/mobile-layout.component.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GenderPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/mobile-layout/mobile-layout.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Mobile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/mobile-layout/mobileLayout.snippets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOBILE_LAYOUT_SNIPPETS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/nested-data/nested-data.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NestedDataComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/nested-data/nested-data.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Data",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/nested-data/nested-data.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NestedData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/nested-data/nested-data.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Nested",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/nested-data/nested.snippets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NESTED_SNIPPETS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/pagination/pagination.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/pagination/pagination.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Pagination",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/pagination/pagination.snippets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADVANCED_DOCS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/row-hover-click/row-hover-click.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RowHoverClickComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/row-hover-click/row-hover-click.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RowHoverClick",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/row-hover-click/row-hower-click.snippets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ROW_HOVER_CLICK_SNIPPETS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/server-side-pagination/server-side-pagination.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ServerSidePaginationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/server-side-pagination/server-side-pagination.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LazyLoadingData",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/server-side-pagination/server-side-pagination.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LazyLoadingResponse",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/server-side-pagination/server-side-pagination.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Pagination",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/server-side-pagination/server-side-pagination.snippets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LAZY_LOADING_DOCS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/simple/simple.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SimpleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/simple/simple.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BasicData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/simple/simple.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Simple",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/simple/simple.snippets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SIMPLE_SNIPPETS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/sorting/sorting.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SortingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/sorting/sorting.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SortingData",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/sorting/sorting.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Sorting",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/sorting/sorting.snippets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SIMPLE_SNIPPETS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/transpose/transpose.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TransposeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/transpose/transpose.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RawData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/transpose/transpose.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "YearData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/transpose/transpose.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Transpose",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/transpose/transpose.snippets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TRANSPOSE_SNIPPETS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}