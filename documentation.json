{
    "pipes": [
        {
            "name": "CapitalCasePipe",
            "id": "pipe-CapitalCasePipe-1a2786791881795d76714ed9d11173ef9f1f64d10866bff4b877782c505533338ded637288725c4cc519306246a1dcce3c04438aa1605195506b11a92d282eb6",
            "file": "projects/core/src/lib/pipes/capital-case.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "s",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "s",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "capitalCase",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { capitalize } from '../utilities/utilities';\n\n@Pipe({\n  name: 'capitalCase',\n})\nexport class CapitalCasePipe implements PipeTransform {\n  transform(s: string): any {\n    return capitalize(s);\n  }\n}\n"
        },
        {
            "name": "DashCasePipe",
            "id": "pipe-DashCasePipe-67844698d38f46a703c8055efff81a2825551f27d8f2c5403c4fb2b9865d5d0daf5bbdf34c9ece4087820abd4e96301019762eeb2dfca2fefd2fa95a6c28a776",
            "file": "projects/core/src/lib/pipes/dash-case.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "s",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "s",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "dashCase",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { dashed } from '../utilities/utilities';\n\n@Pipe({\n  name: 'dashCase',\n})\nexport class DashCasePipe implements PipeTransform {\n  transform(s: string): any {\n    return dashed(s);\n  }\n}\n"
        },
        {
            "name": "DynamicPipe",
            "id": "pipe-DynamicPipe-e8c9dae19a27f240f375daf3568c75b05da3d89bd84badf7e6b8112f0f0ea17c85ee355bba67e45b2798c9f3993048b20aeff6c8113f236f9a37727b525720d2",
            "file": "projects/core/src/lib/pipes/dynamic.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "requiredPipe",
                            "type": "Type<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pipeArgs",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "requiredPipe",
                            "type": "Type<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pipeArgs",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "dynamicPipe",
            "sourceCode": "import { Injector, Pipe, PipeTransform, Type } from '@angular/core';\n\n@Pipe({\n  name: 'dynamicPipe',\n})\nexport class DynamicPipe implements PipeTransform {\n  constructor(private injector: Injector) {}\n\n  transform(value: any, requiredPipe: Type<any>, pipeArgs: any[]): any {\n    const injector = Injector.create({\n      name: 'DynamicPipe',\n      parent: this.injector,\n      providers: [{ provide: requiredPipe }],\n    });\n    const pipe = injector.get(requiredPipe);\n    return pipe.transform(value, ...(pipeArgs || []));\n  }\n}\n"
        },
        {
            "name": "GenderPipe",
            "id": "pipe-GenderPipe-2ccdf200e7b7f3afa39e0e6fdca8c7ea0f53af37d1eb3722378cbcaba073ec2e8a214f10e4485e4464b0ea63b3d083009815564424e37fbd8206a83200f4ed92",
            "file": "projects/docs/src/app/examples/mobile-layout/mobile-layout.component.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "gender",
                            "type": "\"male\" | \"female\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "gender",
                            "type": "\"male\" | \"female\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "genderPipe",
            "sourceCode": "import {\n  Component,\n  Pipe,\n  PipeTransform,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { Story } from '@storybook/angular/types-6-0';\nimport {\n  TableColumn,\n  TableConfig,\n  TableRow,\n} from '@angular-generic-table/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { MOBILE_LAYOUT_SNIPPETS } from './mobileLayout.snippets';\n\n@Pipe({\n  name: 'genderPipe',\n})\nexport class GenderPipe implements PipeTransform {\n  transform(gender: 'male' | 'female'): string {\n    return gender === 'male' ? '👨' : '👩';\n  }\n}\n\n@Component({\n  selector: 'docs-mobile-layout',\n  template: `\n    <div class=\"d-flex justify-content-end mb-1 align-items-center\">\n      {{ clicked }}\n      <button class=\"btn btn-link d-sm-none \" (click)=\"toggleLayout()\">\n        {{ (mobileLayout$ | async) ? 'Desktop ' : 'Mobile ' }} layout\n      </button>\n    </div>\n    <div [class.overflow-auto]=\"(mobileLayout$ | async) === false\">\n      <angular-generic-table\n        [data]=\"data\"\n        [config]=\"config$\"\n      ></angular-generic-table>\n    </div>\n    <ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n      <button\n        class=\"btn btn-outline-primary btn-sm my-sm-n3 text-nowrap\"\n        (click)=\"clickAction(row, col, index)\"\n      >\n        Click me!\n      </button>\n    </ng-template>\n    <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n  `,\n  styles: [\n    `\n      .table th {\n        white-space: nowrap;\n      }\n    `,\n  ],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MobileLayoutComponent {\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  clicked = '';\n\n  mobileLayout$ = new BehaviorSubject(true);\n  data = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n    },\n  ];\n  config$: Observable<TableConfig> = this.mobileLayout$.pipe(\n    map((mobileLayout) => ({\n      mobileLayout,\n      columns: {\n        firstName: {\n          mobileHeader: true,\n          sortable: true,\n        },\n        lastName: {\n          mobileHeader: true,\n          sortable: true,\n        },\n        gender: {\n          mobileHeader: true,\n          transform: {\n            pipe: GenderPipe,\n          },\n        },\n        favoriteFood: {\n          mobileHeader: true,\n        },\n        action: {\n          mobileHeader: false,\n          header: false,\n          templateRef: this.actions,\n        },\n      },\n    }))\n  );\n\n  SNIPPETS = MOBILE_LAYOUT_SNIPPETS;\n\n  toggleLayout = (): void => {\n    this.mobileLayout$.next(!this.mobileLayout$.getValue());\n  };\n  clickAction(\n    row: TableRow,\n    column: { key: string; value: TableColumn },\n    index: number\n  ): void {\n    console.log('clicked row:', row, 'col:', column);\n    this.clicked = `Clicked row number: ${index}`;\n  }\n}\n\nexport const Mobile: Story<MobileLayoutComponent> = (\n  args: MobileLayoutComponent\n) => ({\n  props: args,\n  component: MobileLayoutComponent,\n});\n"
        },
        {
            "name": "HighlightPipe",
            "id": "pipe-HighlightPipe-170b3fde5f924488434a54204079f9bc641bc6b1d553bfc3b0db6b86024c027a9e715dce4cdbc029dc645ae8bcc80db5288a7f91dd34db27fb7015f58690bfc6",
            "file": "projects/core/src/lib/pipes/highlight.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "text",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "searchTerm",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchTerm",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "highlight",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'highlight',\n})\nexport class HighlightPipe implements PipeTransform {\n  transform(text: any, searchTerm: string | null): string {\n    if (!searchTerm) {\n      return text;\n    }\n    const haystackAlwaysString = text + '';\n    let highlightedText = haystackAlwaysString; // fallback\n\n    let searchPattern;\n    try {\n      searchPattern = new RegExp(\n        '(' +\n          // @ts-ignore\n          searchTerm\n            .toLowerCase()\n            .match(/\".*?\"|[^ ]+/g) // extract words\n            .map(\n              (needle) => needle.replace(/\"(.*?)\"/, '$1') // strip away '\"'\n            )\n            .join('|') + // combine words\n          ')',\n        'ig'\n      );\n    } catch (error) {\n      return highlightedText;\n    }\n\n    const containsTagPattern = /(<.*?>)(.*)(<\\/.*?>)/gi;\n    const containsTagMatches = containsTagPattern.exec(haystackAlwaysString);\n\n    if (containsTagMatches) {\n      // tag exists in haystack\n      highlightedText =\n        containsTagMatches[1] +\n        containsTagMatches[2].replace(\n          searchPattern,\n          '<span class=\"gt-highlight-search\">$1</span>'\n        ) +\n        containsTagMatches[3];\n    } else {\n      highlightedText = haystackAlwaysString.replace(\n        searchPattern,\n        '<span class=\"gt-highlight-search\">$1</span>'\n      );\n    }\n\n    return highlightedText;\n  }\n}\n"
        },
        {
            "name": "SortClassPipe",
            "id": "pipe-SortClassPipe-a55105d02f9568c517c39af2393d1378995a5ccddc579f68199abd1ca1ff9656fbe7ac800e67ed2e8098953ea641b08e67b8f5168c76ef2ba04ca38117e51c7c",
            "file": "projects/core/src/lib/pipes/sort-class.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "selection",
                            "type": "literal type | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "aria",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selection",
                            "type": "literal type | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "aria",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "sortClass",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { Order } from '../enums/order.enum';\n\n@Pipe({\n  name: 'sortClass',\n})\nexport class SortClassPipe implements PipeTransform {\n  transform(\n    selection: { sortBy: string; sortByOrder: Order } | any,\n    property: string,\n    aria = false\n  ): string | null {\n    return selection?.sortBy === property\n      ? !aria\n        ? 'gt-sort-' + selection.sortByOrder\n        : selection.sortByOrder + 'ending'\n      : !aria\n      ? ''\n      : null;\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "GtPaginationAriaLabels",
            "id": "interface-GtPaginationAriaLabels-b61886aff7ec6266e2fecc3c4d070bf12d450c8547655bfc4fd7bd41551f50cc5f3a7db5503444c874878cd722de11168ea1d52dcd9ec8bb741183c7431eda7c",
            "file": "projects/core/src/lib/models/gt-pagination.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GtPaginationClasses {\n  nav?: string;\n  ul?: string;\n  li?: string;\n  button?: string;\n}\n\nexport interface GtPaginationAriaLabels {\n  nav: string;\n  button: string;\n}\n",
            "properties": [
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "nav",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "GtPaginationClasses",
            "id": "interface-GtPaginationClasses-b61886aff7ec6266e2fecc3c4d070bf12d450c8547655bfc4fd7bd41551f50cc5f3a7db5503444c874878cd722de11168ea1d52dcd9ec8bb741183c7431eda7c",
            "file": "projects/core/src/lib/models/gt-pagination.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GtPaginationClasses {\n  nav?: string;\n  ul?: string;\n  li?: string;\n  button?: string;\n}\n\nexport interface GtPaginationAriaLabels {\n  nav: string;\n  button: string;\n}\n",
            "properties": [
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "li",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "nav",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "ul",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TableColumn",
            "id": "interface-TableColumn-a65576dcb9f7d8edc456fb2f7fa6d5940986eee2c3514b61483ea402b172603d4da7f8a5731ce48383796274c45f570cf5a71396249baa6cefa8fc7d52523278",
            "file": "projects/core/src/lib/models/table-column.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\n\nexport interface TableColumn {\n  header?: string | false;\n  mobileHeader?: string | boolean;\n  hidden?: boolean;\n  sortable?: boolean;\n  order?: number;\n  search?: boolean;\n  templateRef?: TemplateRef<any>;\n  transform?: {\n    pipe: any;\n    args?: Array<any>;\n  };\n  class?: string;\n  mapTo?: {\n    path: string;\n    missingValue?: string | number;\n  };\n}\n",
            "properties": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | ",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "mapTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "mobileHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "search",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "sortable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "templateRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "transform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TableConfig",
            "id": "interface-TableConfig-32524bf68aaea97195a74f13e2142d2eb9f08760bed89d291988324e5ee4a60a498de31b5af9c955929266d01e94f9e9da93e53c9f9b24ab02143b5585ce41e0",
            "file": "projects/core/src/lib/models/table-config.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TableColumn } from './table-column.interface';\n\nexport interface TableConfig {\n  hidden?: boolean;\n  mobileLayout?: boolean;\n  stickyHeaders?: {\n    row?: boolean;\n    column?: boolean;\n  };\n  class?: string;\n  rows?: {\n    [key: string]: TableColumn;\n  };\n  columns?: {\n    [key: string]: TableColumn;\n  };\n  pagination?: {\n    length?: number;\n  };\n}\n",
            "properties": [
                {
                    "name": "class",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "hidden",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "mobileLayout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "stickyHeaders",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TableInfo",
            "id": "interface-TableInfo-6b1b72be98a831f69f5fb615ba9bce270844e042f1c233b8d6116e3a67db393e5aeab683c9838ab223a42c0bdb3baa1ac8c8eae29fa61a7ba14deff9ec606634",
            "file": "projects/core/src/lib/models/table-info.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TableInfo {\n  records: number;\n  pageTotal: number;\n}\n",
            "properties": [
                {
                    "name": "pageTotal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "records",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TableMeta",
            "id": "interface-TableMeta-2ec6d15ab00ba943a2e431cafa87ede2651671cc80738316ede1dbb32f921c49f55fbb1d10c532f1ca10006a72b3533b5eb3992f8f89cfcb9cb891d5c38fc3f8",
            "file": "projects/core/src/lib/models/table-meta.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TableRow } from './table-row.interface';\nimport { TableConfig } from './table-config.interface';\nimport { TableInfo } from './table-info.interface';\nimport { Observable } from 'rxjs';\n\nexport interface TableMeta {\n  data: Array<Array<TableRow>>;\n  config: TableConfig;\n  info: TableInfo;\n}\n",
            "properties": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableConfig",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Array<TableRow>>",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "info",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableInfo",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TableRow",
            "id": "interface-TableRow-c4c6232967c68550cdbb1fadd8a1f7f1a4c0e9d36f30ee796aedc8f9a044ab51729cfdc333440d8e1ac964dab0c8c3defacd69e8408ba1290087191cd25bec2a",
            "file": "projects/core/src/lib/models/table-row.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type TableRows = Array<TableRow>;\nexport interface TableRow {\n  [key: string]: number | string | boolean | any;\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-c4c6232967c68550cdbb1fadd8a1f7f1a4c0e9d36f30ee796aedc8f9a044ab51729cfdc333440d8e1ac964dab0c8c3defacd69e8408ba1290087191cd25bec2a",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number | string | boolean | any",
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 175,
            "methods": []
        },
        {
            "name": "TableSort",
            "id": "interface-TableSort-12859af5b177efd9db0a72e0755e6e4a2dbd1ace5829e14bcf438e9b909c540e86d27de49b2a82703e8bbf59ca9c34722f82ad41e2be24fc6862e882be75c1c5",
            "file": "projects/core/src/lib/models/table-sort.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Order } from '../enums/order.enum';\n\nexport interface TableSort {\n  sortBy: string;\n  sortByOrder: Order;\n}\n",
            "properties": [
                {
                    "name": "sortBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "sortByOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Order",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "CoreService",
            "id": "injectable-CoreService-aa6c97a9fa8aaeb04ef59acbab00bca3734e79841c357f3bf212f24c045414c295ec1cd3b16188e237ce977a4ffec26961195586d7de5f10277a1cb0f8bf2896",
            "file": "projects/core/src/lib/core.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CoreService {\n  constructor() {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AdvancedComponent",
            "id": "component-AdvancedComponent-89ff734ac3a472f0ccb2b658902b20b84fe1d1d33c8885b4ee7c7b56355553499c3414f9529410b0b4bdb7565753c1682761468dbc0411d0e67df780f83c67c2",
            "file": "projects/docs/src/app/examples/advanced/advanced.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-advanced",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./advanced.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_currentPage$",
                    "defaultValue": "new BehaviorSubject(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'actions', {static: true}"
                        }
                    ]
                },
                {
                    "name": "clicked",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'color', {static: true}"
                        }
                    ]
                },
                {
                    "name": "colors",
                    "defaultValue": "['#33d60b', '#dcafff', '#3fc9ff', '#ff1600', '#5238b1', '#fff']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "data$",
                    "defaultValue": "new BehaviorSubject([\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteColor: '#26BFAF',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteColor: '#0f0',\n      favoriteFood: 'Pizza',\n    },\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<any>",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "femaleFirstNames",
                    "defaultValue": "['Mary Jane', 'Kim', 'Sarah', 'Michelle', 'Ann']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "foods",
                    "defaultValue": "[\n    'Pizza',\n    'Pasta',\n    'Hamburger',\n    'Pancakes',\n    'Tacos',\n    'Lasagna',\n    'Meatloaf',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "lastNames",
                    "defaultValue": "[\n    'Andersson',\n    'Smith',\n    'Parker',\n    'Kent',\n    'Rogers',\n    'Lane',\n    'Jackson',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "loading$",
                    "defaultValue": "new BehaviorSubject(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "maleFirstNames",
                    "defaultValue": "['Peter', 'Clark', 'Ruben', 'John', 'Jack', 'Roscoe']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "next",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 126
                },
                {
                    "name": "paginationForm",
                    "defaultValue": "this.fb.group({\n    length: [10],\n    search: [''],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "prev",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "search$",
                    "defaultValue": "this.paginationForm.get('search')\n    ?.valueChanges as Observable<string>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "SNIPPETS",
                    "defaultValue": "ADVANCED_DOCS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "tableConfig$",
                    "defaultValue": "new ReplaySubject(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplaySubject<TableConfig>",
                    "optional": false,
                    "description": "",
                    "line": 78
                }
            ],
            "methodsClass": [
                {
                    "name": "addData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clickAction",
                    "args": [
                        {
                            "name": "row",
                            "type": "TableRow",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "column",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TableRow",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "column",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "randomRecord",
                    "args": [],
                    "optional": false,
                    "returnType": "TableRow",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "simulateLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { FormBuilder } from '@angular/forms';\nimport {\n  TableConfig,\n  TableRow,\n  TableColumn,\n} from '@angular-generic-table/core';\nimport { withLatestFrom } from 'rxjs/operators';\nimport { Story } from '@storybook/angular/types-6-0';\nimport { ADVANCED_DOCS } from './advanced.snippets';\n\n@Component({\n  selector: 'docs-advanced',\n  templateUrl: './advanced.component.html',\n  styles: [],\n})\nexport class AdvancedComponent implements OnInit {\n  get currentPage$(): Observable<number> {\n    return this._currentPage$.asObservable();\n  }\n\n  set currentPage(value: number) {\n    this._currentPage$.next(value);\n  }\n  constructor(private fb: FormBuilder) {}\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  @ViewChild('color', { static: true }) color: TemplateRef<any> | undefined;\n  paginationForm = this.fb.group({\n    length: [10],\n    search: [''],\n  });\n  search$ = this.paginationForm.get('search')\n    ?.valueChanges as Observable<string>;\n  loading$ = new BehaviorSubject(true);\n  data$: BehaviorSubject<any> = new BehaviorSubject([\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteColor: '#26BFAF',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteColor: '#0f0',\n      favoriteFood: 'Pizza',\n    },\n  ]);\n\n  private _currentPage$ = new BehaviorSubject(0);\n\n  clicked: string = '';\n  maleFirstNames = ['Peter', 'Clark', 'Ruben', 'John', 'Jack', 'Roscoe'];\n  femaleFirstNames = ['Mary Jane', 'Kim', 'Sarah', 'Michelle', 'Ann'];\n  lastNames = [\n    'Andersson',\n    'Smith',\n    'Parker',\n    'Kent',\n    'Rogers',\n    'Lane',\n    'Jackson',\n  ];\n  foods = [\n    'Pizza',\n    'Pasta',\n    'Hamburger',\n    'Pancakes',\n    'Tacos',\n    'Lasagna',\n    'Meatloaf',\n  ];\n  colors = ['#33d60b', '#dcafff', '#3fc9ff', '#ff1600', '#5238b1', '#fff'];\n\n  tableConfig$: ReplaySubject<TableConfig> = new ReplaySubject(1);\n  SNIPPETS = ADVANCED_DOCS;\n\n  addData(): void {\n    this.data$.next([...this.data$.getValue(), this.randomRecord()]);\n  }\n\n  removeData(): void {\n    this.data$.next([]);\n  }\n\n  simulateLoad(): void {\n    this.loading$.next(true);\n    // set loading state to false after 2 seconds\n    setTimeout(() => this.loading$.next(false), 2000);\n  }\n\n  clickAction(\n    row: TableRow,\n    column: { key: string; value: TableColumn },\n    index: number\n  ): void {\n    console.log('clicked row:', row, 'col:', column);\n    this.clicked = `clicked row number: ${index}`;\n  }\n\n  randomRecord(): TableRow {\n    const random = Math.floor(Math.random() * 2);\n    const newRecord = {\n      firstName: random\n        ? this.maleFirstNames[\n            Math.floor(Math.random() * this.maleFirstNames.length)\n          ]\n        : this.femaleFirstNames[\n            Math.floor(Math.random() * this.femaleFirstNames.length)\n          ],\n      lastName:\n        this.lastNames[Math.floor(Math.random() * this.lastNames.length)],\n      gender: random ? 'male' : 'female',\n      favoriteColor:\n        this.colors[Math.floor(Math.random() * this.colors.length)],\n      favoriteFood: this.foods[Math.floor(Math.random() * this.foods.length)],\n    };\n    console.log('added new random record:', newRecord);\n\n    return newRecord;\n  }\n\n  next = () => {\n    this.currentPage = this._currentPage$.value + 1;\n  };\n  prev = () => {\n    this.currentPage = this._currentPage$.value - 1;\n  };\n\n  ngOnInit(): void {\n    this.simulateLoad();\n    this.paginationForm\n      .get('length')\n      ?.valueChanges.pipe(withLatestFrom(this.tableConfig$))\n      .subscribe(([length, config]) => {\n        length = +length;\n        this.tableConfig$.next({\n          ...config,\n          pagination: { ...config.pagination, length },\n        });\n      });\n    this.tableConfig$.next({\n      class: 'table text-nowrap mb-0',\n      mobileLayout: true,\n      columns: {\n        firstName: {\n          header: 'First name',\n          mobileHeader: true,\n          sortable: true,\n          order: 0,\n        },\n        lastName: {\n          header: 'Last name',\n          mobileHeader: true,\n          hidden: false,\n          sortable: true,\n        },\n        gender: {\n          mobileHeader: 'Sex',\n          sortable: true,\n          order: 1,\n        },\n        favoriteColor: {\n          header: 'Favorite color',\n          mobileHeader: true,\n          templateRef: this.color,\n          sortable: false,\n          order: 2,\n          search: false,\n          class: 'custom-class',\n        },\n        favoriteFood: {\n          mobileHeader: true,\n          header: 'Favorite food',\n          hidden: false,\n          sortable: true,\n          order: 0,\n        },\n        action: {\n          mobileHeader: false,\n          header: false,\n          templateRef: this.actions,\n          order: 6,\n          class: 'py-1 text-end',\n        },\n      },\n      pagination: {\n        length: this.paginationForm.get('length')?.value || 0,\n      },\n    });\n  }\n}\n\nexport const Advanced: Story<AdvancedComponent> = (\n  args: AdvancedComponent\n) => ({\n  props: args,\n  component: AdvancedComponent,\n});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "currentPage$": {
                    "name": "currentPage$",
                    "getSignature": {
                        "name": "currentPage$",
                        "type": "",
                        "returnType": "Observable<number>",
                        "line": 19
                    }
                },
                "currentPage": {
                    "name": "currentPage",
                    "setSignature": {
                        "name": "currentPage",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 23,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"row mb-3 gy-3 gx-2\">\n  <div class=\"col-12 col-sm-auto\">\n    <button class=\"btn btn-primary w-100\" (click)=\"addData()\">\n      Add random data\n    </button>\n  </div>\n  <div class=\"col-12 col-sm-auto\">\n    <button class=\"btn btn-danger w-100\" (click)=\"removeData()\">\n      Remove data\n    </button>\n  </div>\n  <div class=\"col-12 col-sm-auto\">\n    <button class=\"btn btn-secondary w-100\" (click)=\"simulateLoad()\">\n      Load\n    </button>\n  </div>\n</div>\n<form [formGroup]=\"paginationForm\">\n  <div class=\"row gy-3\">\n    <div class=\"form-group col-6 col-sm-auto\">\n      <label for=\"length_input\">Length</label>\n      <input\n        id=\"length_input\"\n        formControlName=\"length\"\n        type=\"number\"\n        class=\"form-control\"\n      />\n    </div>\n    <div class=\"form-group col-6 col-sm-auto\">\n      <label for=\"search_input\">Search</label>\n      <input\n        id=\"search_input\"\n        formControlName=\"search\"\n        type=\"text\"\n        class=\"form-control\"\n      />\n    </div>\n  </div>\n</form>\n<div class=\"overflow-scroll mt-3 pb-3\">\n  <angular-generic-table\n    [data]=\"data$\"\n    [config]=\"tableConfig$\"\n    [page]=\"(currentPage$ | async)!\"\n    [search]=\"search$\"\n    [loading]=\"loading$\"\n    #table\n  >\n    <div class=\"table-loading gt-skeleton-loader\"></div>\n    <div class=\"table-no-data alert alert-info mt-3\">Table is empty</div>\n  </angular-generic-table>\n</div>\n<div\n  class=\"row justify-content-center align-items-center gy-3\"\n  *ngIf=\"{\n    current: (currentPage$ | async) || 0,\n    total: (table.table$ | async)?.info?.pageTotal || 1\n  } as pagination\"\n>\n  <div class=\"col-6 col-sm-auto\">\n    <button\n      class=\"btn btn-primary w-100\"\n      (click)=\"prev()\"\n      [disabled]=\"pagination.current === 0\"\n    >\n      Prev\n    </button>\n  </div>\n  <div class=\"col-6 col-sm-auto\">\n    <button\n      class=\"btn btn-primary w-100\"\n      (click)=\"next()\"\n      [disabled]=\"pagination.total - 1 === pagination.current\"\n    >\n      Next\n    </button>\n  </div>\n  <div class=\"col-auto\">Current page: {{ pagination.current + 1 }}</div>\n  <div class=\"col-auto\">Total pages: {{ pagination.total }}</div>\n  <div class=\"col-auto\">Records: {{ (data$ | async).length }}</div>\n  <div class=\"col-auto\">\n    {{ clicked }}\n  </div>\n</div>\n<ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n  <button\n    class=\"btn btn-outline-primary btn-sm\"\n    (click)=\"clickAction(row, col, index)\"\n  >\n    Click me!\n  </button>\n</ng-template>\n<ng-template #color let-row=\"row\" let-col=\"col\">\n  <div\n    [style.background]=\"row[col.key]\"\n    style=\"width: 1.5rem; height: 1.5rem; border-radius: 50%\"\n  ></div>\n</ng-template>\n<docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-aa682ffc0c0e8595c86fb2392daa09337f9ba2a235de4a625b2585746382ea5e26687292fb1feee009848e5321f77b950b305008bb94f4913dc05fb416cc3c29",
            "file": "projects/docs/src/app/app.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_currentPage$",
                    "defaultValue": "new BehaviorSubject(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'actions', {static: true}"
                        }
                    ]
                },
                {
                    "name": "clicked",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'color', {static: true}"
                        }
                    ]
                },
                {
                    "name": "colors",
                    "defaultValue": "['#33d60b', '#dcafff', '#3fc9ff', '#ff1600', '#5238b1', '#fff']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "data$",
                    "defaultValue": "new BehaviorSubject([\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteColor: '#26BFAF',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteColor: '#0f0',\n      favoriteFood: 'Pizza',\n    },\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<any>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "femaleFirstNames",
                    "defaultValue": "['Mary Jane', 'Kim', 'Sarah', 'Michelle', 'Ann']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "foods",
                    "defaultValue": "['Pizza', 'Pasta', 'Hamburger', 'Pancakes', 'Tacos', 'Lasagna', 'Meatloaf']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "lastNames",
                    "defaultValue": "['Andersson', 'Smith', 'Parker', 'Kent', 'Rogers', 'Lane', 'Jackson']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "loading$",
                    "defaultValue": "new BehaviorSubject(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "maleFirstNames",
                    "defaultValue": "['Peter', 'Clark', 'Ruben', 'John', 'Jack', 'Roscoe']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "next",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "paginationForm",
                    "defaultValue": "this.fb.group({\n    length: [10],\n    search: [''],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "prev",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "search$",
                    "defaultValue": "this.paginationForm.get('search')!.valueChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "tableConfig$",
                    "defaultValue": "new ReplaySubject(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplaySubject<TableConfig>",
                    "optional": false,
                    "description": "",
                    "line": 57
                }
            ],
            "methodsClass": [
                {
                    "name": "addData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clickAction",
                    "args": [
                        {
                            "name": "row",
                            "type": "TableRow",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "column",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TableRow",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "column",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "randomRecord",
                    "args": [],
                    "optional": false,
                    "returnType": "TableRow",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "simulateLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { FormBuilder } from '@angular/forms';\nimport { TableConfig, TableRow, TableColumn } from '@angular-generic-table/core';\nimport { withLatestFrom } from 'rxjs/operators';\nimport { Story } from '@storybook/angular/types-6-0';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppComponent implements OnInit {\n  get currentPage$(): Observable<number> {\n    return this._currentPage$.asObservable();\n  }\n\n  set currentPage(value: number) {\n    this._currentPage$.next(value);\n  }\n  constructor(private fb: FormBuilder) {}\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  @ViewChild('color', { static: true }) color: TemplateRef<any> | undefined;\n  paginationForm = this.fb.group({\n    length: [10],\n    search: [''],\n  });\n  search$ = this.paginationForm.get('search')!.valueChanges;\n  loading$ = new BehaviorSubject(true);\n  data$: BehaviorSubject<any> = new BehaviorSubject([\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteColor: '#26BFAF',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteColor: '#0f0',\n      favoriteFood: 'Pizza',\n    },\n  ]);\n\n  private _currentPage$ = new BehaviorSubject(0);\n\n  clicked: string = '';\n  maleFirstNames = ['Peter', 'Clark', 'Ruben', 'John', 'Jack', 'Roscoe'];\n  femaleFirstNames = ['Mary Jane', 'Kim', 'Sarah', 'Michelle', 'Ann'];\n  lastNames = ['Andersson', 'Smith', 'Parker', 'Kent', 'Rogers', 'Lane', 'Jackson'];\n  foods = ['Pizza', 'Pasta', 'Hamburger', 'Pancakes', 'Tacos', 'Lasagna', 'Meatloaf'];\n  colors = ['#33d60b', '#dcafff', '#3fc9ff', '#ff1600', '#5238b1', '#fff'];\n\n  tableConfig$: ReplaySubject<TableConfig> = new ReplaySubject(1);\n\n  addData(): void {\n    this.data$.next([...this.data$.getValue(), this.randomRecord()]);\n  }\n\n  removeData(): void {\n    this.data$.next([]);\n  }\n\n  simulateLoad(): void {\n    this.loading$.next(true);\n    // set loading state to false after 2 seconds\n    setTimeout(() => this.loading$.next(false), 2000);\n  }\n\n  clickAction(row: TableRow, column: { key: string; value: TableColumn }, index: number): void {\n    console.log('clicked row:', row, 'col:', column);\n    this.clicked = `clicked row number: ${index}`;\n  }\n\n  randomRecord(): TableRow {\n    const random = Math.floor(Math.random() * 2);\n    const newRecord = {\n      firstName: random\n        ? this.maleFirstNames[Math.floor(Math.random() * this.maleFirstNames.length)]\n        : this.femaleFirstNames[Math.floor(Math.random() * this.femaleFirstNames.length)],\n      lastName: this.lastNames[Math.floor(Math.random() * this.lastNames.length)],\n      gender: random ? 'male' : 'female',\n      favoriteColor: this.colors[Math.floor(Math.random() * this.colors.length)],\n      favoriteFood: this.foods[Math.floor(Math.random() * this.foods.length)],\n    };\n    console.log('added new random record:', newRecord);\n\n    return newRecord;\n  }\n\n  next = () => {\n    this.currentPage = this._currentPage$.value + 1;\n  };\n  prev = () => {\n    this.currentPage = this._currentPage$.value - 1;\n  };\n\n  ngOnInit(): void {\n    this.simulateLoad();\n    this.paginationForm\n      .get('length')\n      ?.valueChanges.pipe(withLatestFrom(this.tableConfig$))\n      .subscribe(([length, config]) => {\n        length = +length;\n        this.tableConfig$.next({\n          ...config,\n          pagination: { ...config.pagination, length },\n        });\n      });\n    this.tableConfig$.next({\n      class: 'table table-mobile text-nowrap mb-0',\n      columns: {\n        firstName: {\n          header: 'First name',\n          mobileHeader: true,\n          sortable: true,\n          order: 0,\n        },\n        lastName: {\n          header: 'Last name',\n          mobileHeader: true,\n          hidden: false,\n          sortable: true,\n        },\n        gender: {\n          header: 'Gender',\n          mobileHeader: 'Sex',\n          sortable: true,\n          order: 1,\n        },\n        favoriteColor: {\n          header: 'Favorite color',\n          mobileHeader: true,\n          templateRef: this.color,\n          sortable: false,\n          order: 2,\n          search: false,\n          class: 'custom-class',\n        },\n        favoriteFood: {\n          mobileHeader: true,\n          header: 'Favorite food',\n          hidden: false,\n          sortable: true,\n          order: 0,\n        },\n        action: {\n          mobileHeader: false,\n          header: 'Action',\n          templateRef: this.actions,\n          order: 6,\n        },\n      },\n      pagination: {\n        length: this.paginationForm.get('length')?.value || 0,\n      },\n    });\n  }\n}\n\nexport const Advanced: Story<AppComponent> = (args: AppComponent) => ({\n  props: args,\n  component: AppComponent,\n});\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "currentPage$": {
                    "name": "currentPage$",
                    "getSignature": {
                        "name": "currentPage$",
                        "type": "",
                        "returnType": "Observable<number>",
                        "line": 15
                    }
                },
                "currentPage": {
                    "name": "currentPage",
                    "setSignature": {
                        "name": "currentPage",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 19,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<!--<div class=\"card mt-3\">\n  <h4 class=\"card-header\">Table</h4>\n  <div class=\"card-body\">\n    <div class=\"row mb-3\">\n      <div class=\"col col-sm-auto\">\n        <button class=\"btn btn-primary w-100\" (click)=\"addData()\">Add random data</button>\n      </div>\n      <div class=\"col col-sm-auto\">\n        <button class=\"btn btn-danger w-100\" (click)=\"removeData()\">Remove data</button>\n      </div>\n      <div class=\"col col-sm-auto\">\n        <button class=\"btn btn-secondary w-100\" (click)=\"simulateLoad()\">Load</button>\n      </div>\n    </div>\n    <form [formGroup]=\"paginationForm\">\n      <div class=\"row\">\n        <div class=\"form-group col-12 col-sm-auto\">\n          <label for=\"length_input\">Length</label>\n          <input id=\"length_input\" formControlName=\"length\" type=\"number\" class=\"form-control\">\n        </div>\n        <div class=\"form-group col-12 col-sm-auto\">\n          <label for=\"search_input\">Search</label>\n          <input id=\"search_input\" formControlName=\"search\" type=\"text\" class=\"form-control\">\n        </div>\n      </div>\n    </form>\n    <div class=\"mx-n3 mx-sm-0\">\n    <angular-generic-table [data]=\"data$\" [config]=\"tableConfig$\" [page]=\"currentPage$\" [search]=\"search$\" [loading]=\"loading$\">\n      <div class=\"table-loading gt-skeleton-loader\"></div>\n      <div class=\"table-no-data alert alert-info mt-3\">\n        Table is empty\n      </div>\n    </angular-generic-table>\n    </div>\n    <div class=\"row justify-content-between justify-content-sm-center align-items-center mt-3\">\n      <div class=\"col-auto\">\n        <button class=\"btn btn-primary\" (click)=\"prev()\">Prev</button>\n      </div>\n      <div class=\"col-auto\">\n        <button class=\"btn btn-primary\" (click)=\"next()\">Next</button>\n      </div>\n      <div class=\"col-auto\">Current page: {{currentPage$ | async}}</div>\n      <div class=\"col-auto\">\n        Records: {{(data$ | async).length}}\n      </div>\n      <div class=\"col-auto\">\n        {{clicked}}\n      </div>\n    </div>\n  </div>\n</div>\n<ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n  <button class=\"btn btn-outline-primary btn-sm my-sm-n3\" (click)=\"clickAction(row, col, index)\">Click me!</button>\n</ng-template>\n<ng-template #color let-row=\"row\" let-col=\"col\">\n  <div [style.background]=\"row[col.key]\" style=\"width: 1.5rem; height: 1.5rem; border-radius: 50%\"></div>\n</ng-template>\n-->\n<div class=\"card mt-3 mx-sm-3\">\n  <h4 class=\"card-header\">Example</h4>\n  <div class=\"card-body\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n"
        },
        {
            "name": "CoreComponent",
            "id": "component-CoreComponent-be078ad00c8399508b5b1def0abf650b2cd1b5df6b58c4bba5fa185afbbe03772d9cd2b6cff637bad5e5958433aa6a455cdedbb878713d828a76625d5002d6f8",
            "file": "projects/core/src/lib/core.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "angular-generic-table",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./core.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "Observable | TableConfig",
                    "decorators": []
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "Observable | Array",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "Observable | boolean",
                    "decorators": []
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "search",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "Observable | string | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_currentPage$",
                    "defaultValue": "new BehaviorSubject(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 190,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_data$",
                    "defaultValue": "new ReplaySubject(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplaySubject<Array | Observable>",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_loading$",
                    "defaultValue": "new ReplaySubject(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplaySubject<Observable | boolean>",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_searchBy$",
                    "defaultValue": "new ReplaySubject(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplaySubject<Observable | string | null>",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_sortBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableSort | undefined",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_tableConfig$",
                    "defaultValue": "new ReplaySubject(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplaySubject<TableConfig | Observable>",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "colspan$",
                    "defaultValue": "this.tableConfig$.pipe(\n    switchMap((config) =>\n      config.columns\n        ? of(\n            Object.values(config.columns || config.rows || {}).filter(\n              (value) => value.hidden !== true\n            ).length\n          )\n        : this.data$.pipe(map((data) => data.length + 1))\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 205
                },
                {
                    "name": "columnOrder",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 232
                },
                {
                    "name": "currentPage$",
                    "defaultValue": "combineLatest([this._currentPage$, this.table$]).pipe(\n    map(([page, table]: any) => {\n      // determine last page\n      const lastPage =\n        Math.ceil(\n          table.info.records /\n            (table.config?.pagination?.length || table.info.records)\n        ) - 1;\n      // determine max/min position\n      return +page < 0 ? 0 : +page > lastPage ? lastPage : +page;\n    }),\n    shareReplay(1)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 191
                },
                {
                    "name": "data$",
                    "defaultValue": "this._data$.pipe(\n    map((value) => (isObservable(value) ? value : of(value))),\n    switchMap((obs) => combineLatest([obs])),\n    withLatestFrom(this.tableConfig$),\n    map(([[data], config]) => {\n      // if columns or rows contains config for mapTo...\n      if (\n        (config.columns &&\n          !!Object.values(config.columns).find((column) => !!column.mapTo)) ||\n        (config.rows &&\n          !!Object.values(config.rows).find((column) => !!column.mapTo))\n      ) {\n        // ...map data to new keys on row...\n        data = data.map((row) => {\n          const newKeys = Object.entries(config.columns || config.rows || [])\n            .filter(([key, value]) => !!value.mapTo) // add keys for columns with mapTo config...\n            .reduce(\n              (previousValue, currentValue) => ({\n                ...previousValue,\n                // tslint:disable-next-line:no-non-null-assertion\n                [currentValue[0]]: this.nestedValue(\n                  row,\n                  currentValue[1].mapTo!.path,\n                  currentValue[1].mapTo?.missingValue\n                ),\n              }),\n              {}\n            );\n          return { ...row, ...newKeys };\n        });\n      }\n      return { data, config };\n    }),\n    switchMap((obs) =>\n      combineLatest([\n        of(obs),\n        this.sortBy$.pipe(startWith(EMPTY)),\n        this.searchBy$,\n      ])\n    ),\n    map(([table, sortBy, searchBy]) => {\n      // create a new array reference and sort new array (prevent mutating existing state)\n      table.data = [...table.data];\n      return !sortBy\n        ? searchBy\n          ? search(searchBy, false, table.data, table.config)\n          : table.data\n        : (searchBy\n            ? search(searchBy, false, table.data, table.config)\n            : table.data\n          )?.sort((a, b) => {\n            // TODO: improve logic\n            const typed = sortBy as TableSort;\n            return a[typed.sortBy] > b[typed.sortBy]\n              ? typed.sortByOrder === Order.ASC\n                ? 1\n                : -1\n              : b[typed.sortBy] > a[typed.sortBy]\n              ? typed.sortByOrder === Order.ASC\n                ? -1\n                : 1\n              : 0;\n          });\n    }),\n    shareReplay(1)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Array<TableRow>>",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "searchBy$",
                    "defaultValue": "this._searchBy$.pipe(\n    startWith(''),\n    map((value) => (isObservable(value) ? value : of(value))),\n    switchMap((obs) => obs),\n    shareReplay(1)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | null>",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "sortBy$",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<TableSort>",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "table$",
                    "defaultValue": "combineLatest([\n    this.data$,\n    this.tableConfig$,\n  ]).pipe(\n    map(([sorted, config]) => {\n      // if pagination is disabled...\n      if (!config.pagination || config.pagination.length === 0) {\n        // ...return unaltered array\n        return {\n          data: [sorted],\n          config,\n          info: { records: sorted.length, pageTotal: 1 },\n        };\n      }\n      // return record set\n      return {\n        data: chunk(sorted, +(config.pagination.length || 0)),\n        config,\n        info: {\n          records: sorted.length,\n          pageTotal: Math.ceil(\n            sorted.length / +(config.pagination.length || 0)\n          ),\n        },\n      };\n    }),\n    shareReplay(1)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TableMeta>",
                    "optional": false,
                    "description": "",
                    "line": 161
                },
                {
                    "name": "tableConfig$",
                    "defaultValue": "this._tableConfig$.pipe(\n    map((value) => (isObservable(value) ? value : of(value))),\n    switchMap((obs) => obs),\n    shareReplay(1)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TableConfig>",
                    "optional": false,
                    "description": "",
                    "line": 86
                }
            ],
            "methodsClass": [
                {
                    "name": "nestedValue",
                    "args": [
                        {
                            "name": "object",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mapTo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "missingValue",
                            "type": "string | number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null"
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "object",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mapTo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "missingValue",
                            "type": "string | number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sort",
                    "args": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  EMPTY,\n  isObservable,\n  Observable,\n  of,\n  ReplaySubject,\n  Subject,\n} from 'rxjs';\nimport { TableConfig } from './models/table-config.interface';\nimport { KeyValue } from '@angular/common';\nimport {\n  map,\n  shareReplay,\n  startWith,\n  switchMap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { TableColumn } from './models/table-column.interface';\nimport { Order } from './enums/order.enum';\nimport { chunk, search } from './utilities/utilities';\nimport { TableRow } from './models/table-row.interface';\nimport { TableSort } from './models/table-sort.interface';\nimport { TableMeta } from './models/table-meta.interface';\n\n@Component({\n  selector: 'angular-generic-table',\n  templateUrl: './core.component.html',\n  styles: [],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CoreComponent {\n  @Input() set loading(isLoading: Observable<boolean> | boolean) {\n    this._loading$.next(isLoading);\n  }\n  @Input()\n  set page(page: number) {\n    this._currentPage$.next(page);\n  }\n\n  @Input()\n  set search(string: Observable<string> | string | null) {\n    this._searchBy$.next(string);\n  }\n\n  @Input()\n  set config(config: Observable<TableConfig> | TableConfig) {\n    this._tableConfig$.next(config);\n  }\n\n  @Input()\n  set data(data: Observable<Array<TableRow>> | Array<TableRow>) {\n    this._data$.next(data);\n  }\n\n  get loading$(): Observable<boolean> {\n    return this._loading$.pipe(\n      startWith(false),\n      map((value) => (isObservable(value) ? value : of(value))),\n      switchMap((obs) => obs),\n      shareReplay(1)\n    );\n  }\n\n  private _loading$: ReplaySubject<Observable<boolean> | boolean> =\n    new ReplaySubject(1);\n  sortBy$: Subject<TableSort> = new Subject();\n  // tslint:disable-next-line:variable-name\n  private _sortBy: TableSort | undefined;\n\n  // tslint:disable-next-line:variable-name\n  private _searchBy$: ReplaySubject<Observable<string> | string | null> =\n    new ReplaySubject(1);\n  searchBy$: Observable<string | null> = this._searchBy$.pipe(\n    startWith(''),\n    map((value) => (isObservable(value) ? value : of(value))),\n    switchMap((obs) => obs),\n    shareReplay(1)\n  );\n\n  // tslint:disable-next-line:variable-name\n  private _tableConfig$: ReplaySubject<TableConfig | Observable<TableConfig>> =\n    new ReplaySubject(1);\n  tableConfig$: Observable<TableConfig> = this._tableConfig$.pipe(\n    map((value) => (isObservable(value) ? value : of(value))),\n    switchMap((obs) => obs),\n    shareReplay(1)\n  );\n\n  private _data$: ReplaySubject<Array<TableRow> | Observable<Array<TableRow>>> =\n    new ReplaySubject(1);\n  data$: Observable<Array<TableRow>> = this._data$.pipe(\n    map((value) => (isObservable(value) ? value : of(value))),\n    switchMap((obs) => combineLatest([obs])),\n    withLatestFrom(this.tableConfig$),\n    map(([[data], config]) => {\n      // if columns or rows contains config for mapTo...\n      if (\n        (config.columns &&\n          !!Object.values(config.columns).find((column) => !!column.mapTo)) ||\n        (config.rows &&\n          !!Object.values(config.rows).find((column) => !!column.mapTo))\n      ) {\n        // ...map data to new keys on row...\n        data = data.map((row) => {\n          const newKeys = Object.entries(config.columns || config.rows || [])\n            .filter(([key, value]) => !!value.mapTo) // add keys for columns with mapTo config...\n            .reduce(\n              (previousValue, currentValue) => ({\n                ...previousValue,\n                // tslint:disable-next-line:no-non-null-assertion\n                [currentValue[0]]: this.nestedValue(\n                  row,\n                  currentValue[1].mapTo!.path,\n                  currentValue[1].mapTo?.missingValue\n                ),\n              }),\n              {}\n            );\n          return { ...row, ...newKeys };\n        });\n      }\n      return { data, config };\n    }),\n    switchMap((obs) =>\n      combineLatest([\n        of(obs),\n        this.sortBy$.pipe(startWith(EMPTY)),\n        this.searchBy$,\n      ])\n    ),\n    map(([table, sortBy, searchBy]) => {\n      // create a new array reference and sort new array (prevent mutating existing state)\n      table.data = [...table.data];\n      return !sortBy\n        ? searchBy\n          ? search(searchBy, false, table.data, table.config)\n          : table.data\n        : (searchBy\n            ? search(searchBy, false, table.data, table.config)\n            : table.data\n          )?.sort((a, b) => {\n            // TODO: improve logic\n            const typed = sortBy as TableSort;\n            return a[typed.sortBy] > b[typed.sortBy]\n              ? typed.sortByOrder === Order.ASC\n                ? 1\n                : -1\n              : b[typed.sortBy] > a[typed.sortBy]\n              ? typed.sortByOrder === Order.ASC\n                ? -1\n                : 1\n              : 0;\n          });\n    }),\n    shareReplay(1)\n  );\n\n  table$: Observable<TableMeta> = combineLatest([\n    this.data$,\n    this.tableConfig$,\n  ]).pipe(\n    map(([sorted, config]) => {\n      // if pagination is disabled...\n      if (!config.pagination || config.pagination.length === 0) {\n        // ...return unaltered array\n        return {\n          data: [sorted],\n          config,\n          info: { records: sorted.length, pageTotal: 1 },\n        };\n      }\n      // return record set\n      return {\n        data: chunk(sorted, +(config.pagination.length || 0)),\n        config,\n        info: {\n          records: sorted.length,\n          pageTotal: Math.ceil(\n            sorted.length / +(config.pagination.length || 0)\n          ),\n        },\n      };\n    }),\n    shareReplay(1)\n  );\n\n  private _currentPage$: BehaviorSubject<number> = new BehaviorSubject(0);\n  currentPage$ = combineLatest([this._currentPage$, this.table$]).pipe(\n    map(([page, table]: any) => {\n      // determine last page\n      const lastPage =\n        Math.ceil(\n          table.info.records /\n            (table.config?.pagination?.length || table.info.records)\n        ) - 1;\n      // determine max/min position\n      return +page < 0 ? 0 : +page > lastPage ? lastPage : +page;\n    }),\n    shareReplay(1)\n  );\n\n  colspan$ = this.tableConfig$.pipe(\n    switchMap((config) =>\n      config.columns\n        ? of(\n            Object.values(config.columns || config.rows || {}).filter(\n              (value) => value.hidden !== true\n            ).length\n          )\n        : this.data$.pipe(map((data) => data.length + 1))\n    )\n  );\n\n  sort(property: string): void {\n    const newSortOrder =\n      this._sortBy?.sortBy !== property ||\n      this._sortBy?.sortByOrder === Order.DESC ||\n      !this._sortBy.sortByOrder\n        ? Order.ASC\n        : Order.DESC;\n    const newSortBy = {\n      sortBy: property,\n      sortByOrder: newSortOrder,\n    };\n    this.sortBy$.next(newSortBy);\n    this._sortBy = newSortBy;\n  }\n\n  columnOrder = (\n    a: KeyValue<string, TableColumn>,\n    b: KeyValue<string, TableColumn>\n  ): number => {\n    return (a.value.order || 0) - (b.value.order || 0);\n  };\n\n  nestedValue(\n    object: any,\n    mapTo: string,\n    missingValue: string | number | null = null\n  ): unknown {\n    const levels = mapTo.split('.');\n    return levels.reduce(\n      (previousValue, currentValue, index) =>\n        previousValue[currentValue] ||\n        (index === levels.length - 1 ? missingValue : {}),\n      object\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "loading": {
                    "name": "loading",
                    "setSignature": {
                        "name": "loading",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "isLoading",
                                "type": "Observable<boolean> | boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 35,
                        "jsdoctags": [
                            {
                                "name": "isLoading",
                                "type": "Observable<boolean> | boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "page": {
                    "name": "page",
                    "setSignature": {
                        "name": "page",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "page",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 39,
                        "jsdoctags": [
                            {
                                "name": "page",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "search": {
                    "name": "search",
                    "setSignature": {
                        "name": "search",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "string",
                                "type": "Observable<string> | string | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 44,
                        "jsdoctags": [
                            {
                                "name": "string",
                                "type": "Observable<string> | string | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "config": {
                    "name": "config",
                    "setSignature": {
                        "name": "config",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "config",
                                "type": "Observable<TableConfig> | TableConfig",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 49,
                        "jsdoctags": [
                            {
                                "name": "config",
                                "type": "Observable<TableConfig> | TableConfig",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "data": {
                    "name": "data",
                    "setSignature": {
                        "name": "data",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "data",
                                "type": "Observable<Array<TableRow>> | Array<TableRow>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 54,
                        "jsdoctags": [
                            {
                                "name": "data",
                                "type": "Observable<Array<TableRow>> | Array<TableRow>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "loading$": {
                    "name": "loading$",
                    "getSignature": {
                        "name": "loading$",
                        "type": "",
                        "returnType": "Observable<boolean>",
                        "line": 58
                    }
                }
            },
            "templateData": "<table\n  [ngClass]=\"(tableConfig$ | async)?.class || 'table'\"\n  [class.table-mobile]=\"(tableConfig$ | async)?.mobileLayout\"\n  [class.table-horizontal]=\"(tableConfig$ | async)?.rows\"\n  [class.table-loading]=\"loading$ | async\"\n  [class.gt-sticky-row-header]=\"\n    (tableConfig$ | async)?.stickyHeaders?.row && (tableConfig$ | async)?.rows\n  \"\n  [class.gt-sticky-column-header]=\"\n    (tableConfig$ | async)?.stickyHeaders?.column\n  \"\n  [attr.aria-busy]=\"(loading$ | async) === true ? true : null\"\n>\n  <thead>\n    <tr\n      *ngIf=\"{\n        config: (tableConfig$ | async)!,\n        isLoading: loading$ | async\n      } as table\"\n    >\n      <ng-container\n        *ngFor=\"let column of table?.config?.columns | keyvalue: columnOrder\"\n      >\n        <th\n          *ngIf=\"!column.value?.hidden\"\n          ngClass=\"{{ (column.key | dashCase) + '-column' }} {{\n            column.value.class\n          }}\"\n          [class.disabled]=\"table.isLoading\"\n          [attr.aria-sort]=\"sortBy$ | async | sortClass: column.key:true\"\n          [class.gt-sortable]=\"true\"\n          scope=\"col\"\n        >\n          <button\n            *ngIf=\"column.value?.sortable\"\n            class=\"gt-sort\"\n            (click)=\"\n              table.isLoading || !column.value?.sortable || sort(column.key)\n            \"\n          >\n            <span *ngIf=\"column.value?.header !== false\">{{\n              column.value?.header || column.key | capitalCase\n            }}</span>\n          </button>\n          <span\n            *ngIf=\"!column.value?.sortable && column.value?.header !== false\"\n            >{{ column.value?.header || column.key | capitalCase }}</span\n          >\n        </th>\n      </ng-container>\n      <ng-container\n        *ngIf=\"\n          ((table?.config?.rows | keyvalue: columnOrder) || [])[0] as headerRow\n        \"\n      >\n        <th\n          class=\"row-header\"\n          [attr.aria-sort]=\"sortBy$ | async | sortClass: headerRow.key:true\"\n          ngClass=\"{{ headerRow.value?.sortable ? 'sort ' : '' }} {{\n            sortBy$ | async | sortClass: headerRow.key\n          }} {{ (headerRow.key | dashCase) + '-column' }}\"\n          (click)=\"\n            table.isLoading || !headerRow.value?.sortable || sort(headerRow.key)\n          \"\n          scope=\"col\"\n        >\n          <ng-container *ngIf=\"headerRow?.value?.header !== false\">{{\n            headerRow?.value?.header || headerRow.key | capitalCase\n          }}</ng-container>\n        </th>\n        <th\n          *ngFor=\"let column of ((table$ | async)?.data || [])[0]\"\n          ngClass=\"{{ headerRow.value?.class }}\"\n        >\n          <ng-container\n            [ngTemplateOutlet]=\"\n              (table.config?.rows || {})[headerRow.key].templateRef\n                ? templateRef\n                : (table.config?.rows || {})[headerRow.key].transform\n                ? transformData\n                : rawData\n            \"\n            [ngTemplateOutletContext]=\"{\n              row: column,\n              column: headerRow,\n              transform: (table.config?.rows || {})[headerRow.key].transform,\n              templateRef: (table.config?.rows || {})[headerRow.key]\n                .templateRef,\n              index: 0\n            }\"\n          >\n          </ng-container>\n        </th>\n      </ng-container>\n    </tr>\n  </thead>\n  <tbody *ngIf=\"loading$ | async; else tableContent\">\n    <tr>\n      <td class=\"p-0\" [colSpan]=\"colspan$ | async\">\n        <ng-content select=\".table-loading\"></ng-content>\n      </td>\n    </tr>\n  </tbody>\n</table>\n<ng-template #tableContent>\n  <ng-container *ngIf=\"(table$ | async)! as table\">\n    <tbody *ngIf=\"(table!.data![0] || table!.data!).length > 0; else noData\">\n      <ng-container *ngIf=\"table.config.columns\">\n        <tr\n          *ngFor=\"\n            let row of table!.data![(currentPage$ | async) || 0];\n            let i = index\n          \"\n          [attr.id]=\"'tableRow_' + i\"\n        >\n          <ng-container\n            *ngFor=\"let column of table.config?.columns | keyvalue: columnOrder\"\n          >\n            <td\n              *ngIf=\"!column.value?.hidden\"\n              ngClass=\"{{ (column.key | dashCase) + '-column' }} {{\n                column.value?.class\n              }}\"\n              [attr.data-label]=\"\n                table.config?.mobileLayout && column.value?.mobileHeader\n                  ? column.value?.mobileHeader !== true\n                    ? column.value?.mobileHeader\n                    : (column.value?.header || column.key | capitalCase)\n                  : null\n              \"\n            >\n              <ng-container\n                [ngTemplateOutlet]=\"\n                  (searchBy$ | async) &&\n                  !(table.config?.columns || {})[column.key].templateRef\n                    ? highlighted\n                    : (table.config?.columns || {})[column.key].templateRef\n                    ? templateRef\n                    : (table.config?.columns || {})[column.key].transform\n                    ? transformData\n                    : rawData\n                \"\n                [ngTemplateOutletContext]=\"{\n                  row: row,\n                  column: column,\n                  search: (searchBy$ | async),\n                  transform: (table.config?.columns || {})[column.key]\n                    .transform,\n                  templateRef: (table.config?.columns || {})[column.key]\n                    .templateRef,\n                  index: i,\n                  data: table.data[(currentPage$ | async) || 0]\n                }\"\n              ></ng-container>\n            </td>\n          </ng-container>\n        </tr>\n      </ng-container>\n      <ng-container *ngIf=\"table.config.rows\">\n        <ng-container\n          *ngFor=\"\n            let row of table?.config?.rows | keyvalue: columnOrder | slice: 1;\n            let i = index\n          \"\n        >\n          <tr\n            *ngIf=\"!row.value?.hidden\"\n            [attr.id]=\"'tableRow_' + i\"\n            ngClass=\"{{ (row.key | dashCase) + '-row' }}\"\n          >\n            <th class=\"row-header\" scope=\"row\">\n              {{ row.value?.header || row.key | capitalCase }}\n            </th>\n            <td\n              *ngFor=\"let column of (table?.data || [])[0]; let y = index\"\n              ngClass=\"{{ row.value?.class }}\"\n            >\n              <ng-container\n                [ngTemplateOutlet]=\"\n                  (table.config?.rows || {})[row.key].templateRef\n                    ? templateRef\n                    : (table.config?.rows || {})[row.key].transform\n                    ? transformData\n                    : rawData\n                \"\n                [ngTemplateOutletContext]=\"{\n                  row: column,\n                  column: row,\n                  transform: (table.config?.rows || {})[row.key].transform,\n                  templateRef: (table.config?.rows || {})[row.key].templateRef,\n                  index: table.config?.rows ? y : i,\n                  data: table.data[(currentPage$ | async) || 0]\n                }\"\n              >\n              </ng-container>\n            </td>\n          </tr>\n        </ng-container>\n      </ng-container>\n    </tbody>\n  </ng-container>\n</ng-template>\n<ng-template #noData>\n  <tbody>\n    <tr>\n      <td class=\"p-0\" [colSpan]=\"colspan$ | async\">\n        <ng-content select=\".table-no-data\"></ng-content>\n      </td>\n    </tr>\n  </tbody>\n</ng-template>\n<ng-template #highlighted let-row=\"row\" let-column=\"column\" let-search=\"search\">\n  <div [innerHTML]=\"row[column.key] | highlight: search\"></div>\n</ng-template>\n<ng-template #rawData let-row=\"row\" let-column=\"column\">\n  {{ row[column.key] }}\n</ng-template>\n<ng-template\n  #transformData\n  let-row=\"row\"\n  let-column=\"column\"\n  let-transform=\"transform\"\n  let-data=\"data\"\n>\n  {{ row[column.key] | dynamicPipe: transform.pipe:transform?.args }}\n</ng-template>\n<ng-template\n  #templateRef\n  let-row=\"row\"\n  let-column=\"column\"\n  let-index=\"index\"\n  let-templateRef=\"templateRef\"\n  let-data=\"data\"\n>\n  <ng-container\n    [ngTemplateOutlet]=\"templateRef\"\n    [ngTemplateOutletContext]=\"{\n      row: row,\n      col: column,\n      index: index,\n      data: data\n    }\"\n  ></ng-container>\n</ng-template>\n"
        },
        {
            "name": "CustomTemplatesComponent",
            "id": "component-CustomTemplatesComponent-6cecf532b8a2e4c2eaf23ea4201513aedce4fd037994d2ffc381a761e281dfc1b925f4a7d1c7439b0d14f4d6ea855e4ddb4d7152151bee330f72ba15f3c570b3",
            "file": "projects/docs/src/app/examples/custom-templates/custom-templates.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-custom-templates",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"overflow-auto\">\n  <angular-generic-table\n    [data]=\"data\"\n    [config]=\"config$\"\n  ></angular-generic-table>\n</div>\n<ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n  <button\n    class=\"btn btn-outline-primary btn-sm my-sm-n3 text-nowrap\"\n    (click)=\"clickAction(row, col, index)\"\n  >\n    Click me!\n  </button>\n</ng-template>\n<ng-template #color let-row=\"row\" let-col=\"col\">\n  <div\n    [style.background]=\"row[col.key]\"\n    style=\"width: 1.5rem; height: 1.5rem; border-radius: 50%\"\n  ></div>\n</ng-template>\n{{ clicked }}\n<docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'actions', {static: true}"
                        }
                    ]
                },
                {
                    "name": "clicked",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'color', {static: true}"
                        }
                    ]
                },
                {
                    "name": "config$",
                    "defaultValue": "new ReplaySubject(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplaySubject<TableConfig>",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "data",
                    "defaultValue": "[\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteColor: '#26BFAF',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteColor: '#0f0',\n      favoriteFood: 'Pizza',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "SNIPPETS",
                    "defaultValue": "CUSTOM_TEMPLATES_DOCS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "methodsClass": [
                {
                    "name": "clickAction",
                    "args": [
                        {
                            "name": "row",
                            "type": "TableRow",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "column",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TableRow",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "column",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { Story } from '@storybook/angular/types-6-0';\nimport {\n  TableConfig,\n  TableRow,\n  TableColumn,\n} from '@angular-generic-table/core';\nimport { ReplaySubject } from 'rxjs';\nimport { CUSTOM_TEMPLATES_DOCS } from './custom-templates.snippets';\n\n@Component({\n  selector: 'docs-custom-templates',\n  template: `\n    <div class=\"overflow-auto\">\n      <angular-generic-table\n        [data]=\"data\"\n        [config]=\"config$\"\n      ></angular-generic-table>\n    </div>\n    <ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n      <button\n        class=\"btn btn-outline-primary btn-sm my-sm-n3 text-nowrap\"\n        (click)=\"clickAction(row, col, index)\"\n      >\n        Click me!\n      </button>\n    </ng-template>\n    <ng-template #color let-row=\"row\" let-col=\"col\">\n      <div\n        [style.background]=\"row[col.key]\"\n        style=\"width: 1.5rem; height: 1.5rem; border-radius: 50%\"\n      ></div>\n    </ng-template>\n    {{ clicked }}\n    <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n  `,\n})\nexport class CustomTemplatesComponent implements OnInit {\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  @ViewChild('color', { static: true }) color: TemplateRef<any> | undefined;\n  clicked = '';\n\n  data = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteColor: '#26BFAF',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteColor: '#0f0',\n      favoriteFood: 'Pizza',\n    },\n  ];\n  config$: ReplaySubject<TableConfig> = new ReplaySubject(1);\n\n  SNIPPETS = CUSTOM_TEMPLATES_DOCS;\n  ngOnInit(): void {\n    this.config$.next({\n      columns: {\n        firstName: {},\n        lastName: {},\n        gender: {},\n        favoriteColor: {\n          templateRef: this.color,\n        },\n        favoriteFood: {},\n        action: {\n          templateRef: this.actions,\n        },\n      },\n    });\n  }\n  clickAction(\n    row: TableRow,\n    column: { key: string; value: TableColumn },\n    index: number\n  ): void {\n    console.log('clicked row:', row, 'col:', column);\n    this.clicked = `clicked row number: ${index}`;\n  }\n}\n\nexport const CustomTemplates: Story<CustomTemplatesComponent> = (\n  args: CustomTemplatesComponent\n) => ({\n  props: args,\n  component: CustomTemplatesComponent,\n});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "GtDeltaComponent",
            "id": "component-GtDeltaComponent-6fd03daa2704a9ff5639b8b9d1ea3620aed7018176b68fe45a400dc853b7ac73502336be442783ff224e41587dd572a86ef3357383260f206b4e3a4509c43e47",
            "file": "projects/core/src/lib/gt-delta/gt-delta.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "gt-delta",
            "styleUrls": [],
            "styles": [
                "\n      :host {\n        display: inline-block;\n      }\n    "
            ],
            "template": "<span    *ngIf=\"{\n      value:\n        index === 0\n          ? initialValue\n          : ((baseIndex === undefined\n              ? data[index - 1][key]\n              : data[baseIndex][key]) -\n              data[index][key]) /\n            -Math.abs(\n              baseIndex === undefined\n                ? data[index - 1][key]\n                : data[baseIndex][key]\n            )\n    } as delta\"\n    [class]=\"[\n      classes.span,\n      !delta.value || !Number.isFinite(delta.value)\n        ? null\n        : delta.value > 0\n        ? classes.positive\n        : classes.negative\n    ]\"\n    [class.gt-delta-positive]=\"delta.value > 0 && Number.isFinite(delta.value)\"\n    [class.gt-delta-negative]=\"delta.value < 0\"\n    >{{\n      Number.isFinite(delta.value)\n        ? (delta.value | percent)\n        : delta.value === initialValue\n        ? initialValue\n        : notApplicableValue\n    }}</span\n  >",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "baseIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "classes",
                    "defaultValue": "{\n    span: 'gt-delta',\n    positive: 'text-success',\n    negative: 'text-danger',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "{ span: string; positive: string; negative: string; }",
                    "decorators": []
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "TableRows",
                    "decorators": []
                },
                {
                    "name": "index",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "initialValue",
                    "defaultValue": "'-'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "key",
                    "defaultValue": "'value'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "notApplicableValue",
                    "defaultValue": "'n/a'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "Math",
                    "defaultValue": "Math",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "Number",
                    "defaultValue": "Number",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { TableRows } from '../models/table-row.interface';\n\n@Component({\n  selector: 'gt-delta',\n  template: `<span\n    *ngIf=\"{\n      value:\n        index === 0\n          ? initialValue\n          : ((baseIndex === undefined\n              ? data[index - 1][key]\n              : data[baseIndex][key]) -\n              data[index][key]) /\n            -Math.abs(\n              baseIndex === undefined\n                ? data[index - 1][key]\n                : data[baseIndex][key]\n            )\n    } as delta\"\n    [class]=\"[\n      classes.span,\n      !delta.value || !Number.isFinite(delta.value)\n        ? null\n        : delta.value > 0\n        ? classes.positive\n        : classes.negative\n    ]\"\n    [class.gt-delta-positive]=\"delta.value > 0 && Number.isFinite(delta.value)\"\n    [class.gt-delta-negative]=\"delta.value < 0\"\n    >{{\n      Number.isFinite(delta.value)\n        ? (delta.value | percent)\n        : delta.value === initialValue\n        ? initialValue\n        : notApplicableValue\n    }}</span\n  >`,\n  styles: [\n    `\n      :host {\n        display: inline-block;\n      }\n    `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class GtDeltaComponent {\n  constructor() {}\n  Math = Math;\n  Number = Number;\n  @Input() data: TableRows = [];\n  @Input() index: number = 0;\n  @Input() baseIndex?: number;\n  @Input() classes = {\n    span: 'gt-delta',\n    positive: 'text-success',\n    negative: 'text-danger',\n  };\n  @Input() key: string = 'value';\n  @Input() notApplicableValue: string = 'n/a';\n  @Input() initialValue: string = '-';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      :host {\n        display: inline-block;\n      }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 48
            }
        },
        {
            "name": "HorizontalTableComponent",
            "id": "component-HorizontalTableComponent-c908ce0b9358de7e6185b2abf3560e1f8ecd6bd235001c0639bee6d8162114188bb0c3932d8f9cf57f96ce1245d0d0729ff19b8045b758f8a9032c496d1d91a8",
            "file": "projects/docs/src/app/examples/horizontal-table/horizontal-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-horizontal-table",
            "styleUrls": [],
            "styles": [],
            "template": "<button class=\"btn btn-outline-primary\" (click)=\"simulateLoad()\">\n  Simulate load\n</button>\n<button class=\"btn btn-outline-danger mx-3\" (click)=\"empty()\">Empty</button>\n<button class=\"btn btn-outline-primary\" (click)=\"load()\">Reset</button>\n<div class=\"overflow-auto\">\n  <angular-generic-table\n    [data]=\"data\"\n    [config]=\"config\"\n    [loading]=\"loading$\"\n  >\n    <div class=\"table-loading gt-skeleton-loader\"></div>\n    <div class=\"table-no-data alert alert-info mt-3\">Table is empty</div>\n  </angular-generic-table>\n</div>\n<ng-template #feelings let-row=\"row\" let-col=\"col\">\n  <div [ngSwitch]=\"row[col.key]\">\n    <ng-container *ngSwitchCase=\"'thrilled'\">😀</ng-container>\n    <ng-container *ngSwitchCase=\"'positive'\">🙂</ng-container>\n    <ng-container *ngSwitchCase=\"'neutral'\">😐</ng-container>\n    <ng-container *ngSwitchCase=\"'negative'\">😭</ng-container>\n  </div>\n</ng-template>\n<ng-template #delta let-data=\"data\" let-index=\"index\">\n  <gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>\n</ng-template>\n<ng-template #deltaIndex let-data=\"data\" let-index=\"index\">\n  <gt-delta [index]=\"index\" [baseIndex]=\"0\" [data]=\"data\"></gt-delta>\n</ng-template>\n<docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableConfig",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRows",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "delta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<GtDeltaComponent> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'delta', {static: true}"
                        }
                    ]
                },
                {
                    "name": "deltaIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<GtDeltaComponent> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'deltaIndex', {static: true}"
                        }
                    ]
                },
                {
                    "name": "feelings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'feelings', {static: true}"
                        }
                    ]
                },
                {
                    "name": "loading$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "SNIPPETS",
                    "defaultValue": "HORIZONTAL_TABLE_SNIPPETS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 131
                }
            ],
            "methodsClass": [
                {
                    "name": "empty",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "load",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "simulateLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { Story } from '@storybook/angular/types-6-0';\nimport { HORIZONTAL_TABLE_SNIPPETS } from './horizontal-table.snippets';\nimport {\n  GtDeltaComponent,\n  TableConfig,\n  TableRows,\n} from '@angular-generic-table/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Component({\n  selector: 'docs-horizontal-table',\n  template: `\n    <button class=\"btn btn-outline-primary\" (click)=\"simulateLoad()\">\n      Simulate load\n    </button>\n    <button class=\"btn btn-outline-danger mx-3\" (click)=\"empty()\">Empty</button>\n    <button class=\"btn btn-outline-primary\" (click)=\"load()\">Reset</button>\n    <div class=\"overflow-auto\">\n      <angular-generic-table\n        [data]=\"data\"\n        [config]=\"config\"\n        [loading]=\"loading$\"\n      >\n        <div class=\"table-loading gt-skeleton-loader\"></div>\n        <div class=\"table-no-data alert alert-info mt-3\">Table is empty</div>\n      </angular-generic-table>\n    </div>\n    <ng-template #feelings let-row=\"row\" let-col=\"col\">\n      <div [ngSwitch]=\"row[col.key]\">\n        <ng-container *ngSwitchCase=\"'thrilled'\">😀</ng-container>\n        <ng-container *ngSwitchCase=\"'positive'\">🙂</ng-container>\n        <ng-container *ngSwitchCase=\"'neutral'\">😐</ng-container>\n        <ng-container *ngSwitchCase=\"'negative'\">😭</ng-container>\n      </div>\n    </ng-template>\n    <ng-template #delta let-data=\"data\" let-index=\"index\">\n      <gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>\n    </ng-template>\n    <ng-template #deltaIndex let-data=\"data\" let-index=\"index\">\n      <gt-delta [index]=\"index\" [baseIndex]=\"0\" [data]=\"data\"></gt-delta>\n    </ng-template>\n    <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n  `,\n  styles: [],\n})\nexport class HorizontalTableComponent implements OnInit {\n  @ViewChild('feelings', { static: true }) feelings:\n    | TemplateRef<any>\n    | undefined;\n  @ViewChild('delta', { static: true }) delta:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  @ViewChild('deltaIndex', { static: true }) deltaIndex:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  loading$ = new BehaviorSubject(false);\n  config: TableConfig = {};\n  data: TableRows = [];\n\n  ngOnInit(): void {\n    this.config = {\n      stickyHeaders: {\n        row: true,\n      },\n      mobileLayout: true,\n      rows: {\n        year: {\n          class: 'text-end',\n          header: false,\n        },\n        value: {\n          class: 'text-end',\n        },\n        delta: {\n          header: 'Delta %',\n          templateRef: this.delta,\n          class: 'text-end',\n        },\n        deltaIndex: {\n          header: 'Since inception %',\n          templateRef: this.deltaIndex,\n          class: 'text-end',\n        },\n        feeling: {\n          templateRef: this.feelings,\n          class: 'text-end',\n        },\n      },\n    };\n    this.load();\n  }\n  simulateLoad(): void {\n    this.loading$.next(true);\n    // set loading state to false after 2 seconds\n    setTimeout(() => this.loading$.next(false), 2000);\n  }\n  empty(): void {\n    this.data = [];\n  }\n  load(): void {\n    this.data = [\n      {\n        year: '2017',\n        value: 50,\n        feeling: 'neutral',\n      },\n      {\n        year: '2018',\n        value: 75,\n        feeling: 'positive',\n      },\n      {\n        year: '2019',\n        value: 100,\n        feeling: 'thrilled',\n      },\n      {\n        year: '2020',\n        value: 250,\n        feeling: 'thrilled',\n      },\n      {\n        year: '2021',\n        value: 50,\n        feeling: 'negative',\n      },\n    ];\n  }\n\n  SNIPPETS = HORIZONTAL_TABLE_SNIPPETS;\n}\n\nexport const Horizontal: Story<HorizontalTableComponent> = (\n  args: HorizontalTableComponent\n) => ({\n  props: args,\n  component: HorizontalTableComponent,\n});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "MobileLayoutComponent",
            "id": "component-MobileLayoutComponent-2ccdf200e7b7f3afa39e0e6fdca8c7ea0f53af37d1eb3722378cbcaba073ec2e8a214f10e4485e4464b0ea63b3d083009815564424e37fbd8206a83200f4ed92",
            "file": "projects/docs/src/app/examples/mobile-layout/mobile-layout.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-mobile-layout",
            "styleUrls": [],
            "styles": [
                "\n      .table th {\n        white-space: nowrap;\n      }\n    "
            ],
            "template": "<div class=\"d-flex justify-content-end mb-1 align-items-center\">\n  {{ clicked }}\n  <button class=\"btn btn-link d-sm-none \" (click)=\"toggleLayout()\">\n    {{ (mobileLayout$ | async) ? 'Desktop ' : 'Mobile ' }} layout\n  </button>\n</div>\n<div [class.overflow-auto]=\"(mobileLayout$ | async) === false\">\n  <angular-generic-table\n    [data]=\"data\"\n    [config]=\"config$\"\n  ></angular-generic-table>\n</div>\n<ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n  <button\n    class=\"btn btn-outline-primary btn-sm my-sm-n3 text-nowrap\"\n    (click)=\"clickAction(row, col, index)\"\n  >\n    Click me!\n  </button>\n</ng-template>\n<docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'actions', {static: true}"
                        }
                    ]
                },
                {
                    "name": "clicked",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "config$",
                    "defaultValue": "this.mobileLayout$.pipe(\n    map((mobileLayout) => ({\n      mobileLayout,\n      columns: {\n        firstName: {\n          mobileHeader: true,\n          sortable: true,\n        },\n        lastName: {\n          mobileHeader: true,\n          sortable: true,\n        },\n        gender: {\n          mobileHeader: true,\n          transform: {\n            pipe: GenderPipe,\n          },\n        },\n        favoriteFood: {\n          mobileHeader: true,\n        },\n        action: {\n          mobileHeader: false,\n          header: false,\n          templateRef: this.actions,\n        },\n      },\n    }))\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<TableConfig>",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "data",
                    "defaultValue": "[\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "mobileLayout$",
                    "defaultValue": "new BehaviorSubject(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "SNIPPETS",
                    "defaultValue": "MOBILE_LAYOUT_SNIPPETS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "toggleLayout",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 113
                }
            ],
            "methodsClass": [
                {
                    "name": "clickAction",
                    "args": [
                        {
                            "name": "row",
                            "type": "TableRow",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "column",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "TableRow",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "column",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Pipe,\n  PipeTransform,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { Story } from '@storybook/angular/types-6-0';\nimport {\n  TableColumn,\n  TableConfig,\n  TableRow,\n} from '@angular-generic-table/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { MOBILE_LAYOUT_SNIPPETS } from './mobileLayout.snippets';\n\n@Pipe({\n  name: 'genderPipe',\n})\nexport class GenderPipe implements PipeTransform {\n  transform(gender: 'male' | 'female'): string {\n    return gender === 'male' ? '👨' : '👩';\n  }\n}\n\n@Component({\n  selector: 'docs-mobile-layout',\n  template: `\n    <div class=\"d-flex justify-content-end mb-1 align-items-center\">\n      {{ clicked }}\n      <button class=\"btn btn-link d-sm-none \" (click)=\"toggleLayout()\">\n        {{ (mobileLayout$ | async) ? 'Desktop ' : 'Mobile ' }} layout\n      </button>\n    </div>\n    <div [class.overflow-auto]=\"(mobileLayout$ | async) === false\">\n      <angular-generic-table\n        [data]=\"data\"\n        [config]=\"config$\"\n      ></angular-generic-table>\n    </div>\n    <ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n      <button\n        class=\"btn btn-outline-primary btn-sm my-sm-n3 text-nowrap\"\n        (click)=\"clickAction(row, col, index)\"\n      >\n        Click me!\n      </button>\n    </ng-template>\n    <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n  `,\n  styles: [\n    `\n      .table th {\n        white-space: nowrap;\n      }\n    `,\n  ],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MobileLayoutComponent {\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  clicked = '';\n\n  mobileLayout$ = new BehaviorSubject(true);\n  data = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n    },\n  ];\n  config$: Observable<TableConfig> = this.mobileLayout$.pipe(\n    map((mobileLayout) => ({\n      mobileLayout,\n      columns: {\n        firstName: {\n          mobileHeader: true,\n          sortable: true,\n        },\n        lastName: {\n          mobileHeader: true,\n          sortable: true,\n        },\n        gender: {\n          mobileHeader: true,\n          transform: {\n            pipe: GenderPipe,\n          },\n        },\n        favoriteFood: {\n          mobileHeader: true,\n        },\n        action: {\n          mobileHeader: false,\n          header: false,\n          templateRef: this.actions,\n        },\n      },\n    }))\n  );\n\n  SNIPPETS = MOBILE_LAYOUT_SNIPPETS;\n\n  toggleLayout = (): void => {\n    this.mobileLayout$.next(!this.mobileLayout$.getValue());\n  };\n  clickAction(\n    row: TableRow,\n    column: { key: string; value: TableColumn },\n    index: number\n  ): void {\n    console.log('clicked row:', row, 'col:', column);\n    this.clicked = `Clicked row number: ${index}`;\n  }\n}\n\nexport const Mobile: Story<MobileLayoutComponent> = (\n  args: MobileLayoutComponent\n) => ({\n  props: args,\n  component: MobileLayoutComponent,\n});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      .table th {\n        white-space: nowrap;\n      }\n    \n"
        },
        {
            "name": "NestedDataComponent",
            "id": "component-NestedDataComponent-ba03f02a98cc4ad9bde4815796062b9ac0dc528bfcc1f5e8e29aae1ae510ea9141e119673eb1865b1875aecc73e3ba4743d1923e1577dad3670a8ad69c4d374a",
            "file": "projects/docs/src/app/examples/nested-data/nested-data.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "nested-data",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"row gy-3\">\n  <div class=\"col col-sm-auto\">\n    <button class=\"btn btn-outline-primary mb-3\" (click)=\"loadData()\">\n      Load other data\n    </button>\n  </div>\n  <div class=\"col col-sm-auto\">\n    <button class=\"btn btn-outline-primary mb-3\" (click)=\"resetData()\">\n      Reset\n    </button>\n  </div>\n</div>\n<div class=\"overflow-auto\">\n  <angular-generic-table\n    [data]=\"data\"\n    [config]=\"config\"\n  ></angular-generic-table>\n</div>\n<docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n<ng-template #gender let-row=\"row\" let-col=\"col\">\n  <div [ngSwitch]=\"row[col.key]\">\n    <ng-container *ngSwitchCase=\"'male'\">♂️</ng-container>\n    <ng-container *ngSwitchCase=\"'female'\">♀️</ng-container>\n  </div>\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableConfig",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRows",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'gender', {static: true}"
                        }
                    ]
                },
                {
                    "name": "SNIPPETS",
                    "defaultValue": "NESTED_SNIPPETS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 132
                }
            ],
            "methodsClass": [
                {
                    "name": "loadData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { NESTED_SNIPPETS } from './nested.snippets';\nimport { Story } from '@storybook/angular/types-6-0';\nimport { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { TableConfig, TableRows } from '@angular-generic-table/core';\n\n@Component({\n  selector: 'nested-data',\n  template: `\n    <div class=\"row gy-3\">\n      <div class=\"col col-sm-auto\">\n        <button class=\"btn btn-outline-primary mb-3\" (click)=\"loadData()\">\n          Load other data\n        </button>\n      </div>\n      <div class=\"col col-sm-auto\">\n        <button class=\"btn btn-outline-primary mb-3\" (click)=\"resetData()\">\n          Reset\n        </button>\n      </div>\n    </div>\n    <div class=\"overflow-auto\">\n      <angular-generic-table\n        [data]=\"data\"\n        [config]=\"config\"\n      ></angular-generic-table>\n    </div>\n    <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n    <ng-template #gender let-row=\"row\" let-col=\"col\">\n      <div [ngSwitch]=\"row[col.key]\">\n        <ng-container *ngSwitchCase=\"'male'\">♂️</ng-container>\n        <ng-container *ngSwitchCase=\"'female'\">♀️</ng-container>\n      </div>\n    </ng-template>\n  `,\n  styles: [],\n})\nexport class NestedDataComponent implements OnInit {\n  @ViewChild('gender', { static: true }) gender: TemplateRef<any> | undefined;\n\n  config: TableConfig = {};\n  data: TableRows = [];\n  ngOnInit(): void {\n    this.resetData();\n    this.config = {\n      columns: {\n        firstName: {\n          sortable: true,\n          mapTo: { path: 'name.first' },\n        },\n        lastName: {\n          mapTo: { path: 'name.last' },\n        },\n        gender: {\n          mapTo: { path: 'data.details.gender' },\n          templateRef: this.gender,\n        },\n        favoriteFood: {\n          mapTo: { path: 'data.details.favoriteFood', missingValue: 'n/a' },\n        },\n        missing: {\n          mapTo: { path: 'data.missingKey.noMatch', missingValue: 'n/a' },\n        },\n      },\n    };\n  }\n\n  resetData() {\n    this.data = [\n      {\n        name: {\n          first: 'Peter',\n          last: 'Parker',\n        },\n        data: {\n          details: {\n            gender: 'male',\n            favoriteFood: 'Pasta',\n          },\n        },\n      },\n      {\n        name: {\n          first: 'Mary Jane',\n          last: 'Watson',\n        },\n        data: {\n          details: {\n            gender: 'female',\n            favoriteFood: 'Pizza',\n          },\n        },\n      },\n    ];\n  }\n\n  loadData(): void {\n    this.data = [\n      {\n        name: {\n          first: 'John',\n          last: 'Doe',\n        },\n        data: {\n          details: {\n            gender: 'male',\n            favoriteFood: 'Pasta',\n          },\n        },\n      },\n      {\n        name: {\n          first: 'Jane',\n          last: 'Doe',\n        },\n        data: {\n          details: {\n            gender: 'female',\n            favoriteFood: 'Pizza',\n          },\n        },\n      },\n      {\n        name: {\n          first: 'Foo',\n          last: 'Bar',\n        },\n        data: {},\n      },\n    ];\n  }\n\n  SNIPPETS = NESTED_SNIPPETS;\n}\n\nexport const Nested: Story<NestedDataComponent> = (\n  args: NestedDataComponent\n) => ({\n  props: args,\n  component: NestedDataComponent,\n});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "PaginationComponent",
            "id": "component-PaginationComponent-a357a4c0fd2e8981242f212925300a40d0bbac4d08ab558c2fe5121b33f4911eb4637651c0bcc7e1b21d07b487f52a6b70633335c229c178f61ce2ff6185bd01",
            "file": "projects/core/src/lib/pagination/pagination.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "angular-generic-table-pagination",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./pagination.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "GtPaginationAriaLabels",
                    "decorators": []
                },
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "GtPaginationClasses",
                    "decorators": []
                },
                {
                    "name": "paginationLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_ariaLabels",
                    "defaultValue": "{\n    nav: 'Table pagination',\n    button: 'Go to page ',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GtPaginationAriaLabels",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_classes",
                    "defaultValue": "{\n    ul: 'pagination',\n    li: 'page-item',\n    button: 'page-link',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GtPaginationClasses",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_paginationLength",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CoreComponent | undefined",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "pagination$",
                    "defaultValue": "this.table$.pipe(\n    switchMap((core) =>\n      combineLatest([core?.table$.pipe(pluck('info')), core?.currentPage$])\n    ),\n    map(([info, currentPage]) => this.generateList(info.pageTotal, currentPage))\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "table$",
                    "defaultValue": "new ReplaySubject(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplaySubject<CoreComponent>",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methodsClass": [
                {
                    "name": "generateList",
                    "args": [
                        {
                            "name": "pages",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<number>",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pages",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentPosition",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goto",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { combineLatest, ReplaySubject } from 'rxjs';\nimport { map, pluck, switchMap } from 'rxjs/operators';\nimport { CoreComponent } from '../core.component';\nimport {\n  GtPaginationAriaLabels,\n  GtPaginationClasses,\n} from '../models/gt-pagination';\n\n@Component({\n  selector: 'angular-generic-table-pagination',\n  templateUrl: './pagination.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaginationComponent {\n  get paginationLength(): number {\n    return this._paginationLength;\n  }\n\n  @Input() set paginationLength(value: number) {\n    this._paginationLength = +value;\n  }\n  get classes(): GtPaginationClasses {\n    return this._classes;\n  }\n\n  @Input() set classes(value: GtPaginationClasses) {\n    this._classes = value;\n  }\n  get ariaLabels(): GtPaginationAriaLabels {\n    return this._ariaLabels;\n  }\n\n  @Input() set ariaLabels(value: GtPaginationAriaLabels) {\n    this._ariaLabels = value;\n  }\n  get table(): CoreComponent | undefined {\n    return this._table;\n  }\n  @Input() set table(value: any) {\n    this._table = value;\n    this.table$.next(value);\n  }\n\n  table$: ReplaySubject<CoreComponent> = new ReplaySubject(1);\n  private _table: CoreComponent | undefined;\n  private _ariaLabels: GtPaginationAriaLabels = {\n    nav: 'Table pagination',\n    button: 'Go to page ',\n  };\n  private _classes: GtPaginationClasses = {\n    ul: 'pagination',\n    li: 'page-item',\n    button: 'page-link',\n  };\n  private _paginationLength: number = 5;\n  pagination$ = this.table$.pipe(\n    switchMap((core) =>\n      combineLatest([core?.table$.pipe(pluck('info')), core?.currentPage$])\n    ),\n    map(([info, currentPage]) => this.generateList(info.pageTotal, currentPage))\n  );\n\n  generateList(pages: number, currentPosition: number): Array<number> {\n    const middle = Math.floor(this.paginationLength / 2);\n    const length =\n      pages < this.paginationLength ? pages : this.paginationLength;\n\n    return Array.from({ length }, (_, i) => {\n      if (i === 0) {\n        return 1;\n      } else if (pages < this.paginationLength) {\n        return i + 1;\n      } else if (i + 1 === length) {\n        return pages;\n      } else if (currentPosition > middle && currentPosition < pages - middle) {\n        return i + currentPosition - (middle - 1);\n      } else if (\n        currentPosition > middle &&\n        currentPosition < pages - (middle - 1)\n      ) {\n        return i + currentPosition - middle;\n      } else if (\n        currentPosition > middle &&\n        currentPosition === pages - (middle - 1)\n      ) {\n        return i + currentPosition - (middle + 1);\n      } else if (currentPosition > middle && currentPosition === pages - 1) {\n        return i + currentPosition - (middle + 2);\n      } else {\n        return i + 1;\n      }\n    });\n  }\n\n  goto(page: number): void {\n    if (this.table) {\n      this.table.page = page - 1;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "paginationLength": {
                    "name": "paginationLength",
                    "setSignature": {
                        "name": "paginationLength",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "paginationLength",
                        "type": "number",
                        "returnType": "number",
                        "line": 16
                    }
                },
                "classes": {
                    "name": "classes",
                    "setSignature": {
                        "name": "classes",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "GtPaginationClasses",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "GtPaginationClasses",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "classes",
                        "type": "",
                        "returnType": "GtPaginationClasses",
                        "line": 23
                    }
                },
                "ariaLabels": {
                    "name": "ariaLabels",
                    "setSignature": {
                        "name": "ariaLabels",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "GtPaginationAriaLabels",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 34,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "GtPaginationAriaLabels",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "ariaLabels",
                        "type": "",
                        "returnType": "GtPaginationAriaLabels",
                        "line": 30
                    }
                },
                "table": {
                    "name": "table",
                    "setSignature": {
                        "name": "table",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 40,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "table",
                        "type": "",
                        "returnType": "CoreComponent | undefined",
                        "line": 37
                    }
                }
            },
            "templateData": "<ng-container\n  *ngIf=\"{\n    links: pagination$ | async,\n    currentPosition: table?.currentPage$ | async\n  } as pagination\"\n>\n  <nav\n    *ngIf=\"pagination.links && pagination.links.length > 1\"\n    role=\"navigation\"\n    [attr.aria-label]=\"ariaLabels?.nav\"\n    class=\"gt-pagination\"\n    [class]=\"classes?.nav\"\n  >\n    <ul [class]=\"classes?.ul\">\n      <ng-container\n        *ngFor=\"\n          let position of pagination!.links;\n          let i = index;\n          let last = last\n        \"\n      >\n        <li\n          [class]=\"classes?.li\"\n          [class.active]=\"position === (pagination!.currentPosition || 0) + 1\"\n        >\n          <button\n            [class]=\"classes?.button\"\n            [attr.aria-label]=\"ariaLabels.button + position\"\n            (click)=\"goto(position)\"\n          >\n            {{ position }}\n          </button>\n        </li>\n        <li\n          [class]=\"classes?.li\"\n          class=\"gt-ellipsis\"\n          *ngIf=\"position + 1 !== pagination!.links![i + 1] && !last\"\n        >\n          <button [class]=\"classes?.button\" disabled tabindex=\"-1\"></button>\n        </li>\n      </ng-container>\n    </ul>\n  </nav>\n</ng-container>\n"
        },
        {
            "name": "PaginationComponent",
            "id": "component-PaginationComponent-46d9b689fa8fc058795acf4372840786e973f255d8c34ef86c27fee53e2eaf54a19a2143a297960b44f4dcf5a158e812f51a4660dd3dff831f02af02c6610c4e-1",
            "file": "projects/docs/src/app/examples/pagination/pagination.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-pagination",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./pagination.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'actions', {static: true}"
                        }
                    ]
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'color', {static: true}"
                        }
                    ]
                },
                {
                    "name": "data$",
                    "defaultValue": "this.http\n    .get('https://private-730c61-generictable.apiary-mock.com/data')\n    .pipe(\n      pluck('data'),\n      tap((_) => this.loading$.next(false))\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "loading$",
                    "defaultValue": "new BehaviorSubject(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "paginationForm",
                    "defaultValue": "this.fb.group({\n    length: [10],\n    search: [''],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "search$",
                    "defaultValue": "this.paginationForm.get('search')\n    ?.valueChanges as Observable<string>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "SNIPPETS",
                    "defaultValue": "ADVANCED_DOCS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "tableConfig$",
                    "defaultValue": "new ReplaySubject(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReplaySubject<TableConfig>",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { FormBuilder } from '@angular/forms';\nimport { TableConfig } from '@angular-generic-table/core';\nimport { pluck, tap, withLatestFrom } from 'rxjs/operators';\nimport { Story } from '@storybook/angular/types-6-0';\nimport { ADVANCED_DOCS } from './pagination.snippets';\nimport { HttpClient } from '@angular/common/http';\nimport { DatePipe } from '@angular/common';\n\n@Component({\n  selector: 'docs-pagination',\n  templateUrl: './pagination.component.html',\n  styles: [],\n})\nexport class PaginationComponent implements OnInit {\n  constructor(private fb: FormBuilder, private http: HttpClient) {}\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  @ViewChild('color', { static: true }) color: TemplateRef<any> | undefined;\n  paginationForm = this.fb.group({\n    length: [10],\n    search: [''],\n  });\n  search$ = this.paginationForm.get('search')\n    ?.valueChanges as Observable<string>;\n  loading$ = new BehaviorSubject(true);\n  data$: Observable<any> = this.http\n    .get('https://private-730c61-generictable.apiary-mock.com/data')\n    .pipe(\n      pluck('data'),\n      tap((_) => this.loading$.next(false))\n    );\n\n  tableConfig$: ReplaySubject<TableConfig> = new ReplaySubject(1);\n  SNIPPETS = ADVANCED_DOCS;\n\n  ngOnInit(): void {\n    this.paginationForm\n      .get('length')\n      ?.valueChanges.pipe(withLatestFrom(this.tableConfig$))\n      .subscribe(([length, config]) => {\n        length = +length;\n        this.tableConfig$.next({\n          ...config,\n          pagination: { ...config.pagination, length },\n        });\n      });\n    this.tableConfig$.next({\n      class: 'table text-nowrap',\n      columns: {\n        first_name: {\n          sortable: true,\n        },\n        last_name: {\n          sortable: true,\n        },\n        gender: {\n          sortable: true,\n        },\n        birthday: {\n          sortable: true,\n          class: 'text-end',\n          transform: {\n            pipe: DatePipe,\n            args: ['longDate'],\n          },\n        },\n      },\n      pagination: {\n        length: this.paginationForm.get('length')?.value || 0,\n      },\n    });\n  }\n}\n\nexport const Pagination: Story<PaginationComponent> = (\n  args: PaginationComponent\n) => ({\n  props: args,\n  component: PaginationComponent,\n});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "PaginationComponent-1",
            "templateData": "<form [formGroup]=\"paginationForm\">\n  <div class=\"row gy-3\">\n    <div class=\"form-group col-12 col-sm-auto\">\n      <label for=\"length_input\">Number of rows</label>\n      <input\n        id=\"length_input\"\n        formControlName=\"length\"\n        type=\"number\"\n        class=\"form-control\"\n      />\n    </div>\n    <div class=\"form-group col-12 col-sm-auto\">\n      <label for=\"search_input\">Search</label>\n      <input\n        id=\"search_input\"\n        formControlName=\"search\"\n        type=\"text\"\n        class=\"form-control\"\n      />\n    </div>\n  </div>\n</form>\n<div class=\"mx-n3 mx-sm-0 my-3 overflow-auto\">\n  <angular-generic-table\n    [data]=\"data$\"\n    [config]=\"tableConfig$\"\n    [search]=\"search$\"\n    [loading]=\"loading$\"\n    #table\n  >\n    <div class=\"table-loading gt-skeleton-loader\"></div>\n    <div class=\"table-no-data alert alert-info mt-3\">Table is empty</div>\n  </angular-generic-table>\n</div>\n<angular-generic-table-pagination [table]=\"table\">\n</angular-generic-table-pagination>\n<docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n"
        },
        {
            "name": "SimpleComponent",
            "id": "component-SimpleComponent-0b5dd4ea6bbba305fe50e9c4b02fd7024d3188e43c876f0e50e70daa720c81241199fe599856f3b690d9d26233f5595f0f5dc4eb9c83b21836b42afcebe76819",
            "file": "projects/docs/src/app/examples/simple/simple.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-simple",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"overflow-auto\">\n  <angular-generic-table\n    [data]=\"data\"\n    [config]=\"config\"\n  ></angular-generic-table>\n</div>\n<docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "defaultValue": "{\n    columns: {\n      firstName: {},\n      lastName: {},\n      gender: {},\n      favoriteFood: {},\n    },\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "data",
                    "defaultValue": "[\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "SNIPPETS",
                    "defaultValue": "SIMPLE_SNIPPETS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Story } from '@storybook/angular/types-6-0';\nimport { SIMPLE_SNIPPETS } from './simple.snippets';\n\n@Component({\n  selector: 'docs-simple',\n  template: `\n    <div class=\"overflow-auto\">\n      <angular-generic-table\n        [data]=\"data\"\n        [config]=\"config\"\n      ></angular-generic-table>\n    </div>\n    <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n  `,\n  styles: [],\n})\nexport class SimpleComponent {\n  data = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n    },\n  ];\n  config = {\n    columns: {\n      firstName: {},\n      lastName: {},\n      gender: {},\n      favoriteFood: {},\n    },\n  };\n\n  SNIPPETS = SIMPLE_SNIPPETS;\n}\n\nexport const Simple: Story<SimpleComponent> = (args: SimpleComponent) => ({\n  props: args,\n  component: SimpleComponent,\n});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "TabsComponent",
            "id": "component-TabsComponent-131f2b0e18f1436b6da2d042a7674c3bca41a9b2821d858a001d8873585a47d68d9414129ece9918196f171b9c45bdc8e4e00d03967e23b35d316ddbcc4b6563",
            "file": "projects/docs/src/app/components/tabs/tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-tabs",
            "styleUrls": [
                "./tabs.component.scss"
            ],
            "styles": [],
            "template": "<ul class=\"nav nav-tabs mt-4 flex-nowrap text-nowrap overflow-auto\">\n  <li class=\"nav-item\" *ngFor=\"let item of content; let i = index\">\n    <button\n      class=\"nav-link btn-link\"\n      [class.active]=\"activeIndex === i\"\n      (click)=\"view(i)\"\n    >\n      {{ item.name }}\n    </button>\n  </li>\n</ul>\n<ng-container *ngIf=\"activeContent\">\n  <pre><code [innerHTML]=\"activeContent?.value\" class=\"{{'language-' + activeContent?.language}}\"></code></pre>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_content",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "activeContent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HighlightResult | undefined",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "activeIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "view",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { Story } from '@storybook/angular/types-6-0';\nimport hljs from 'highlight.js/lib/core';\nimport { HighlightResult } from 'highlight.js';\n\nimport typescript from 'highlight.js/lib/languages/typescript';\nimport xml from 'highlight.js/lib/languages/xml';\nimport scss from 'highlight.js/lib/languages/scss';\n\nhljs.registerLanguage('typescript', typescript);\nhljs.registerLanguage('scss', scss);\nhljs.registerLanguage('xml', xml);\n\n@Component({\n  selector: 'docs-tabs',\n  template: `\n    <ul class=\"nav nav-tabs mt-4 flex-nowrap text-nowrap overflow-auto\">\n      <li class=\"nav-item\" *ngFor=\"let item of content; let i = index\">\n        <button\n          class=\"nav-link btn-link\"\n          [class.active]=\"activeIndex === i\"\n          (click)=\"view(i)\"\n        >\n          {{ item.name }}\n        </button>\n      </li>\n    </ul>\n    <ng-container *ngIf=\"activeContent\">\n      <pre><code [innerHTML]=\"activeContent?.value\" class=\"{{'language-' + activeContent?.language}}\"></code></pre>\n    </ng-container>\n  `,\n  styleUrls: ['./tabs.component.scss'],\n})\nexport class TabsComponent implements OnInit {\n  get content(): any {\n    return this._content;\n  }\n\n  @Input() set content(value: any) {\n    this._content = value;\n  }\n  constructor() {}\n  activeIndex = 0;\n  activeContent: HighlightResult | undefined;\n\n  private _content: Array<{}> = [];\n  ngOnInit(): void {\n    this.activeContent = hljs.highlight(this.content[this.activeIndex].code, {\n      language: this.content[this.activeIndex].language,\n    });\n  }\n\n  view(index: number): void {\n    this.activeIndex = index;\n    this.activeContent = hljs.highlight(this.content[index].code, {\n      language: this.content[index].language,\n    });\n  }\n}\n\nexport const Tabs: Story<TabsComponent> = (args: TabsComponent) => ({\n  props: args,\n  component: TabsComponent,\n});\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "pre {\n  background-image: linear-gradient(0deg, #f8f8f8 25%, #ffffff 25%, #ffffff 50%, #f8f8f8 50%, #f8f8f8 75%, #ffffff 75%, #ffffff 100%);\n  background-size: 84.00px 84.00px;\n  padding: 21px 1rem;\n}\nul {\n  &::-webkit-scrollbar {\n    display: none;\n  }\n  -ms-overflow-style: none; /* IE and Edge */\n  scrollbar-width: none; /* Firefox */\n}\n",
                    "styleUrl": "./tabs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 41
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "content": {
                    "name": "content",
                    "setSignature": {
                        "name": "content",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 39,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "content",
                        "type": "any",
                        "returnType": "any",
                        "line": 35
                    }
                }
            }
        },
        {
            "name": "TransposeComponent",
            "id": "component-TransposeComponent-5c484b1c03b3a68cc9049f5911de2a9a6592a5f67ce934a34fba7d66acdf6cd43a90d88750f22ef97abb04510dea0f05a5f8340cf2f1f24a4b231618fd1e05e9",
            "file": "projects/docs/src/app/examples/transpose/transpose.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "docs-transpose",
            "styleUrls": [],
            "styles": [],
            "template": "<form [formGroup]=\"reactiveForm\">\n  <div class=\"row gy-3 gx-3 align-items-end mb-3\">\n    <div class=\"form-group col-6 col-sm-auto\">\n      <label for=\"length_input\">Number of rows</label>\n      <input\n        id=\"length_input\"\n        formControlName=\"length\"\n        type=\"number\"\n        class=\"form-control\"\n      />\n    </div>\n    <div class=\"form-group col-6 col-sm-auto\">\n      <label for=\"search_input\">Search</label>\n      <input\n        id=\"search_input\"\n        formControlName=\"search\"\n        type=\"text\"\n        class=\"form-control\"\n      />\n    </div>\n    <div class=\"col-auto\">\n      <button\n        class=\"btn btn-outline-primary w-100\"\n        (click)=\"simulateLoad()\"\n      >\n        Simulate load\n      </button>\n    </div>\n    <div class=\"col col-sm-auto\">\n      <button class=\"btn btn-outline-danger w-100\" (click)=\"empty()\">\n        Empty\n      </button>\n    </div>\n    <div class=\"col col-sm-auto\">\n      <button class=\"btn btn-outline-primary w-100\" (click)=\"load()\">\n        Reset\n      </button>\n    </div>\n    <div class=\"col col-sm-auto\">\n      <button class=\"btn btn-outline-primary w-100\" (click)=\"transpose()\">\n        Transpose\n      </button>\n    </div>\n  </div>\n  <div class=\"overflow-auto\">\n    <angular-generic-table\n      #table\n      [data]=\"data\"\n      [config]=\"tableConfig$\"\n      [loading]=\"loading$\"\n      [search]=\"search$\"\n    >\n      <div class=\"table-loading gt-skeleton-loader\"></div>\n      <div class=\"table-no-data alert alert-info mt-3\">Table is empty</div>\n    </angular-generic-table>\n  </div>\n  <angular-generic-table-pagination [table]=\"table\">\n  </angular-generic-table-pagination>\n  <ng-template #delta let-index=\"index\" let-data=\"data\">\n    <gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>\n  </ng-template>\n  <ng-template #deltaIndex let-index=\"index\" let-data=\"data\">\n    <gt-delta [index]=\"index\" [data]=\"data\" [baseIndex]=\"0\"></gt-delta>\n  </ng-template>\n  <ng-template\n    #combined\n    let-index=\"index\"\n    let-data=\"data\"\n    let-row=\"row\"\n    let-col=\"col\"\n  >\n    {{ row.value }}\n    <ng-container *ngIf=\"index > 0\">\n      (<gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>)\n    </ng-container>\n  </ng-template>\n  <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n</form>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "combined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<GtDeltaComponent> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'combined', {static: true}"
                        }
                    ]
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRows",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "delta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<GtDeltaComponent> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 98,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'delta', {static: true}"
                        }
                    ]
                },
                {
                    "name": "deltaIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<GtDeltaComponent> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'deltaIndex', {static: true}"
                        }
                    ]
                },
                {
                    "name": "loading$",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "reactiveForm",
                    "defaultValue": "this.fb.group({\n    length: [10],\n    search: [''],\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 108
                },
                {
                    "name": "search$",
                    "defaultValue": "this.reactiveForm.get('search')?.valueChanges as Observable<string>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "SNIPPETS",
                    "defaultValue": "TRANSPOSE_SNIPPETS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 261
                },
                {
                    "name": "tableConfig$",
                    "defaultValue": "new BehaviorSubject<TableConfig>(\n    {}\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<TableConfig>",
                    "optional": false,
                    "description": "",
                    "line": 113
                }
            ],
            "methodsClass": [
                {
                    "name": "empty",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "load",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "simulateLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "transpose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport {\n  TableConfig,\n  TableRows,\n  GtDeltaComponent,\n} from '@angular-generic-table/core';\nimport { FormBuilder } from '@angular/forms';\nimport { withLatestFrom } from 'rxjs/operators';\nimport { Story } from '@storybook/angular/types-6-0';\nimport { TRANSPOSE_SNIPPETS } from './transpose.snippets';\n\n@Component({\n  selector: 'docs-transpose',\n  template: `\n    <form [formGroup]=\"reactiveForm\">\n      <div class=\"row gy-3 gx-3 align-items-end mb-3\">\n        <div class=\"form-group col-6 col-sm-auto\">\n          <label for=\"length_input\">Number of rows</label>\n          <input\n            id=\"length_input\"\n            formControlName=\"length\"\n            type=\"number\"\n            class=\"form-control\"\n          />\n        </div>\n        <div class=\"form-group col-6 col-sm-auto\">\n          <label for=\"search_input\">Search</label>\n          <input\n            id=\"search_input\"\n            formControlName=\"search\"\n            type=\"text\"\n            class=\"form-control\"\n          />\n        </div>\n        <div class=\"col-auto\">\n          <button\n            class=\"btn btn-outline-primary w-100\"\n            (click)=\"simulateLoad()\"\n          >\n            Simulate load\n          </button>\n        </div>\n        <div class=\"col col-sm-auto\">\n          <button class=\"btn btn-outline-danger w-100\" (click)=\"empty()\">\n            Empty\n          </button>\n        </div>\n        <div class=\"col col-sm-auto\">\n          <button class=\"btn btn-outline-primary w-100\" (click)=\"load()\">\n            Reset\n          </button>\n        </div>\n        <div class=\"col col-sm-auto\">\n          <button class=\"btn btn-outline-primary w-100\" (click)=\"transpose()\">\n            Transpose\n          </button>\n        </div>\n      </div>\n      <div class=\"overflow-auto\">\n        <angular-generic-table\n          #table\n          [data]=\"data\"\n          [config]=\"tableConfig$\"\n          [loading]=\"loading$\"\n          [search]=\"search$\"\n        >\n          <div class=\"table-loading gt-skeleton-loader\"></div>\n          <div class=\"table-no-data alert alert-info mt-3\">Table is empty</div>\n        </angular-generic-table>\n      </div>\n      <angular-generic-table-pagination [table]=\"table\">\n      </angular-generic-table-pagination>\n      <ng-template #delta let-index=\"index\" let-data=\"data\">\n        <gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>\n      </ng-template>\n      <ng-template #deltaIndex let-index=\"index\" let-data=\"data\">\n        <gt-delta [index]=\"index\" [data]=\"data\" [baseIndex]=\"0\"></gt-delta>\n      </ng-template>\n      <ng-template\n        #combined\n        let-index=\"index\"\n        let-data=\"data\"\n        let-row=\"row\"\n        let-col=\"col\"\n      >\n        {{ row.value }}\n        <ng-container *ngIf=\"index > 0\">\n          (<gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>)\n        </ng-container>\n      </ng-template>\n      <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n    </form>\n  `,\n  styles: [],\n})\nexport class TransposeComponent implements OnInit {\n  @ViewChild('delta', { static: true }) delta:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  @ViewChild('deltaIndex', { static: true }) deltaIndex:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  @ViewChild('combined', { static: true }) combined:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  loading$ = new BehaviorSubject(false);\n  reactiveForm = this.fb.group({\n    length: [10],\n    search: [''],\n  });\n  search$ = this.reactiveForm.get('search')?.valueChanges as Observable<string>;\n  tableConfig$: BehaviorSubject<TableConfig> = new BehaviorSubject<TableConfig>(\n    {}\n  );\n  data: TableRows = [];\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.transpose();\n    this.load();\n    this.reactiveForm\n      .get('length')\n      ?.valueChanges.pipe(withLatestFrom(this.tableConfig$))\n      .subscribe(([length, config]) => {\n        length = +length;\n        this.tableConfig$.next({\n          ...config,\n          pagination: { ...config.pagination, length },\n        });\n      });\n  }\n\n  simulateLoad(): void {\n    this.loading$.next(true);\n    // set loading state to false after 2 seconds\n    setTimeout(() => this.loading$.next(false), 2000);\n  }\n  empty(): void {\n    this.data = [];\n  }\n  load(): void {\n    this.data = [\n      {\n        year: '2010',\n        value: 15,\n      },\n      {\n        year: '2011',\n        value: 30,\n      },\n      {\n        year: '2012',\n        value: 25,\n      },\n      {\n        year: '2013',\n        value: 0,\n      },\n      {\n        year: '2014',\n        value: 40,\n      },\n      {\n        year: '2015',\n        value: 60,\n      },\n      {\n        year: '2016',\n        value: -5,\n      },\n      {\n        year: '2018',\n        value: 75,\n      },\n      {\n        year: '2019',\n        value: 100,\n      },\n      {\n        year: '2020',\n        value: 250,\n      },\n      {\n        year: '2021',\n        value: 50,\n      },\n      {\n        year: '2022',\n        value: 60,\n      },\n    ];\n  }\n  transpose(): void {\n    if (this.tableConfig$.value.columns) {\n      this.tableConfig$.next({\n        stickyHeaders: {\n          row: true,\n          column: true,\n        },\n        rows: {\n          year: {\n            sortable: true,\n            header: false,\n            class: 'text-end',\n          },\n          value: {\n            class: 'text-end',\n          },\n          delta: {\n            header: 'Delta %',\n            templateRef: this.delta,\n            class: 'text-end',\n          },\n          deltaIndex: {\n            header: 'Since inception %',\n            templateRef: this.deltaIndex,\n            class: 'text-end',\n          },\n          combined: {\n            header: 'Value with change',\n            templateRef: this.combined,\n            class: 'text-end text-nowrap',\n          },\n        },\n      });\n    } else {\n      this.tableConfig$.next({\n        stickyHeaders: {\n          row: true,\n          column: true,\n        },\n        columns: {\n          year: {\n            sortable: true,\n          },\n          value: {\n            class: 'text-end',\n          },\n          delta: {\n            header: 'Delta %',\n            templateRef: this.delta,\n            class: 'text-end',\n          },\n          deltaIndex: {\n            header: 'Since inception %',\n            templateRef: this.deltaIndex,\n            class: 'text-end',\n          },\n          combined: {\n            header: 'Value with change',\n            templateRef: this.combined,\n            class: 'text-end text-nowrap',\n          },\n        },\n        pagination: { length: this.reactiveForm.get('length')?.value },\n      });\n    }\n  }\n  SNIPPETS = TRANSPOSE_SNIPPETS;\n}\n\nexport const Transpose: Story<TransposeComponent> = (\n  args: TransposeComponent\n) => ({\n  props: args,\n  component: TransposeComponent,\n});\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 116,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-89f7a91051436709d9b7d773d883e71f72b875e31bdd56d24331cf0f2c214695f802c5b4a2de3f4eb30cd92f0fcf61f01974f3e855b3a513d673f32a8b0e5c44",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/docs/src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport {\n  GenericTableCoreModule,\n  GenericTablePaginationModule,\n} from '@angular-generic-table/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AdvancedComponent } from './examples/advanced/advanced.component';\nimport { SimpleComponent } from './examples/simple/simple.component';\nimport { TabsComponent } from './components/tabs/tabs.component';\nimport { CustomTemplatesComponent } from './examples/custom-templates/custom-templates.component';\nimport { PaginationComponent } from './examples/pagination/pagination.component';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { HorizontalTableComponent } from './examples/horizontal-table/horizontal-table.component';\nimport { MobileLayoutComponent } from './examples/mobile-layout/mobile-layout.component';\nimport { NestedDataComponent } from './examples/nested-data/nested-data.component';\nimport { TransposeComponent } from './examples/transpose/transpose.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AdvancedComponent,\n    SimpleComponent,\n    HorizontalTableComponent,\n    PaginationComponent,\n    TabsComponent,\n    CustomTemplatesComponent,\n    MobileLayoutComponent,\n    NestedDataComponent,\n    TransposeComponent,\n  ],\n  imports: [\n    BrowserModule,\n    CommonModule,\n    AppRoutingModule,\n    GenericTableCoreModule,\n    GenericTablePaginationModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AdvancedComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "CustomTemplatesComponent"
                        },
                        {
                            "name": "HorizontalTableComponent"
                        },
                        {
                            "name": "MobileLayoutComponent"
                        },
                        {
                            "name": "NestedDataComponent"
                        },
                        {
                            "name": "SimpleComponent"
                        },
                        {
                            "name": "TabsComponent"
                        },
                        {
                            "name": "TransposeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "GenericTableCoreModule"
                        },
                        {
                            "name": "GenericTablePaginationModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-eb45b2ac4ab3c78daaada47c136f608a009dd6215be163817bf37fa978e49db3729ac78473211a053c7450fe92772998aa972259265779327ad289ede4dfd448",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/docs/src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AdvancedComponent } from './examples/advanced/advanced.component';\nimport { SimpleComponent } from './examples/simple/simple.component';\nimport { CustomTemplatesComponent } from './examples/custom-templates/custom-templates.component';\nimport { PaginationComponent } from './examples/pagination/pagination.component';\nimport { HorizontalTableComponent } from './examples/horizontal-table/horizontal-table.component';\nimport { MobileLayoutComponent } from './examples/mobile-layout/mobile-layout.component';\nimport { NestedDataComponent } from './examples/nested-data/nested-data.component';\nimport { TransposeComponent } from './examples/transpose/transpose.component';\n\nconst routes: Routes = [\n  {\n    path: 'advanced',\n    component: AdvancedComponent,\n  },\n  {\n    path: 'pagination',\n    component: PaginationComponent,\n  },\n  {\n    path: 'simple',\n    component: SimpleComponent,\n  },\n  {\n    path: 'horizontal-table',\n    component: HorizontalTableComponent,\n  },\n  {\n    path: 'custom-templates',\n    component: CustomTemplatesComponent,\n  },\n  {\n    path: 'mobile-layout',\n    component: MobileLayoutComponent,\n  },\n  {\n    path: 'nested',\n    component: NestedDataComponent,\n  },\n  {\n    path: 'transpose',\n    component: TransposeComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GenericTableCoreModule",
            "id": "module-GenericTableCoreModule-412838afb3fc8bd33204e72942b4202f97e8a2240e4cfecd65853725d6c8a7bcf4004af04049e6ade1d2a83bf866d462a2c7b1d2d977ff4a5b8f3a66b46e4ca7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/core/src/lib/core.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CoreComponent } from './core.component';\nimport { CommonModule } from '@angular/common';\nimport { SortClassPipe } from './pipes/sort-class.pipe';\nimport { DashCasePipe } from './pipes/dash-case.pipe';\nimport { HighlightPipe } from './pipes/highlight.pipe';\nimport { CapitalCasePipe } from './pipes/capital-case.pipe';\nimport { DynamicPipe } from './pipes/dynamic.pipe';\nimport { GtDeltaComponent } from './gt-delta/gt-delta.component';\n\n@NgModule({\n  declarations: [\n    CoreComponent,\n    SortClassPipe,\n    DashCasePipe,\n    HighlightPipe,\n    CapitalCasePipe,\n    CapitalCasePipe,\n    DynamicPipe,\n    GtDeltaComponent,\n  ],\n  imports: [CommonModule],\n  exports: [CoreComponent, GtDeltaComponent],\n})\nexport class GenericTableCoreModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CapitalCasePipe"
                        },
                        {
                            "name": "CapitalCasePipe"
                        },
                        {
                            "name": "CoreComponent"
                        },
                        {
                            "name": "DashCasePipe"
                        },
                        {
                            "name": "DynamicPipe"
                        },
                        {
                            "name": "GtDeltaComponent"
                        },
                        {
                            "name": "HighlightPipe"
                        },
                        {
                            "name": "SortClassPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CoreComponent"
                        },
                        {
                            "name": "GtDeltaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "GenericTablePaginationModule",
            "id": "module-GenericTablePaginationModule-4bc1f2ff32c5ef89f9b49c103ec982791060de30b3b8e67c76e92bf4ab24d790153fbf7168ac565b06dc86471dcf93163a488edd215693012e6533d35a09fb09",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/core/src/lib/pagination/pagination.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  declarations: [PaginationComponent],\n  imports: [CommonModule],\n  exports: [PaginationComponent],\n})\nexport class GenericTablePaginationModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PaginationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PaginationComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Advanced",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/app.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<AppComponent>",
                "defaultValue": "(args: AppComponent) => ({\n  props: args,\n  component: AppComponent,\n})"
            },
            {
                "name": "Advanced",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/advanced/advanced.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<AdvancedComponent>",
                "defaultValue": "(\n  args: AdvancedComponent\n) => ({\n  props: args,\n  component: AdvancedComponent,\n})"
            },
            {
                "name": "ADVANCED_DOCS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/advanced/advanced.snippets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'advanced.component.html',\n    code: `<div class=\"row gx-2 gy-3 mb-3\">\n  <div class=\"col-12 col-sm-auto\">\n    <button class=\"btn btn-primary w-100\" (click)=\"addData()\">Add random data</button>\n  </div>\n  <div class=\"col-12 col-sm-auto\">\n    <button class=\"btn btn-danger w-100\" (click)=\"removeData()\">Remove data</button>\n  </div>\n  <div class=\"col-12 col-sm-auto\">\n    <button class=\"btn btn-secondary w-100\" (click)=\"simulateLoad()\">Load</button>\n  </div>\n</div>\n<form [formGroup]=\"paginationForm\">\n  <div class=\"row\">\n    <div class=\"form-group col-12 col-sm-auto\">\n      <label for=\"length_input\">Length</label>\n      <input id=\"length_input\" formControlName=\"length\" type=\"number\" class=\"form-control\">\n    </div>\n    <div class=\"form-group col-12 col-sm-auto\">\n      <label for=\"search_input\">Search</label>\n      <input id=\"search_input\" formControlName=\"search\" type=\"text\" class=\"form-control\">\n    </div>\n  </div>\n</form>\n<div class=\"mx-n3 mx-sm-0\">\n  <angular-generic-table [data]=\"data$\" [config]=\"tableConfig$\" [page]=\"(currentPage$ | async)!\" [search]=\"search$\" [loading]=\"loading$\" #table>\n    <div class=\"table-loading gt-skeleton-loader\"></div>\n    <div class=\"table-no-data alert alert-info mt-3\">\n      Table is empty\n    </div>\n  </angular-generic-table>\n</div>\n<div class=\"row justify-content-between justify-content-sm-center align-items-center mt-3\" *ngIf=\"{current: (currentPage$ | async) || 0,total: (table.table$ | async)?.info?.pageTotal || 1\n} as pagination\">\n  <div class=\"col-auto\">\n    <button class=\"btn btn-primary\" (click)=\"prev()\" [disabled]=\"pagination.current === 0\">Prev</button>\n  </div>\n  <div class=\"col-auto\">\n    <button class=\"btn btn-primary\" (click)=\"next()\" [disabled]=\"pagination.total -1 === pagination.current\">Next</button>\n  </div>\n  <div class=\"col-auto\">Current page: {{pagination.current +1}}</div>\n  <div class=\"col-auto\">Total pages: {{pagination.total}}</div>\n  <div class=\"col-auto\">\n    Records: {{(data$ | async).length}}\n  </div>\n  <div class=\"col-auto\">\n    {{clicked}}\n  </div>\n</div>\n<ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n  <button class=\"btn btn-outline-primary btn-sm my-sm-n3\" (click)=\"clickAction(row, col, index)\">Click me!</button>\n</ng-template>\n<ng-template #color let-row=\"row\" let-col=\"col\">\n  <div [style.background]=\"row[col.key]\" style=\"width: 1.5rem; height: 1.5rem; border-radius: 50%\"></div>\n</ng-template>`,\n    language: 'xml',\n  },\n  {\n    name: 'advanced.component.ts',\n    code: `import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { FormBuilder } from '@angular/forms';\nimport { TableColumn, TableConfig, TableRow } from '@angular-generic-table/core';\nimport { withLatestFrom } from 'rxjs/operators';\n\n@Component({\n  selector: 'docs-advanced',\n  templateUrl: './advanced.component.html',\n  styles: [],\n})\nexport class AdvancedComponent implements OnInit {\n  get currentPage$(): Observable<number> {\n    return this._currentPage$.asObservable();\n  }\n\n  set currentPage(value: number) {\n    this._currentPage$.next(value);\n  }\n  constructor(private fb: FormBuilder) {}\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  @ViewChild('color', { static: true }) color: TemplateRef<any> | undefined;\n  paginationForm = this.fb.group({\n    length: [10],\n    search: [''],\n  });\n  search$ = this.paginationForm.get('search')?.valueChanges as Observable<string>;\n  loading$ = new BehaviorSubject(true);\n  data$: BehaviorSubject<any> = new BehaviorSubject([\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteColor: '#26BFAF',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteColor: '#0f0',\n      favoriteFood: 'Pizza',\n    },\n  ]);\n\n  private _currentPage$ = new BehaviorSubject(0);\n\n  clicked: string = '';\n  maleFirstNames = ['Peter', 'Clark', 'Ruben', 'John', 'Jack', 'Roscoe'];\n  femaleFirstNames = ['Mary Jane', 'Kim', 'Sarah', 'Michelle', 'Ann'];\n  lastNames = ['Andersson', 'Smith', 'Parker', 'Kent', 'Rogers', 'Lane', 'Jackson'];\n  foods = ['Pizza', 'Pasta', 'Hamburger', 'Pancakes', 'Tacos', 'Lasagna', 'Meatloaf'];\n  colors = ['#33d60b', '#dcafff', '#3fc9ff', '#ff1600', '#5238b1', '#fff'];\n\n  tableConfig$: ReplaySubject<TableConfig> = new ReplaySubject(1);\n\n  addData(): void {\n    this.data$.next([...this.data$.getValue(), this.randomRecord()]);\n  }\n\n  removeData(): void {\n    this.data$.next([]);\n  }\n\n  simulateLoad(): void {\n    this.loading$.next(true);\n    // set loading state to false after 2 seconds\n    setTimeout(() => this.loading$.next(false), 2000);\n  }\n\n  clickAction(row: TableRow, column: { key: string; value: TableColumn }, index: number): void {\n    console.log('clicked row:', row, 'col:', column);\n    this.clicked = \\`clicked row number: \\${index}\\`;\n  }\n\n  randomRecord(): TableRow {\n    const random = Math.floor(Math.random() * 2);\n    const newRecord = {\n      firstName: random\n        ? this.maleFirstNames[Math.floor(Math.random() * this.maleFirstNames.length)]\n        : this.femaleFirstNames[Math.floor(Math.random() * this.femaleFirstNames.length)],\n      lastName: this.lastNames[Math.floor(Math.random() * this.lastNames.length)],\n      gender: random ? 'male' : 'female',\n      favoriteColor: this.colors[Math.floor(Math.random() * this.colors.length)],\n      favoriteFood: this.foods[Math.floor(Math.random() * this.foods.length)],\n    };\n    console.log('added new random record:', newRecord);\n\n    return newRecord;\n  }\n\n  next = () => {\n    this.currentPage = this._currentPage$.value + 1;\n  };\n  prev = () => {\n    this.currentPage = this._currentPage$.value - 1;\n  };\n\n  ngOnInit(): void {\n    this.simulateLoad();\n    this.paginationForm\n      .get('length')\n      ?.valueChanges.pipe(withLatestFrom(this.tableConfig$))\n      .subscribe(([length, config]) => {\n        length = +length;\n        this.tableConfig$.next({\n          ...config,\n          pagination: { ...config.pagination, length },\n        });\n      });\n    this.tableConfig$.next({\n      class: 'table table-mobile text-nowrap mb-0',\n      columns: {\n        firstName: {\n          header: 'First name',\n          mobileHeader: true,\n          sortable: true,\n          order: 0,\n        },\n        lastName: {\n          header: 'Last name',\n          mobileHeader: true,\n          hidden: false,\n          sortable: true,\n        },\n        gender: {\n          mobileHeader: 'Sex',\n          sortable: true,\n          order: 1,\n        },\n        favoriteColor: {\n          header: 'Favorite color',\n          mobileHeader: true,\n          templateRef: this.color,\n          sortable: false,\n          order: 2,\n          search: false,\n          class: 'custom-class',\n        },\n        favoriteFood: {\n          mobileHeader: true,\n          header: 'Favorite food',\n          hidden: false,\n          sortable: true,\n          order: 0,\n        },\n        action: {\n          mobileHeader: false,\n          header: false,\n          templateRef: this.actions,\n          order: 6,\n        },\n      },\n      pagination: {\n        length: this.paginationForm.get('length')?.value || 0,\n      },\n    });\n  }\n}`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { AdvancedComponent } from './advanced.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [AdvancedComponent],\n  imports: [BrowserModule, ReactiveFormsModule, GenericTableCoreModule],\n  bootstrap: [AdvancedComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
            },
            {
                "name": "ADVANCED_DOCS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/pagination/pagination.snippets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'pagination.component.html',\n    code: `<form [formGroup]=\"paginationForm\">\n  <div class=\"row gy-3\">\n    <div class=\"form-group col-12 col-sm-auto\">\n      <label for=\"length_input\">Length</label>\n      <input id=\"length_input\" formControlName=\"length\" type=\"number\" class=\"form-control\">\n    </div>\n    <div class=\"form-group col-12 col-sm-auto\">\n      <label for=\"search_input\">Search</label>\n      <input id=\"search_input\" formControlName=\"search\" type=\"text\" class=\"form-control\">\n    </div>\n  </div>\n</form>\n<div class=\"mx-n3 mx-sm-0 my-3 overflow-auto\">\n  <angular-generic-table [data]=\"data$\" [config]=\"tableConfig$\" [search]=\"search$\" [loading]=\"loading$\" #table>\n    <div class=\"table-loading gt-skeleton-loader\"></div>\n    <div class=\"table-no-data alert alert-info mt-3\">\n      Table is empty\n    </div>\n  </angular-generic-table>\n</div>\n<angular-generic-table-pagination [table]=\"table\">\n</angular-generic-table-pagination>`,\n    language: 'xml',\n  },\n  {\n    name: 'pagination.component.ts',\n    code: `import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { FormBuilder } from '@angular/forms';\nimport { TableConfig } from '@angular-generic-table/core';\nimport { pluck, tap, withLatestFrom } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { DatePipe } from '@angular/common';\n\n@Component({\n  selector: 'docs-pagination',\n  templateUrl: './pagination.component.html',\n  styles: [],\n})\nexport class PaginationComponent implements OnInit {\n  constructor(private fb: FormBuilder, private http: HttpClient) {}\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  @ViewChild('color', { static: true }) color: TemplateRef<any> | undefined;\n  paginationForm = this.fb.group({\n    length: [10],\n    search: [''],\n  });\n  search$ = this.paginationForm.get('search')?.valueChanges as Observable<string>;\n  loading$ = new BehaviorSubject(true);\n  data$: Observable<any> = this.http.get('https://private-730c61-generictable.apiary-mock.com/data').pipe(\n    pluck('data'),\n    tap((_) => this.loading$.next(false))\n  );\n\n  tableConfig$: ReplaySubject<TableConfig> = new ReplaySubject(1);\n\n  ngOnInit(): void {\n    this.paginationForm\n      .get('length')\n      ?.valueChanges.pipe(withLatestFrom(this.tableConfig$))\n      .subscribe(([length, config]) => {\n        length = +length;\n        this.tableConfig$.next({\n          ...config,\n          pagination: { ...config.pagination, length },\n        });\n      });\n    this.tableConfig$.next({\n      class: 'table text-nowrap',\n      columns: {\n        first_name: {\n          sortable: true,\n        },\n        last_name: {\n          sortable: true,\n        },\n        gender: {\n          sortable: true,\n        },\n        birthday: {\n          sortable: true,\n          class: 'text-end',\n          transform: {\n            pipe: DatePipe,\n            args: ['longDate'],\n          },\n        },\n      },\n      pagination: {\n        length: this.paginationForm.get('length')?.value || 0,\n      },\n    });\n  }\n}`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { PaginationComponent } from './pagination.component';\nimport { GenericTableCoreModule, GenericTablePaginationModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [PaginationComponent],\n  imports: [\n    BrowserModule,\n    GenericTableCoreModule,\n    GenericTablePaginationModule,\n    ReactiveFormsModule,\n    HttpClientModule\n  ],\n  bootstrap: [PaginationComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
            },
            {
                "name": "capitalize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/core/src/lib/utilities/utilities.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string"
            },
            {
                "name": "chunk",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/core/src/lib/utilities/utilities.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Array<Array<TableRow>>"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/core/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "CUSTOM_TEMPLATES_DOCS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/custom-templates/custom-templates.snippets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'custom-templates.component.ts',\n    code: `import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { TableColumn, TableConfig, TableRow } from '@angular-generic-table/core';\nimport { ReplaySubject } from 'rxjs';\n\n@Component({\n  selector: 'custom-templates',\n  templateUrl: \\`./custom-templates.component.html\\`\n})\nexport class CustomTemplatesComponent implements OnInit {\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  @ViewChild('color', { static: true }) color: TemplateRef<any> | undefined;\n  clicked = '';\n\n  data = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteColor: '#26BFAF',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteColor: '#0f0',\n      favoriteFood: 'Pizza',\n    },\n  ];\n  config$: ReplaySubject<TableConfig> = new ReplaySubject(1);\n  ngOnInit(): void {\n    this.config$.next({\n      columns: {\n        firstName: {},\n        lastName: {},\n        gender: {},\n        favoriteColor: {\n          templateRef: this.color,\n        },\n        favoriteFood: {},\n        action: {\n          templateRef: this.actions,\n        },\n      },\n    });\n  }\n  clickAction(row: TableRow, column: { key: string; value: TableColumn }, index: number): void {\n    console.log('clicked row:', row, 'col:', column);\n    this.clicked = \\`clicked row number: \\${index}\\`;\n  }\n}`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { CustomTemplatesComponent } from './custom-templates-table.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [CustomTemplatesComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [CustomTemplatesComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n  {\n    name: 'custom-templates.component.html',\n    code: `<angular-generic-table [data]=\"data\" [config]=\"config$\"></angular-generic-table>\n<ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n <button class=\"btn btn-outline-primary btn-sm my-sm-n3 text-nowrap\" (click)=\"clickAction(row, col, index)\">Click me!</button>\n</ng-template>\n<ng-template #color let-row=\"row\" let-col=\"col\">\n <div [style.background]=\"row[col.key]\" style=\"width: 1.5rem; height: 1.5rem; border-radius: 50%\"></div>\n</ng-template>\n{{ clicked }}`,\n    language: 'xml',\n  },\n]"
            },
            {
                "name": "CustomTemplates",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/custom-templates/custom-templates.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CustomTemplatesComponent>",
                "defaultValue": "(\n  args: CustomTemplatesComponent\n) => ({\n  props: args,\n  component: CustomTemplatesComponent,\n})"
            },
            {
                "name": "dashed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/core/src/lib/utilities/utilities.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Horizontal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/horizontal-table/horizontal-table.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<HorizontalTableComponent>",
                "defaultValue": "(\n  args: HorizontalTableComponent\n) => ({\n  props: args,\n  component: HorizontalTableComponent,\n})"
            },
            {
                "name": "HORIZONTAL_TABLE_SNIPPETS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/horizontal-table/horizontal-table.snippets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'horizontal-table.component.ts',\n    code: `import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { GtDeltaComponent, TableConfig, TableRows } from '@angular-generic-table/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Component({\n  selector: 'docs-horizontal',\n  templateUrl: './horizontal-table.component.html',\n  styles: [],\n})\nexport class TransposeComponent implements OnInit {\n  @ViewChild('feelings', { static: true }) feelings:\n    | TemplateRef<any>\n    | undefined;\n  @ViewChild('delta', { static: true }) delta: TemplateRef<GtDeltaComponent> | undefined;\n  @ViewChild('deltaIndex', { static: true }) deltaIndex:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  loading$ = new BehaviorSubject(false);\n  config: TableConfig = {};\n  data: TableRows = [];\n\n  ngOnInit(): void {\n    this.config = {\n      stickyHeaders: {\n        row: true,\n      },\n      mobileLayout: true,\n      rows: {\n        year: {\n          class: 'text-end',\n          header: false\n        },\n        value: {\n          class: 'text-end'\n        },\n        delta: {\n          header: 'Delta %',\n          templateRef: this.delta,\n          class: 'text-end'\n        },\n        deltaIndex: {\n          header: 'Since inception %',\n          templateRef: this.deltaIndex,\n          class: 'text-end'\n        },\n        feeling: {\n          templateRef: this.feelings,\n          class: 'text-end'\n        },\n      },\n    };\n    this.load();\n  }\n  simulateLoad(): void {\n    this.loading$.next(true);\n    // set loading state to false after 2 seconds\n    setTimeout(() => this.loading$.next(false), 2000);\n  }\n  empty(): void {\n    this.data = [];\n  }\n  load(): void {\n    this.data = [\n      {\n        year: '2017',\n        value: 50,\n        feeling: 'neutral'\n      },\n      {\n        year: '2018',\n        value: 75,\n        feeling: 'positive'\n      },\n      {\n        year: '2019',\n        value: 100,\n        feeling: 'thrilled'\n      },\n      {\n        year: '2020',\n        value: 250,\n        feeling: 'thrilled'\n      },\n      {\n        year: '2021',\n        value: 50,\n        feeling: 'negative'\n      }\n    ];\n  }\n}\n`,\n    language: 'typescript',\n  },\n  {\n    name: 'horizontal-table.component.html',\n    code: `<button class=\"btn btn-outline-primary\" (click)=\"simulateLoad()\">Simulate load</button>\n<button class=\"btn btn-outline-danger mx-3\" (click)=\"empty()\">Empty</button>\n<button class=\"btn btn-outline-primary\" (click)=\"load()\">Reset</button>\n<div class=\"overflow-auto\">\n  <angular-generic-table\n    [data]=\"data\"\n    [config]=\"config\"\n    [loading]=\"loading$\"\n  >\n    <div class=\"table-loading gt-skeleton-loader\"></div>\n    <div class=\"table-no-data alert alert-info mt-3\">Table is empty</div>\n  </angular-generic-table>\n</div>\n<ng-template #feelings let-row=\"row\" let-col=\"col\">\n  <div [ngSwitch]=\"row[col.key]\">\n    <ng-container *ngSwitchCase=\"'thrilled'\">😀</ng-container>\n    <ng-container *ngSwitchCase=\"'positive'\">🙂</ng-container>\n    <ng-container *ngSwitchCase=\"'neutral'\">😐</ng-container>\n    <ng-container *ngSwitchCase=\"'negative'\">😭</ng-container>\n  </div>\n</ng-template>\n<ng-template #delta let-data=\"data\" let-index=\"index\">\n  <gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>\n</ng-template>\n<ng-template #deltaIndex let-data=\"data\" let-index=\"index\">\n  <gt-delta [index]=\"index\" [baseIndex]=\"0\" [data]=\"data\"></gt-delta>\n</ng-template>`,\n    language: 'xml',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { HorizontalTableComponent } from './horizontal-table.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [HorizontalTableComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [HorizontalTableComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
            },
            {
                "name": "Mobile",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/mobile-layout/mobile-layout.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MobileLayoutComponent>",
                "defaultValue": "(\n  args: MobileLayoutComponent\n) => ({\n  props: args,\n  component: MobileLayoutComponent,\n})"
            },
            {
                "name": "MOBILE_LAYOUT_SNIPPETS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/mobile-layout/mobileLayout.snippets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'mobile-layout.component.ts',\n    code: `import {Component, Pipe, PipeTransform, TemplateRef, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {TableColumn, TableConfig, TableRow} from \"@angular-generic-table/core\";\nimport {BehaviorSubject, Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\n\n@Pipe({\n  name: 'genderPipe',\n})\nexport class GenderPipe implements PipeTransform {\n  transform(gender: 'male' | 'female'): string {\n  return gender === 'male' ? '👨' : '👩';\n  }\n}\n\n@Component({\n  selector: 'docs-mobile-layout',\n  template: \\`\n    <div class=\"d-flex justify-content-end mb-1 align-items-center\">\n      {{clicked}} <button class=\"btn btn-link d-sm-none \" (click)=\"toggleLayout()\">{{(mobileLayout$ | async)? 'Desktop ' : 'Mobile '}} layout</button>\n    </div>\n    <div [class.overflow-auto]=\"(mobileLayout$ | async) === false\">\n      <angular-generic-table [data]=\"data\" [config]=\"config$\"></angular-generic-table>\n    </div>\n    <ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n      <button class=\"btn btn-outline-primary btn-sm my-sm-n3 text-nowrap\" (click)=\"clickAction(row, col, index)\">Click me!</button>\n    </ng-template>\n  \\`,\n  styles: [\\`\n    .table th {\n      white-space: nowrap;\n    }\n  \\`],\n  encapsulation: ViewEncapsulation.None\n})\nexport class MobileLayoutComponent {\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  clicked = '';\n\n  mobileLayout$ = new BehaviorSubject(true);\n  data = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n    },\n  ];\n  config$: Observable<TableConfig> = this.mobileLayout$.pipe(\n    map(mobileLayout => ({\n      mobileLayout,\n      columns: {\n        firstName: {\n          mobileHeader: true,\n          sortable: true\n        },\n        lastName: {\n          mobileHeader: true,\n          sortable: true\n        },\n        gender: {\n          mobileHeader: true,\n          transform: {\n            pipe: GenderPipe\n          }\n        },\n        favoriteFood: {\n          mobileHeader: true\n        },\n        action: {\n          mobileHeader: false,\n          header: false,\n          templateRef: this.actions,\n        },\n      },\n    }))\n  );\n\n  toggleLayout = (): void => {\n    this.mobileLayout$.next(!this.mobileLayout$.getValue());\n  }\n  clickAction(row: TableRow, column: { key: string; value: TableColumn }, index: number): void {\n    console.log('clicked row:', row, 'col:', column);\n    this.clicked = \\`Clicked row number: \\${index}\\`;\n  }\n}`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { MobileLayoutComponent } from './mobile-layout.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [MobileLayoutComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [MobileLayoutComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
            },
            {
                "name": "Nested",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/nested-data/nested-data.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<NestedDataComponent>",
                "defaultValue": "(\n  args: NestedDataComponent\n) => ({\n  props: args,\n  component: NestedDataComponent,\n})"
            },
            {
                "name": "NESTED_SNIPPETS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/nested-data/nested.snippets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'nested-data.component.ts',\n    code: `import {Component, OnInit, TemplateRef, ViewChild} from '@angular/core';\nimport {TableConfig, TableRows} from \"@angular-generic-table/core\";\n\n@Component({\n  selector: 'nested-data',\n  template: \\`\n    <div class=\"row gy-3\">\n      <div class=\"col col-sm-auto\">\n        <button class=\"btn btn-outline-primary mb-3\" (click)=\"loadData()\">\n          Load other data\n        </button>\n      </div>\n      <div class=\"col col-sm-auto\">\n        <button class=\"btn btn-outline-primary mb-3\" (click)=\"resetData()\">\n          Reset\n        </button>\n      </div>\n    </div>\n    <angular-generic-table [data]=\"data\" [config]=\"config\"></angular-generic-table>\n    <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n    <ng-template #gender let-row=\"row\" let-col=\"col\">\n      <div [ngSwitch]=\"row[col.key]\">\n        <ng-container *ngSwitchCase=\"'male'\">♂️</ng-container>\n        <ng-container *ngSwitchCase=\"'female'\">♀️</ng-container>\n      </div>\n    </ng-template>\n  \\`,\n  styles: [],\n})\nexport class NestedDataComponent implements OnInit {\n  @ViewChild('gender', { static: true }) gender: TemplateRef<any> | undefined;\n\n  config: TableConfig = {};\n  data: TableRows = [];\n  ngOnInit(): void {\n    this.resetData();\n    this.config = {\n      columns: {\n        firstName: {\n          sortable: true,\n          mapTo: { path: 'name.first' },\n        },\n        lastName: {\n          mapTo: { path: 'name.last' },\n        },\n        gender: {\n          mapTo: { path: 'data.details.gender' },\n          templateRef: this.gender,\n        },\n        favoriteFood: {\n          mapTo: { path: 'data.details.favoriteFood', missingValue: 'n/a' },\n        },\n        missing: {\n          mapTo: { path: 'data.missingKey.noMatch', missingValue: 'n/a' },\n        },\n      },\n    };\n  }\n\n  resetData() {\n    this.data = [\n      {\n        name: {\n          first: 'Peter',\n          last: 'Parker',\n        },\n        data: {\n          details: {\n            gender: 'male',\n            favoriteFood: 'Pasta',\n          },\n        },\n      },\n      {\n        name: {\n          first: 'Mary Jane',\n          last: 'Watson',\n        },\n        data: {\n          details: {\n            gender: 'female',\n            favoriteFood: 'Pizza',\n          },\n        },\n      },\n    ];\n  }\n\n  loadData(): void {\n    this.data = [\n      {\n        name: {\n          first: 'John',\n          last: 'Doe',\n        },\n        data: {\n          details: {\n            gender: 'male',\n            favoriteFood: 'Pasta',\n          },\n        },\n      },\n      {\n        name: {\n          first: 'Jane',\n          last: 'Doe',\n        },\n        data: {\n          details: {\n            gender: 'female',\n            favoriteFood: 'Pizza',\n          },\n        },\n      },\n      {\n        name: {\n          first: 'Foo',\n          last: 'Bar',\n        },\n        data: {},\n      },\n    ];\n  }\n}`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { NestedDataComponent } from './nested-data.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [NestedDataComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [NestedDataComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
            },
            {
                "name": "Pagination",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/pagination/pagination.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PaginationComponent>",
                "defaultValue": "(\n  args: PaginationComponent\n) => ({\n  props: args,\n  component: PaginationComponent,\n})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/core/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "search",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/core/src/lib/utilities/utilities.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TableRow[]"
            },
            {
                "name": "Simple",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/simple/simple.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SimpleComponent>",
                "defaultValue": "(args: SimpleComponent) => ({\n  props: args,\n  component: SimpleComponent,\n})"
            },
            {
                "name": "SIMPLE_SNIPPETS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/simple/simple.snippets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'basic-table.component.ts',\n    code: `import { Component } from '@angular/core';\n\n@Component({\n  selector: 'basic-table',\n  template: '<angular-generic-table [data]=\"data\" [config]=\"config\"></angular-generic-table>'\n})\nexport class SimpleComponent {\n  data = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n    },\n  ];\n  config = {\n    columns: {\n      firstName: {},\n      lastName: {},\n      gender: {},\n      favoriteFood: {},\n    },\n  };\n`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { BasicTableComponent } from './basic-table.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [BasicTableComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [BasicTableComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
            },
            {
                "name": "Tabs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/components/tabs/tabs.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TabsComponent>",
                "defaultValue": "(args: TabsComponent) => ({\n  props: args,\n  component: TabsComponent,\n})"
            },
            {
                "name": "Transpose",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/transpose/transpose.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TransposeComponent>",
                "defaultValue": "(\n  args: TransposeComponent\n) => ({\n  props: args,\n  component: TransposeComponent,\n})"
            },
            {
                "name": "TRANSPOSE_SNIPPETS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/docs/src/app/examples/transpose/transpose.snippets.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'transpose.component.ts',\n    code: `import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { TableConfig, TableRows, GtDeltaComponent } from '@angular-generic-table/core';\nimport { FormBuilder } from '@angular/forms';\nimport { withLatestFrom } from 'rxjs/operators';\n\n@Component({\n  selector: 'docs-transpose',\n  templateUrl: './transpose.component.html',\n  styles: []\n})\nexport class TransposeComponent implements OnInit {\n  @ViewChild('delta', { static: true }) delta:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  @ViewChild('deltaIndex', { static: true }) deltaIndex:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  @ViewChild('combined', { static: true }) combined:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  loading$ = new BehaviorSubject(false);\n  reactiveForm = this.fb.group({\n    length: [10],\n    search: [''],\n  });\n  search$ = this.reactiveForm.get('search')?.valueChanges as Observable<string>;\n  tableConfig$: BehaviorSubject<TableConfig> = new BehaviorSubject<TableConfig>(\n    {}\n  );\n  data: TableRows = [];\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.transpose();\n    this.load();\n    this.reactiveForm\n      .get('length')\n      ?.valueChanges.pipe(withLatestFrom(this.tableConfig$))\n      .subscribe(([length, config]) => {\n        length = +length;\n        this.tableConfig$.next({\n          ...config,\n          pagination: { ...config.pagination, length },\n        });\n      });\n  }\n\n  simulateLoad(): void {\n    this.loading$.next(true);\n    // set loading state to false after 2 seconds\n    setTimeout(() => this.loading$.next(false), 2000);\n  }\n  empty(): void {\n    this.data = [];\n  }\n  load(): void {\n    this.data = [\n      {\n        year: '2010',\n        value: 15,\n      },\n      {\n        year: '2011',\n        value: 30,\n      },\n      {\n        year: '2012',\n        value: 25,\n      },\n      {\n        year: '2013',\n        value: 0,\n      },\n      {\n        year: '2014',\n        value: 40,\n      },\n      {\n        year: '2015',\n        value: 60,\n      },\n      {\n        year: '2016',\n        value: -5,\n      },\n      {\n        year: '2018',\n        value: 75,\n      },\n      {\n        year: '2019',\n        value: 100,\n      },\n      {\n        year: '2020',\n        value: 250,\n      },\n      {\n        year: '2021',\n        value: 50,\n      },\n      {\n        year: '2022',\n        value: 60,\n      },\n    ];\n  }\n  transpose(): void {\n    if (this.tableConfig$.value.columns) {\n      this.tableConfig$.next({\n        stickyHeaders: {\n          row: true,\n          column: true,\n        },\n        rows: {\n          year: {\n            sortable: true,\n            header: false,\n            class: 'text-end',\n          },\n          value: {\n            class: 'text-end',\n          },\n          delta: {\n            header: 'Delta %',\n            templateRef: this.delta,\n            class: 'text-end',\n          },\n          deltaIndex: {\n            header: 'Since inception %',\n            templateRef: this.deltaIndex,\n            class: 'text-end',\n          },\n          combined: {\n            header: 'Value with change',\n            templateRef: this.combined,\n            class: 'text-end text-nowrap',\n          },\n        },\n      });\n    } else {\n      this.tableConfig$.next({\n        stickyHeaders: {\n          row: true,\n          column: true,\n        },\n        columns: {\n          year: {\n            sortable: true,\n          },\n          value: {\n            class: 'text-end',\n          },\n          delta: {\n            header: 'Delta %',\n            templateRef: this.delta,\n            class: 'text-end',\n          },\n          deltaIndex: {\n            header: 'Since inception %',\n            templateRef: this.deltaIndex,\n            class: 'text-end',\n          },\n          combined: {\n            header: 'Value with change',\n            templateRef: this.combined,\n            class: 'text-end text-nowrap',\n          },\n        },\n        pagination: { length: this.reactiveForm.get('length')?.value },\n      });\n    }\n  }\n}\n`,\n    language: 'typescript',\n  },\n  {\n    name: 'horizontal-table.component.html',\n    code: `<form [formGroup]=\"reactiveForm\">\n  <div class=\"row gy-3 gx-3 align-items-end mb-3\">\n    <div class=\"form-group col-6 col-sm-auto\">\n      <label for=\"length_input\">Number of rows</label>\n      <input\n        id=\"length_input\"\n        formControlName=\"length\"\n        type=\"number\"\n        class=\"form-control\"\n      />\n    </div>\n    <div class=\"form-group col-6 col-sm-auto\">\n      <label for=\"search_input\">Search</label>\n      <input\n        id=\"search_input\"\n        formControlName=\"search\"\n        type=\"text\"\n        class=\"form-control\"\n      />\n    </div>\n    <div class=\"col-auto\">\n      <button\n        class=\"btn btn-outline-primary w-100\"\n        (click)=\"simulateLoad()\"\n      >\n        Simulate load\n      </button>\n    </div>\n    <div class=\"col col-sm-auto\">\n      <button class=\"btn btn-outline-danger w-100\" (click)=\"empty()\">\n        Empty\n      </button>\n    </div>\n    <div class=\"col col-sm-auto\">\n      <button class=\"btn btn-outline-primary w-100\" (click)=\"load()\">\n        Reset\n      </button>\n    </div>\n    <div class=\"col col-sm-auto\">\n      <button class=\"btn btn-outline-primary w-100\" (click)=\"transpose()\">\n        Transpose\n      </button>\n    </div>\n  </div>\n  <div class=\"overflow-auto\">\n    <angular-generic-table\n      #table\n      [data]=\"data\"\n      [config]=\"tableConfig$\"\n      [loading]=\"loading$\"\n      [search]=\"search$\"\n    >\n      <div class=\"table-loading gt-skeleton-loader\"></div>\n      <div class=\"table-no-data alert alert-info mt-3\">Table is empty</div>\n    </angular-generic-table>\n  </div>\n  <angular-generic-table-pagination [table]=\"table\">\n  </angular-generic-table-pagination>\n  <ng-template #delta let-index=\"index\" let-data=\"data\">\n    <gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>\n  </ng-template>\n  <ng-template #deltaIndex let-index=\"index\" let-data=\"data\">\n    <gt-delta [index]=\"index\" [data]=\"data\" [baseIndex]=\"0\"></gt-delta>\n  </ng-template>\n  <ng-template\n    #combined\n    let-index=\"index\"\n    let-data=\"data\"\n    let-row=\"row\"\n    let-col=\"col\"\n  >\n    {{ row.value }}\n    <ng-container *ngIf=\"index > 0\">\n      (<gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>)\n    </ng-container>\n  </ng-template>\n</form>`,\n    language: 'xml',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { HorizontalTableComponent } from './horizontal-table.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [HorizontalTableComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [HorizontalTableComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "TableRows",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Array<TableRow>",
                "file": "projects/core/src/lib/models/table-row.interface.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            }
        ],
        "enumerations": [
            {
                "name": "Order",
                "childs": [
                    {
                        "name": "ASC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "asc"
                    },
                    {
                        "name": "DESC",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "desc"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/core/src/lib/enums/order.enum.ts"
            }
        ],
        "groupedVariables": {
            "projects/docs/src/app/app.component.ts": [
                {
                    "name": "Advanced",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/app.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<AppComponent>",
                    "defaultValue": "(args: AppComponent) => ({\n  props: args,\n  component: AppComponent,\n})"
                }
            ],
            "projects/docs/src/app/examples/advanced/advanced.component.ts": [
                {
                    "name": "Advanced",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/advanced/advanced.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<AdvancedComponent>",
                    "defaultValue": "(\n  args: AdvancedComponent\n) => ({\n  props: args,\n  component: AdvancedComponent,\n})"
                }
            ],
            "projects/docs/src/app/examples/advanced/advanced.snippets.ts": [
                {
                    "name": "ADVANCED_DOCS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/advanced/advanced.snippets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'advanced.component.html',\n    code: `<div class=\"row gx-2 gy-3 mb-3\">\n  <div class=\"col-12 col-sm-auto\">\n    <button class=\"btn btn-primary w-100\" (click)=\"addData()\">Add random data</button>\n  </div>\n  <div class=\"col-12 col-sm-auto\">\n    <button class=\"btn btn-danger w-100\" (click)=\"removeData()\">Remove data</button>\n  </div>\n  <div class=\"col-12 col-sm-auto\">\n    <button class=\"btn btn-secondary w-100\" (click)=\"simulateLoad()\">Load</button>\n  </div>\n</div>\n<form [formGroup]=\"paginationForm\">\n  <div class=\"row\">\n    <div class=\"form-group col-12 col-sm-auto\">\n      <label for=\"length_input\">Length</label>\n      <input id=\"length_input\" formControlName=\"length\" type=\"number\" class=\"form-control\">\n    </div>\n    <div class=\"form-group col-12 col-sm-auto\">\n      <label for=\"search_input\">Search</label>\n      <input id=\"search_input\" formControlName=\"search\" type=\"text\" class=\"form-control\">\n    </div>\n  </div>\n</form>\n<div class=\"mx-n3 mx-sm-0\">\n  <angular-generic-table [data]=\"data$\" [config]=\"tableConfig$\" [page]=\"(currentPage$ | async)!\" [search]=\"search$\" [loading]=\"loading$\" #table>\n    <div class=\"table-loading gt-skeleton-loader\"></div>\n    <div class=\"table-no-data alert alert-info mt-3\">\n      Table is empty\n    </div>\n  </angular-generic-table>\n</div>\n<div class=\"row justify-content-between justify-content-sm-center align-items-center mt-3\" *ngIf=\"{current: (currentPage$ | async) || 0,total: (table.table$ | async)?.info?.pageTotal || 1\n} as pagination\">\n  <div class=\"col-auto\">\n    <button class=\"btn btn-primary\" (click)=\"prev()\" [disabled]=\"pagination.current === 0\">Prev</button>\n  </div>\n  <div class=\"col-auto\">\n    <button class=\"btn btn-primary\" (click)=\"next()\" [disabled]=\"pagination.total -1 === pagination.current\">Next</button>\n  </div>\n  <div class=\"col-auto\">Current page: {{pagination.current +1}}</div>\n  <div class=\"col-auto\">Total pages: {{pagination.total}}</div>\n  <div class=\"col-auto\">\n    Records: {{(data$ | async).length}}\n  </div>\n  <div class=\"col-auto\">\n    {{clicked}}\n  </div>\n</div>\n<ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n  <button class=\"btn btn-outline-primary btn-sm my-sm-n3\" (click)=\"clickAction(row, col, index)\">Click me!</button>\n</ng-template>\n<ng-template #color let-row=\"row\" let-col=\"col\">\n  <div [style.background]=\"row[col.key]\" style=\"width: 1.5rem; height: 1.5rem; border-radius: 50%\"></div>\n</ng-template>`,\n    language: 'xml',\n  },\n  {\n    name: 'advanced.component.ts',\n    code: `import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { FormBuilder } from '@angular/forms';\nimport { TableColumn, TableConfig, TableRow } from '@angular-generic-table/core';\nimport { withLatestFrom } from 'rxjs/operators';\n\n@Component({\n  selector: 'docs-advanced',\n  templateUrl: './advanced.component.html',\n  styles: [],\n})\nexport class AdvancedComponent implements OnInit {\n  get currentPage$(): Observable<number> {\n    return this._currentPage$.asObservable();\n  }\n\n  set currentPage(value: number) {\n    this._currentPage$.next(value);\n  }\n  constructor(private fb: FormBuilder) {}\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  @ViewChild('color', { static: true }) color: TemplateRef<any> | undefined;\n  paginationForm = this.fb.group({\n    length: [10],\n    search: [''],\n  });\n  search$ = this.paginationForm.get('search')?.valueChanges as Observable<string>;\n  loading$ = new BehaviorSubject(true);\n  data$: BehaviorSubject<any> = new BehaviorSubject([\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteColor: '#26BFAF',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteColor: '#0f0',\n      favoriteFood: 'Pizza',\n    },\n  ]);\n\n  private _currentPage$ = new BehaviorSubject(0);\n\n  clicked: string = '';\n  maleFirstNames = ['Peter', 'Clark', 'Ruben', 'John', 'Jack', 'Roscoe'];\n  femaleFirstNames = ['Mary Jane', 'Kim', 'Sarah', 'Michelle', 'Ann'];\n  lastNames = ['Andersson', 'Smith', 'Parker', 'Kent', 'Rogers', 'Lane', 'Jackson'];\n  foods = ['Pizza', 'Pasta', 'Hamburger', 'Pancakes', 'Tacos', 'Lasagna', 'Meatloaf'];\n  colors = ['#33d60b', '#dcafff', '#3fc9ff', '#ff1600', '#5238b1', '#fff'];\n\n  tableConfig$: ReplaySubject<TableConfig> = new ReplaySubject(1);\n\n  addData(): void {\n    this.data$.next([...this.data$.getValue(), this.randomRecord()]);\n  }\n\n  removeData(): void {\n    this.data$.next([]);\n  }\n\n  simulateLoad(): void {\n    this.loading$.next(true);\n    // set loading state to false after 2 seconds\n    setTimeout(() => this.loading$.next(false), 2000);\n  }\n\n  clickAction(row: TableRow, column: { key: string; value: TableColumn }, index: number): void {\n    console.log('clicked row:', row, 'col:', column);\n    this.clicked = \\`clicked row number: \\${index}\\`;\n  }\n\n  randomRecord(): TableRow {\n    const random = Math.floor(Math.random() * 2);\n    const newRecord = {\n      firstName: random\n        ? this.maleFirstNames[Math.floor(Math.random() * this.maleFirstNames.length)]\n        : this.femaleFirstNames[Math.floor(Math.random() * this.femaleFirstNames.length)],\n      lastName: this.lastNames[Math.floor(Math.random() * this.lastNames.length)],\n      gender: random ? 'male' : 'female',\n      favoriteColor: this.colors[Math.floor(Math.random() * this.colors.length)],\n      favoriteFood: this.foods[Math.floor(Math.random() * this.foods.length)],\n    };\n    console.log('added new random record:', newRecord);\n\n    return newRecord;\n  }\n\n  next = () => {\n    this.currentPage = this._currentPage$.value + 1;\n  };\n  prev = () => {\n    this.currentPage = this._currentPage$.value - 1;\n  };\n\n  ngOnInit(): void {\n    this.simulateLoad();\n    this.paginationForm\n      .get('length')\n      ?.valueChanges.pipe(withLatestFrom(this.tableConfig$))\n      .subscribe(([length, config]) => {\n        length = +length;\n        this.tableConfig$.next({\n          ...config,\n          pagination: { ...config.pagination, length },\n        });\n      });\n    this.tableConfig$.next({\n      class: 'table table-mobile text-nowrap mb-0',\n      columns: {\n        firstName: {\n          header: 'First name',\n          mobileHeader: true,\n          sortable: true,\n          order: 0,\n        },\n        lastName: {\n          header: 'Last name',\n          mobileHeader: true,\n          hidden: false,\n          sortable: true,\n        },\n        gender: {\n          mobileHeader: 'Sex',\n          sortable: true,\n          order: 1,\n        },\n        favoriteColor: {\n          header: 'Favorite color',\n          mobileHeader: true,\n          templateRef: this.color,\n          sortable: false,\n          order: 2,\n          search: false,\n          class: 'custom-class',\n        },\n        favoriteFood: {\n          mobileHeader: true,\n          header: 'Favorite food',\n          hidden: false,\n          sortable: true,\n          order: 0,\n        },\n        action: {\n          mobileHeader: false,\n          header: false,\n          templateRef: this.actions,\n          order: 6,\n        },\n      },\n      pagination: {\n        length: this.paginationForm.get('length')?.value || 0,\n      },\n    });\n  }\n}`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { AdvancedComponent } from './advanced.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [AdvancedComponent],\n  imports: [BrowserModule, ReactiveFormsModule, GenericTableCoreModule],\n  bootstrap: [AdvancedComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
                }
            ],
            "projects/docs/src/app/examples/pagination/pagination.snippets.ts": [
                {
                    "name": "ADVANCED_DOCS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/pagination/pagination.snippets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'pagination.component.html',\n    code: `<form [formGroup]=\"paginationForm\">\n  <div class=\"row gy-3\">\n    <div class=\"form-group col-12 col-sm-auto\">\n      <label for=\"length_input\">Length</label>\n      <input id=\"length_input\" formControlName=\"length\" type=\"number\" class=\"form-control\">\n    </div>\n    <div class=\"form-group col-12 col-sm-auto\">\n      <label for=\"search_input\">Search</label>\n      <input id=\"search_input\" formControlName=\"search\" type=\"text\" class=\"form-control\">\n    </div>\n  </div>\n</form>\n<div class=\"mx-n3 mx-sm-0 my-3 overflow-auto\">\n  <angular-generic-table [data]=\"data$\" [config]=\"tableConfig$\" [search]=\"search$\" [loading]=\"loading$\" #table>\n    <div class=\"table-loading gt-skeleton-loader\"></div>\n    <div class=\"table-no-data alert alert-info mt-3\">\n      Table is empty\n    </div>\n  </angular-generic-table>\n</div>\n<angular-generic-table-pagination [table]=\"table\">\n</angular-generic-table-pagination>`,\n    language: 'xml',\n  },\n  {\n    name: 'pagination.component.ts',\n    code: `import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { FormBuilder } from '@angular/forms';\nimport { TableConfig } from '@angular-generic-table/core';\nimport { pluck, tap, withLatestFrom } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { DatePipe } from '@angular/common';\n\n@Component({\n  selector: 'docs-pagination',\n  templateUrl: './pagination.component.html',\n  styles: [],\n})\nexport class PaginationComponent implements OnInit {\n  constructor(private fb: FormBuilder, private http: HttpClient) {}\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  @ViewChild('color', { static: true }) color: TemplateRef<any> | undefined;\n  paginationForm = this.fb.group({\n    length: [10],\n    search: [''],\n  });\n  search$ = this.paginationForm.get('search')?.valueChanges as Observable<string>;\n  loading$ = new BehaviorSubject(true);\n  data$: Observable<any> = this.http.get('https://private-730c61-generictable.apiary-mock.com/data').pipe(\n    pluck('data'),\n    tap((_) => this.loading$.next(false))\n  );\n\n  tableConfig$: ReplaySubject<TableConfig> = new ReplaySubject(1);\n\n  ngOnInit(): void {\n    this.paginationForm\n      .get('length')\n      ?.valueChanges.pipe(withLatestFrom(this.tableConfig$))\n      .subscribe(([length, config]) => {\n        length = +length;\n        this.tableConfig$.next({\n          ...config,\n          pagination: { ...config.pagination, length },\n        });\n      });\n    this.tableConfig$.next({\n      class: 'table text-nowrap',\n      columns: {\n        first_name: {\n          sortable: true,\n        },\n        last_name: {\n          sortable: true,\n        },\n        gender: {\n          sortable: true,\n        },\n        birthday: {\n          sortable: true,\n          class: 'text-end',\n          transform: {\n            pipe: DatePipe,\n            args: ['longDate'],\n          },\n        },\n      },\n      pagination: {\n        length: this.paginationForm.get('length')?.value || 0,\n      },\n    });\n  }\n}`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { PaginationComponent } from './pagination.component';\nimport { GenericTableCoreModule, GenericTablePaginationModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [PaginationComponent],\n  imports: [\n    BrowserModule,\n    GenericTableCoreModule,\n    GenericTablePaginationModule,\n    ReactiveFormsModule,\n    HttpClientModule\n  ],\n  bootstrap: [PaginationComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
                }
            ],
            "projects/core/src/lib/utilities/utilities.ts": [
                {
                    "name": "capitalize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/core/src/lib/utilities/utilities.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string"
                },
                {
                    "name": "chunk",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/core/src/lib/utilities/utilities.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Array<TableRow>>"
                },
                {
                    "name": "dashed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/core/src/lib/utilities/utilities.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string"
                },
                {
                    "name": "search",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/core/src/lib/utilities/utilities.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableRow[]"
                }
            ],
            "projects/core/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/core/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/core/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/docs/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/docs/src/app/examples/custom-templates/custom-templates.snippets.ts": [
                {
                    "name": "CUSTOM_TEMPLATES_DOCS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/custom-templates/custom-templates.snippets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'custom-templates.component.ts',\n    code: `import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { TableColumn, TableConfig, TableRow } from '@angular-generic-table/core';\nimport { ReplaySubject } from 'rxjs';\n\n@Component({\n  selector: 'custom-templates',\n  templateUrl: \\`./custom-templates.component.html\\`\n})\nexport class CustomTemplatesComponent implements OnInit {\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  @ViewChild('color', { static: true }) color: TemplateRef<any> | undefined;\n  clicked = '';\n\n  data = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteColor: '#26BFAF',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteColor: '#0f0',\n      favoriteFood: 'Pizza',\n    },\n  ];\n  config$: ReplaySubject<TableConfig> = new ReplaySubject(1);\n  ngOnInit(): void {\n    this.config$.next({\n      columns: {\n        firstName: {},\n        lastName: {},\n        gender: {},\n        favoriteColor: {\n          templateRef: this.color,\n        },\n        favoriteFood: {},\n        action: {\n          templateRef: this.actions,\n        },\n      },\n    });\n  }\n  clickAction(row: TableRow, column: { key: string; value: TableColumn }, index: number): void {\n    console.log('clicked row:', row, 'col:', column);\n    this.clicked = \\`clicked row number: \\${index}\\`;\n  }\n}`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { CustomTemplatesComponent } from './custom-templates-table.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [CustomTemplatesComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [CustomTemplatesComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n  {\n    name: 'custom-templates.component.html',\n    code: `<angular-generic-table [data]=\"data\" [config]=\"config$\"></angular-generic-table>\n<ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n <button class=\"btn btn-outline-primary btn-sm my-sm-n3 text-nowrap\" (click)=\"clickAction(row, col, index)\">Click me!</button>\n</ng-template>\n<ng-template #color let-row=\"row\" let-col=\"col\">\n <div [style.background]=\"row[col.key]\" style=\"width: 1.5rem; height: 1.5rem; border-radius: 50%\"></div>\n</ng-template>\n{{ clicked }}`,\n    language: 'xml',\n  },\n]"
                }
            ],
            "projects/docs/src/app/examples/custom-templates/custom-templates.component.ts": [
                {
                    "name": "CustomTemplates",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/custom-templates/custom-templates.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CustomTemplatesComponent>",
                    "defaultValue": "(\n  args: CustomTemplatesComponent\n) => ({\n  props: args,\n  component: CustomTemplatesComponent,\n})"
                }
            ],
            "projects/docs/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "projects/docs/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "projects/docs/src/app/examples/horizontal-table/horizontal-table.component.ts": [
                {
                    "name": "Horizontal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/horizontal-table/horizontal-table.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<HorizontalTableComponent>",
                    "defaultValue": "(\n  args: HorizontalTableComponent\n) => ({\n  props: args,\n  component: HorizontalTableComponent,\n})"
                }
            ],
            "projects/docs/src/app/examples/horizontal-table/horizontal-table.snippets.ts": [
                {
                    "name": "HORIZONTAL_TABLE_SNIPPETS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/horizontal-table/horizontal-table.snippets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'horizontal-table.component.ts',\n    code: `import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { GtDeltaComponent, TableConfig, TableRows } from '@angular-generic-table/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Component({\n  selector: 'docs-horizontal',\n  templateUrl: './horizontal-table.component.html',\n  styles: [],\n})\nexport class TransposeComponent implements OnInit {\n  @ViewChild('feelings', { static: true }) feelings:\n    | TemplateRef<any>\n    | undefined;\n  @ViewChild('delta', { static: true }) delta: TemplateRef<GtDeltaComponent> | undefined;\n  @ViewChild('deltaIndex', { static: true }) deltaIndex:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  loading$ = new BehaviorSubject(false);\n  config: TableConfig = {};\n  data: TableRows = [];\n\n  ngOnInit(): void {\n    this.config = {\n      stickyHeaders: {\n        row: true,\n      },\n      mobileLayout: true,\n      rows: {\n        year: {\n          class: 'text-end',\n          header: false\n        },\n        value: {\n          class: 'text-end'\n        },\n        delta: {\n          header: 'Delta %',\n          templateRef: this.delta,\n          class: 'text-end'\n        },\n        deltaIndex: {\n          header: 'Since inception %',\n          templateRef: this.deltaIndex,\n          class: 'text-end'\n        },\n        feeling: {\n          templateRef: this.feelings,\n          class: 'text-end'\n        },\n      },\n    };\n    this.load();\n  }\n  simulateLoad(): void {\n    this.loading$.next(true);\n    // set loading state to false after 2 seconds\n    setTimeout(() => this.loading$.next(false), 2000);\n  }\n  empty(): void {\n    this.data = [];\n  }\n  load(): void {\n    this.data = [\n      {\n        year: '2017',\n        value: 50,\n        feeling: 'neutral'\n      },\n      {\n        year: '2018',\n        value: 75,\n        feeling: 'positive'\n      },\n      {\n        year: '2019',\n        value: 100,\n        feeling: 'thrilled'\n      },\n      {\n        year: '2020',\n        value: 250,\n        feeling: 'thrilled'\n      },\n      {\n        year: '2021',\n        value: 50,\n        feeling: 'negative'\n      }\n    ];\n  }\n}\n`,\n    language: 'typescript',\n  },\n  {\n    name: 'horizontal-table.component.html',\n    code: `<button class=\"btn btn-outline-primary\" (click)=\"simulateLoad()\">Simulate load</button>\n<button class=\"btn btn-outline-danger mx-3\" (click)=\"empty()\">Empty</button>\n<button class=\"btn btn-outline-primary\" (click)=\"load()\">Reset</button>\n<div class=\"overflow-auto\">\n  <angular-generic-table\n    [data]=\"data\"\n    [config]=\"config\"\n    [loading]=\"loading$\"\n  >\n    <div class=\"table-loading gt-skeleton-loader\"></div>\n    <div class=\"table-no-data alert alert-info mt-3\">Table is empty</div>\n  </angular-generic-table>\n</div>\n<ng-template #feelings let-row=\"row\" let-col=\"col\">\n  <div [ngSwitch]=\"row[col.key]\">\n    <ng-container *ngSwitchCase=\"'thrilled'\">😀</ng-container>\n    <ng-container *ngSwitchCase=\"'positive'\">🙂</ng-container>\n    <ng-container *ngSwitchCase=\"'neutral'\">😐</ng-container>\n    <ng-container *ngSwitchCase=\"'negative'\">😭</ng-container>\n  </div>\n</ng-template>\n<ng-template #delta let-data=\"data\" let-index=\"index\">\n  <gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>\n</ng-template>\n<ng-template #deltaIndex let-data=\"data\" let-index=\"index\">\n  <gt-delta [index]=\"index\" [baseIndex]=\"0\" [data]=\"data\"></gt-delta>\n</ng-template>`,\n    language: 'xml',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { HorizontalTableComponent } from './horizontal-table.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [HorizontalTableComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [HorizontalTableComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
                }
            ],
            "projects/docs/src/app/examples/mobile-layout/mobile-layout.component.ts": [
                {
                    "name": "Mobile",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/mobile-layout/mobile-layout.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MobileLayoutComponent>",
                    "defaultValue": "(\n  args: MobileLayoutComponent\n) => ({\n  props: args,\n  component: MobileLayoutComponent,\n})"
                }
            ],
            "projects/docs/src/app/examples/mobile-layout/mobileLayout.snippets.ts": [
                {
                    "name": "MOBILE_LAYOUT_SNIPPETS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/mobile-layout/mobileLayout.snippets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'mobile-layout.component.ts',\n    code: `import {Component, Pipe, PipeTransform, TemplateRef, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {TableColumn, TableConfig, TableRow} from \"@angular-generic-table/core\";\nimport {BehaviorSubject, Observable} from \"rxjs\";\nimport {map} from \"rxjs/operators\";\n\n@Pipe({\n  name: 'genderPipe',\n})\nexport class GenderPipe implements PipeTransform {\n  transform(gender: 'male' | 'female'): string {\n  return gender === 'male' ? '👨' : '👩';\n  }\n}\n\n@Component({\n  selector: 'docs-mobile-layout',\n  template: \\`\n    <div class=\"d-flex justify-content-end mb-1 align-items-center\">\n      {{clicked}} <button class=\"btn btn-link d-sm-none \" (click)=\"toggleLayout()\">{{(mobileLayout$ | async)? 'Desktop ' : 'Mobile '}} layout</button>\n    </div>\n    <div [class.overflow-auto]=\"(mobileLayout$ | async) === false\">\n      <angular-generic-table [data]=\"data\" [config]=\"config$\"></angular-generic-table>\n    </div>\n    <ng-template #actions let-row=\"row\" let-col=\"col\" let-index=\"index\">\n      <button class=\"btn btn-outline-primary btn-sm my-sm-n3 text-nowrap\" (click)=\"clickAction(row, col, index)\">Click me!</button>\n    </ng-template>\n  \\`,\n  styles: [\\`\n    .table th {\n      white-space: nowrap;\n    }\n  \\`],\n  encapsulation: ViewEncapsulation.None\n})\nexport class MobileLayoutComponent {\n  @ViewChild('actions', { static: true }) actions: TemplateRef<any> | undefined;\n  clicked = '';\n\n  mobileLayout$ = new BehaviorSubject(true);\n  data = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n    },\n  ];\n  config$: Observable<TableConfig> = this.mobileLayout$.pipe(\n    map(mobileLayout => ({\n      mobileLayout,\n      columns: {\n        firstName: {\n          mobileHeader: true,\n          sortable: true\n        },\n        lastName: {\n          mobileHeader: true,\n          sortable: true\n        },\n        gender: {\n          mobileHeader: true,\n          transform: {\n            pipe: GenderPipe\n          }\n        },\n        favoriteFood: {\n          mobileHeader: true\n        },\n        action: {\n          mobileHeader: false,\n          header: false,\n          templateRef: this.actions,\n        },\n      },\n    }))\n  );\n\n  toggleLayout = (): void => {\n    this.mobileLayout$.next(!this.mobileLayout$.getValue());\n  }\n  clickAction(row: TableRow, column: { key: string; value: TableColumn }, index: number): void {\n    console.log('clicked row:', row, 'col:', column);\n    this.clicked = \\`Clicked row number: \\${index}\\`;\n  }\n}`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { MobileLayoutComponent } from './mobile-layout.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [MobileLayoutComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [MobileLayoutComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
                }
            ],
            "projects/docs/src/app/examples/nested-data/nested-data.component.ts": [
                {
                    "name": "Nested",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/nested-data/nested-data.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<NestedDataComponent>",
                    "defaultValue": "(\n  args: NestedDataComponent\n) => ({\n  props: args,\n  component: NestedDataComponent,\n})"
                }
            ],
            "projects/docs/src/app/examples/nested-data/nested.snippets.ts": [
                {
                    "name": "NESTED_SNIPPETS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/nested-data/nested.snippets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'nested-data.component.ts',\n    code: `import {Component, OnInit, TemplateRef, ViewChild} from '@angular/core';\nimport {TableConfig, TableRows} from \"@angular-generic-table/core\";\n\n@Component({\n  selector: 'nested-data',\n  template: \\`\n    <div class=\"row gy-3\">\n      <div class=\"col col-sm-auto\">\n        <button class=\"btn btn-outline-primary mb-3\" (click)=\"loadData()\">\n          Load other data\n        </button>\n      </div>\n      <div class=\"col col-sm-auto\">\n        <button class=\"btn btn-outline-primary mb-3\" (click)=\"resetData()\">\n          Reset\n        </button>\n      </div>\n    </div>\n    <angular-generic-table [data]=\"data\" [config]=\"config\"></angular-generic-table>\n    <docs-tabs [content]=\"SNIPPETS\"></docs-tabs>\n    <ng-template #gender let-row=\"row\" let-col=\"col\">\n      <div [ngSwitch]=\"row[col.key]\">\n        <ng-container *ngSwitchCase=\"'male'\">♂️</ng-container>\n        <ng-container *ngSwitchCase=\"'female'\">♀️</ng-container>\n      </div>\n    </ng-template>\n  \\`,\n  styles: [],\n})\nexport class NestedDataComponent implements OnInit {\n  @ViewChild('gender', { static: true }) gender: TemplateRef<any> | undefined;\n\n  config: TableConfig = {};\n  data: TableRows = [];\n  ngOnInit(): void {\n    this.resetData();\n    this.config = {\n      columns: {\n        firstName: {\n          sortable: true,\n          mapTo: { path: 'name.first' },\n        },\n        lastName: {\n          mapTo: { path: 'name.last' },\n        },\n        gender: {\n          mapTo: { path: 'data.details.gender' },\n          templateRef: this.gender,\n        },\n        favoriteFood: {\n          mapTo: { path: 'data.details.favoriteFood', missingValue: 'n/a' },\n        },\n        missing: {\n          mapTo: { path: 'data.missingKey.noMatch', missingValue: 'n/a' },\n        },\n      },\n    };\n  }\n\n  resetData() {\n    this.data = [\n      {\n        name: {\n          first: 'Peter',\n          last: 'Parker',\n        },\n        data: {\n          details: {\n            gender: 'male',\n            favoriteFood: 'Pasta',\n          },\n        },\n      },\n      {\n        name: {\n          first: 'Mary Jane',\n          last: 'Watson',\n        },\n        data: {\n          details: {\n            gender: 'female',\n            favoriteFood: 'Pizza',\n          },\n        },\n      },\n    ];\n  }\n\n  loadData(): void {\n    this.data = [\n      {\n        name: {\n          first: 'John',\n          last: 'Doe',\n        },\n        data: {\n          details: {\n            gender: 'male',\n            favoriteFood: 'Pasta',\n          },\n        },\n      },\n      {\n        name: {\n          first: 'Jane',\n          last: 'Doe',\n        },\n        data: {\n          details: {\n            gender: 'female',\n            favoriteFood: 'Pizza',\n          },\n        },\n      },\n      {\n        name: {\n          first: 'Foo',\n          last: 'Bar',\n        },\n        data: {},\n      },\n    ];\n  }\n}`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { NestedDataComponent } from './nested-data.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [NestedDataComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [NestedDataComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
                }
            ],
            "projects/docs/src/app/examples/pagination/pagination.component.ts": [
                {
                    "name": "Pagination",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/pagination/pagination.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PaginationComponent>",
                    "defaultValue": "(\n  args: PaginationComponent\n) => ({\n  props: args,\n  component: PaginationComponent,\n})"
                }
            ],
            "projects/docs/src/app/examples/simple/simple.component.ts": [
                {
                    "name": "Simple",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/simple/simple.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SimpleComponent>",
                    "defaultValue": "(args: SimpleComponent) => ({\n  props: args,\n  component: SimpleComponent,\n})"
                }
            ],
            "projects/docs/src/app/examples/simple/simple.snippets.ts": [
                {
                    "name": "SIMPLE_SNIPPETS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/simple/simple.snippets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'basic-table.component.ts',\n    code: `import { Component } from '@angular/core';\n\n@Component({\n  selector: 'basic-table',\n  template: '<angular-generic-table [data]=\"data\" [config]=\"config\"></angular-generic-table>'\n})\nexport class SimpleComponent {\n  data = [\n    {\n      firstName: 'Peter',\n      lastName: 'Parker',\n      gender: 'male',\n      favoriteFood: 'Pasta',\n    },\n    {\n      firstName: 'Mary Jane',\n      lastName: 'Watson',\n      gender: 'female',\n      favoriteFood: 'Pizza',\n    },\n  ];\n  config = {\n    columns: {\n      firstName: {},\n      lastName: {},\n      gender: {},\n      favoriteFood: {},\n    },\n  };\n`,\n    language: 'typescript',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { BasicTableComponent } from './basic-table.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [BasicTableComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [BasicTableComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
                }
            ],
            "projects/docs/src/app/components/tabs/tabs.component.ts": [
                {
                    "name": "Tabs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/components/tabs/tabs.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TabsComponent>",
                    "defaultValue": "(args: TabsComponent) => ({\n  props: args,\n  component: TabsComponent,\n})"
                }
            ],
            "projects/docs/src/app/examples/transpose/transpose.component.ts": [
                {
                    "name": "Transpose",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/transpose/transpose.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TransposeComponent>",
                    "defaultValue": "(\n  args: TransposeComponent\n) => ({\n  props: args,\n  component: TransposeComponent,\n})"
                }
            ],
            "projects/docs/src/app/examples/transpose/transpose.snippets.ts": [
                {
                    "name": "TRANSPOSE_SNIPPETS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/docs/src/app/examples/transpose/transpose.snippets.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'transpose.component.ts',\n    code: `import { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { TableConfig, TableRows, GtDeltaComponent } from '@angular-generic-table/core';\nimport { FormBuilder } from '@angular/forms';\nimport { withLatestFrom } from 'rxjs/operators';\n\n@Component({\n  selector: 'docs-transpose',\n  templateUrl: './transpose.component.html',\n  styles: []\n})\nexport class TransposeComponent implements OnInit {\n  @ViewChild('delta', { static: true }) delta:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  @ViewChild('deltaIndex', { static: true }) deltaIndex:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  @ViewChild('combined', { static: true }) combined:\n    | TemplateRef<GtDeltaComponent>\n    | undefined;\n  loading$ = new BehaviorSubject(false);\n  reactiveForm = this.fb.group({\n    length: [10],\n    search: [''],\n  });\n  search$ = this.reactiveForm.get('search')?.valueChanges as Observable<string>;\n  tableConfig$: BehaviorSubject<TableConfig> = new BehaviorSubject<TableConfig>(\n    {}\n  );\n  data: TableRows = [];\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.transpose();\n    this.load();\n    this.reactiveForm\n      .get('length')\n      ?.valueChanges.pipe(withLatestFrom(this.tableConfig$))\n      .subscribe(([length, config]) => {\n        length = +length;\n        this.tableConfig$.next({\n          ...config,\n          pagination: { ...config.pagination, length },\n        });\n      });\n  }\n\n  simulateLoad(): void {\n    this.loading$.next(true);\n    // set loading state to false after 2 seconds\n    setTimeout(() => this.loading$.next(false), 2000);\n  }\n  empty(): void {\n    this.data = [];\n  }\n  load(): void {\n    this.data = [\n      {\n        year: '2010',\n        value: 15,\n      },\n      {\n        year: '2011',\n        value: 30,\n      },\n      {\n        year: '2012',\n        value: 25,\n      },\n      {\n        year: '2013',\n        value: 0,\n      },\n      {\n        year: '2014',\n        value: 40,\n      },\n      {\n        year: '2015',\n        value: 60,\n      },\n      {\n        year: '2016',\n        value: -5,\n      },\n      {\n        year: '2018',\n        value: 75,\n      },\n      {\n        year: '2019',\n        value: 100,\n      },\n      {\n        year: '2020',\n        value: 250,\n      },\n      {\n        year: '2021',\n        value: 50,\n      },\n      {\n        year: '2022',\n        value: 60,\n      },\n    ];\n  }\n  transpose(): void {\n    if (this.tableConfig$.value.columns) {\n      this.tableConfig$.next({\n        stickyHeaders: {\n          row: true,\n          column: true,\n        },\n        rows: {\n          year: {\n            sortable: true,\n            header: false,\n            class: 'text-end',\n          },\n          value: {\n            class: 'text-end',\n          },\n          delta: {\n            header: 'Delta %',\n            templateRef: this.delta,\n            class: 'text-end',\n          },\n          deltaIndex: {\n            header: 'Since inception %',\n            templateRef: this.deltaIndex,\n            class: 'text-end',\n          },\n          combined: {\n            header: 'Value with change',\n            templateRef: this.combined,\n            class: 'text-end text-nowrap',\n          },\n        },\n      });\n    } else {\n      this.tableConfig$.next({\n        stickyHeaders: {\n          row: true,\n          column: true,\n        },\n        columns: {\n          year: {\n            sortable: true,\n          },\n          value: {\n            class: 'text-end',\n          },\n          delta: {\n            header: 'Delta %',\n            templateRef: this.delta,\n            class: 'text-end',\n          },\n          deltaIndex: {\n            header: 'Since inception %',\n            templateRef: this.deltaIndex,\n            class: 'text-end',\n          },\n          combined: {\n            header: 'Value with change',\n            templateRef: this.combined,\n            class: 'text-end text-nowrap',\n          },\n        },\n        pagination: { length: this.reactiveForm.get('length')?.value },\n      });\n    }\n  }\n}\n`,\n    language: 'typescript',\n  },\n  {\n    name: 'horizontal-table.component.html',\n    code: `<form [formGroup]=\"reactiveForm\">\n  <div class=\"row gy-3 gx-3 align-items-end mb-3\">\n    <div class=\"form-group col-6 col-sm-auto\">\n      <label for=\"length_input\">Number of rows</label>\n      <input\n        id=\"length_input\"\n        formControlName=\"length\"\n        type=\"number\"\n        class=\"form-control\"\n      />\n    </div>\n    <div class=\"form-group col-6 col-sm-auto\">\n      <label for=\"search_input\">Search</label>\n      <input\n        id=\"search_input\"\n        formControlName=\"search\"\n        type=\"text\"\n        class=\"form-control\"\n      />\n    </div>\n    <div class=\"col-auto\">\n      <button\n        class=\"btn btn-outline-primary w-100\"\n        (click)=\"simulateLoad()\"\n      >\n        Simulate load\n      </button>\n    </div>\n    <div class=\"col col-sm-auto\">\n      <button class=\"btn btn-outline-danger w-100\" (click)=\"empty()\">\n        Empty\n      </button>\n    </div>\n    <div class=\"col col-sm-auto\">\n      <button class=\"btn btn-outline-primary w-100\" (click)=\"load()\">\n        Reset\n      </button>\n    </div>\n    <div class=\"col col-sm-auto\">\n      <button class=\"btn btn-outline-primary w-100\" (click)=\"transpose()\">\n        Transpose\n      </button>\n    </div>\n  </div>\n  <div class=\"overflow-auto\">\n    <angular-generic-table\n      #table\n      [data]=\"data\"\n      [config]=\"tableConfig$\"\n      [loading]=\"loading$\"\n      [search]=\"search$\"\n    >\n      <div class=\"table-loading gt-skeleton-loader\"></div>\n      <div class=\"table-no-data alert alert-info mt-3\">Table is empty</div>\n    </angular-generic-table>\n  </div>\n  <angular-generic-table-pagination [table]=\"table\">\n  </angular-generic-table-pagination>\n  <ng-template #delta let-index=\"index\" let-data=\"data\">\n    <gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>\n  </ng-template>\n  <ng-template #deltaIndex let-index=\"index\" let-data=\"data\">\n    <gt-delta [index]=\"index\" [data]=\"data\" [baseIndex]=\"0\"></gt-delta>\n  </ng-template>\n  <ng-template\n    #combined\n    let-index=\"index\"\n    let-data=\"data\"\n    let-row=\"row\"\n    let-col=\"col\"\n  >\n    {{ row.value }}\n    <ng-container *ngIf=\"index > 0\">\n      (<gt-delta [index]=\"index\" [data]=\"data\"></gt-delta>)\n    </ng-container>\n  </ng-template>\n</form>`,\n    language: 'xml',\n  },\n  {\n    name: 'app.module.ts',\n    code: `import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { HorizontalTableComponent } from './horizontal-table.component';\nimport { GenericTableCoreModule } from '@angular-generic-table/core';\n\n@NgModule({\n  declarations: [HorizontalTableComponent],\n  imports: [BrowserModule, GenericTableCoreModule],\n  bootstrap: [HorizontalTableComponent]\n})\nexport class AppModule {}`,\n    language: 'typescript',\n  },\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "projects/core/src/lib/enums/order.enum.ts": [
                {
                    "name": "Order",
                    "childs": [
                        {
                            "name": "ASC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "asc"
                        },
                        {
                            "name": "DESC",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "desc"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/core/src/lib/enums/order.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/core/src/lib/models/table-row.interface.ts": [
                {
                    "name": "TableRows",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Array<TableRow>",
                    "file": "projects/core/src/lib/models/table-row.interface.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "projects/docs/src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "advanced",
                        "component": "AdvancedComponent"
                    },
                    {
                        "path": "pagination",
                        "component": "PaginationComponent"
                    },
                    {
                        "path": "simple",
                        "component": "SimpleComponent"
                    },
                    {
                        "path": "horizontal-table",
                        "component": "HorizontalTableComponent"
                    },
                    {
                        "path": "custom-templates",
                        "component": "CustomTemplatesComponent"
                    },
                    {
                        "path": "mobile-layout",
                        "component": "MobileLayoutComponent"
                    },
                    {
                        "path": "nested",
                        "component": "NestedDataComponent"
                    },
                    {
                        "path": "transpose",
                        "component": "TransposeComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/core/src/lib/core.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CoreComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/core.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CoreService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/gt-delta/gt-delta.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GtDeltaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/models/gt-pagination.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GtPaginationAriaLabels",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/models/gt-pagination.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GtPaginationClasses",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/models/table-column.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableColumn",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/models/table-config.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableConfig",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/models/table-info.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableInfo",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/models/table-meta.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableMeta",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/models/table-row.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableRow",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/models/table-sort.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableSort",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/pagination/pagination.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/pipes/capital-case.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "CapitalCasePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/pipes/dash-case.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "DashCasePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/pipes/dynamic.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "DynamicPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/pipes/highlight.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "HighlightPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/pipes/sort-class.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SortClassPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/utilities/utilities.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "capitalize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/utilities/utilities.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "chunk",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/utilities/utilities.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dashed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/lib/utilities/utilities.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "search",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/core/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/app.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Advanced",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/components/tabs/tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TabsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/components/tabs/tabs.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Tabs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/advanced/advanced.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdvancedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/advanced/advanced.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Advanced",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/advanced/advanced.snippets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADVANCED_DOCS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/custom-templates/custom-templates.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomTemplatesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/custom-templates/custom-templates.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomTemplates",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/custom-templates/custom-templates.snippets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CUSTOM_TEMPLATES_DOCS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/horizontal-table/horizontal-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HorizontalTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/horizontal-table/horizontal-table.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Horizontal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/horizontal-table/horizontal-table.snippets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HORIZONTAL_TABLE_SNIPPETS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/mobile-layout/mobile-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MobileLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/mobile-layout/mobile-layout.component.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GenderPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/mobile-layout/mobile-layout.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Mobile",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/mobile-layout/mobileLayout.snippets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MOBILE_LAYOUT_SNIPPETS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/nested-data/nested-data.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NestedDataComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/nested-data/nested-data.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Nested",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/nested-data/nested.snippets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NESTED_SNIPPETS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/pagination/pagination.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/pagination/pagination.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Pagination",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/pagination/pagination.snippets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADVANCED_DOCS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/simple/simple.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SimpleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/simple/simple.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Simple",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/simple/simple.snippets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SIMPLE_SNIPPETS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/transpose/transpose.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TransposeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/transpose/transpose.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Transpose",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/app/examples/transpose/transpose.snippets.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TRANSPOSE_SNIPPETS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/docs/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}